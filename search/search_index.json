{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Kumada Zero Budgeting System My complete guide to managing my household budget with the Budget App. Zero-balance budgeting: Prevents reckless spending. Every dollar has a job! Get Started","title":"Home"},{"location":"#kumada-zero-budgeting-system","text":"My complete guide to managing my household budget with the Budget App. Zero-balance budgeting: Prevents reckless spending. Every dollar has a job! Get Started","title":"Kumada Zero Budgeting System"},{"location":"development/","text":"Development Updates This page tracks recent improvements and changes to the budget system. 2024 Balance Checking Enhancement Date: December 2024 Branch: fix/incidentals Issue: EOY process allowing users to proceed with unbalanced system Problem Identified The End of Year (EOY) process had a critical flaw where users could bypass balance checking with a \"proceed anyway\" option. This was dangerous because: End of Month Issues (Low Risk): Unbalanced transactions can be fixed in subsequent months End of Year Issues (HIGH RISK): Wrong bank balances get copied to opening positions for new fiscal year, corrupting the entire year's foundation Changes Made 1. Refactored Balance Checking System Before: Mixed approach with hardcoded cell references and inconsistent checking After: Unified checkAllBalances() function using named ranges exclusively Benefits: Robust against sheet structure changes Consistent behavior across all processes Proper fallback handling 2. Strict EOY Balance Enforcement Before: EOY processes allowed \"proceed anyway\" option After: EOY processes completely blocked if system unbalanced New Error Message: ``` \ud83d\udea8 Balance Check Failed - EOY Process Blocked Critical balance issues found: \u2022 Banks sheet is not balanced (X.XX) \ud83d\udd34 CRITICAL: The End of Year process copies current bank balances to become opening balances for the new fiscal year. \u274c EOY process cannot proceed until all balances are zero. \ud83d\udca1 Tip: 1. First - Update bank balances to June 30 (including final interest) 2. Second - Use 'Reconciliation Dashboard' to fix Cash Flow issues ``` 3. Developer Mode Support Added: DEV_MODE bypass for all balance checks Purpose: Allows testing of process logic without perfect balance setup Safety: Only available when DEV_MODE = true in script properties 4. Process-Specific Behavior End of Month: Retains flexible warning with \"proceed anyway\" option End of Year: Strict blocking with no override option Reasoning: Different risk profiles require different approaches Files Modified src/config/namedRanges.js \u251c\u2500\u2500 Extended BALANCE_CHECK ranges \u2514\u2500\u2500 Added MAINTAIN_BUDGET_BALANCE named range src/utility/endOfMonth.js \u251c\u2500\u2500 Enhanced checkAllBalances() function \u251c\u2500\u2500 Added DEV_MODE bypass support \u2514\u2500\u2500 Consistent error messaging src/utility/yearEndBudget.js \u251c\u2500\u2500 Added checkAllBalances() function \u251c\u2500\u2500 Strict balance checking in showYearEndHelp() \u251c\u2500\u2500 Removed duplicate balance check in setupNewYearBudget() \u251c\u2500\u2500 Enhanced continueEOYSetup() balance checking \u2514\u2500\u2500 DEV_MODE bypass support Documentation Updated guides/yearly-tasks/end-of-year/overview.mdx \u251c\u2500\u2500 Updated Pre-EOY Requirements section \u2514\u2500\u2500 Added strict balance checking warnings guides/yearly-tasks/end-of-year/setup.mdx \u251c\u2500\u2500 Updated balance requirements section \u2514\u2500\u2500 Removed references to \"proceed anyway\" option guides/troubleshooting/common-issues.mdx \u251c\u2500\u2500 Created comprehensive troubleshooting guide \u251c\u2500\u2500 Added EOY balance checking failure solutions \u251c\u2500\u2500 Added developer mode documentation \u2514\u2500\u2500 Added authorization failure solutions quickstart.mdx \u251c\u2500\u2500 Added Critical Balance Requirement section \u2514\u2500\u2500 Highlighted new strict balance checking Impact Positive \ud83d\udee1\ufe0f Data Protection: Prevents catastrophic opening balance corruption \ud83d\udd27 Developer Friendly: DEV_MODE bypass supports testing workflows \ud83d\udcda Better Documentation: Comprehensive troubleshooting guidance \ud83c\udfd7\ufe0f Robust Architecture: Named ranges prevent sheet structure brittleness User Experience \u26a0\ufe0f Stricter Requirements: Users must resolve balance issues before EOY \ud83d\udca1 Clear Guidance: Error messages explain why and how to fix issues \ud83c\udfaf Focused Solutions: Direct users to Reconciliation Dashboard Technical Improvements Named Ranges Exclusively: ```javascript // Before: Hardcoded and brittle const banksBalance = banksSheet.getRange(\"C30\").getValue(); // After: Robust and maintainable const banksBalanceRange = ss.getRangeByName(\"banksBalance\"); const banksBalance = banksBalanceRange.getValue(); ``` Unified Balance Checking: javascript // New comprehensive function function checkAllBalances(showDetails = false) { // Checks all 3 critical balance cells // Returns detailed status information // Supports developer mode bypass } Risk-Based Processing: ```javascript // End of Month: Flexible (can be corrected later) if (!balanceCheck.isBalanced) { const response = ui.alert(\"\u26a0\ufe0f Balance Check Failed\", message, YES_NO); if (response !== ui.Button.YES) return; } // End of Year: Strict (prevents data corruption) if (!balanceCheck.isBalanced) { ui.alert(\"\ud83d\udea8 Balance Check Failed - EOY Process Blocked\", message, OK); return; // No override option } ``` Future Considerations Named Range Management: Consider creating automated named range validation Balance Monitoring: Potential for proactive balance issue detection Recovery Tools: Enhanced tools for fixing common balance issues Audit Trail: Consider logging balance check results for debugging Testing \u2705 EOY Process: Blocked when system unbalanced \u2705 EOM Process: Flexible warning with override option \u2705 DEV_MODE: All balance checks bypassed appropriately \u2705 Named Ranges: Robust handling when ranges missing \u2705 Error Messages: Clear, actionable guidance provided 2025 ACTIVE Flag and Deletion Management Enhancement Date: January 2025 Branch: feature/balance-mismatch-detection Issue: Manual deletion causing balance inconsistencies and ACTIVE flag sync issues Problem Identified The system had several critical issues with category management: Manual Deletion Issues: Users could manually delete rows from Annual Budget or Maintain Budget sheets, causing balance inconsistencies ACTIVE Flag Sync Problems: Automatic triggers for ACTIVE flag synchronization were unreliable and caused performance issues Inconsistent Safety Checks: Deletion safety checks had incorrect column mappings and missing validations Zero Budget Distribution: System allowed distribution of items with zero budget amounts Changes Made 1. Robust ACTIVE Flag Synchronization Before: Relied on unreliable onEdit triggers that caused performance issues After: \"Distribution is the Gatekeeper\" approach - ACTIVE flags sync only after successful distribution Benefits: Reliable synchronization without performance impact Single point of truth for ACTIVE flag updates Automatic sync after individual and bulk distribution 2. Enhanced Deletion Safety Checks Before: Incorrect column mappings and missing validations After: Comprehensive safety checks with proper column mappings New Validations: Prevents deletion of items with reconciled transactions (ACTUAL > 0) Corrects LookUps column mapping (Category: rowData[3], Subcategory: rowData[5]) Warns about Annual Budget sheet removal Ensures proper cleanup across all sheets 3. Budget Distribution Validation Before: No validation of budget balance or individual item amounts After: Comprehensive validation before distribution New Features: Budget balance validation using named ranges Individual item budget amount validation (prevents zero-budget distribution) Popup warnings for unbalanced budgets Option to proceed despite warnings 4. Developer Tools Enhancement Added: \"\ud83d\udd04 Re-sync ACTIVE Flags\" function in Developer menu Simplified: Function now calls existing syncActiveFlagsFromBudgetedItems() Purpose: Manual sync when needed without performance impact Files Modified src/modules/distributeBudget.js \u251c\u2500\u2500 Added isBudgetBalanced() function \u251c\u2500\u2500 Added getBudgetBalance() function \u251c\u2500\u2500 Added checkDistributionRequirements() function \u251c\u2500\u2500 Added onDistributionComplete() function \u251c\u2500\u2500 Enhanced distributeValuesFromRow() with validation \u2514\u2500\u2500 Simplified cleanupActiveFlagInconsistencies() src/utility/budgetTools.js \u251c\u2500\u2500 Enhanced bulkDistribute() with balance validation \u251c\u2500\u2500 Added budget > 0 filtering \u2514\u2500\u2500 Added onDistributionComplete() call src/server/lookupManager.js \u251c\u2500\u2500 Fixed column mappings in safety checks \u251c\u2500\u2500 Added reconciled transaction validation \u251c\u2500\u2500 Added Annual Budget sheet cleanup \u2514\u2500\u2500 Enhanced deletion warnings src/triggers/onOpen.js \u251c\u2500\u2500 Deprecated unreliable onEdit triggers \u251c\u2500\u2500 Updated Developer menu with new functions \u2514\u2500\u2500 Added global function exports Technical Improvements Named Range Usage: javascript // Proper named range usage with sheet names const maintainBalanceRange = ss.getRangeByName(\"'Maintain Budget'!maintainBudgetBalance\"); const annualBalanceRange = ss.getRangeByName(\"'Annual Budget'!budgetBalance\"); Distribution Validation: ```javascript // Budget balance validation if (!isBudgetBalanced()) { const response = ui.alert(\"Budget Not Balanced\", message, YES_NO); if (response !== ui.Button.YES) return false; } // Individual item validation if (budgetAmount <= 0) { ui.alert(\"Cannot distribute zero budget amount\"); return; } ``` ACTIVE Flag Synchronization: javascript // Single point of sync after distribution function onDistributionComplete() { try { console.log(\"\ud83d\udd04 Syncing ACTIVE flags after distribution...\"); syncActiveFlagsFromBudgetedItems(); console.log(\"\u2705 ACTIVE flags synced successfully\"); } catch (error) { console.error(\"\u274c Error syncing ACTIVE flags:\", error.message); } } Enhanced Safety Checks: ``javascript // Prevent deletion of items with reconciled transactions if (actualAmount > 0) { issues.push( CRITICAL: Cannot delete item with reconciled transactions ($${actualAmount.toFixed(2)})`); } // Correct column mapping const category = rowData[3]; // Category Name const subcategory = rowData[5]; // Subcategory Name ``` Documentation Updates Menu Reference: Updated to reflect current menu structure and functions Troubleshooting Guide: Added sections on ACTIVE flag issues and manual deletion problems Basic Operations: Updated category management workflows and best practices Development Docs: Added comprehensive change log and technical details Impact Positive \ud83d\udee1\ufe0f Data Integrity: Prevents accidental data loss from manual deletions \ud83d\udd04 Reliable Sync: ACTIVE flags now sync consistently without performance issues \u2696\ufe0f Balance Protection: Validates budget balance before distribution \ud83d\udd27 Better UX: Clear warnings and guidance for users User Experience \u26a0\ufe0f Stricter Validation: Users must have balanced budgets for distribution \ud83d\udca1 Clear Guidance: Better error messages and warnings \ud83c\udfaf Proper Workflow: Encourages use of menu functions over manual editing Future Considerations Sheet Protection: Consider protecting critical ranges to prevent manual deletion Audit Trail: Log category changes for better tracking Recovery Tools: Enhanced tools for fixing balance inconsistencies User Education: Continued emphasis on proper workflow usage Testing \u2705 ACTIVE Flag Sync: Reliable synchronization after distribution \u2705 Deletion Safety: Prevents deletion of items with reconciled transactions \u2705 Budget Validation: Blocks distribution of zero-budget items \u2705 Balance Checking: Validates budget balance before distribution \u2705 Column Mapping: Correct LookUps sheet column references This update significantly improves data integrity and user workflow while maintaining system performance and reliability.","title":"Development Updates"},{"location":"development/#development-updates","text":"This page tracks recent improvements and changes to the budget system.","title":"Development Updates"},{"location":"development/#2024-balance-checking-enhancement","text":"Date: December 2024 Branch: fix/incidentals Issue: EOY process allowing users to proceed with unbalanced system","title":"2024 Balance Checking Enhancement"},{"location":"development/#problem-identified","text":"The End of Year (EOY) process had a critical flaw where users could bypass balance checking with a \"proceed anyway\" option. This was dangerous because: End of Month Issues (Low Risk): Unbalanced transactions can be fixed in subsequent months End of Year Issues (HIGH RISK): Wrong bank balances get copied to opening positions for new fiscal year, corrupting the entire year's foundation","title":"Problem Identified"},{"location":"development/#changes-made","text":"","title":"Changes Made"},{"location":"development/#1-refactored-balance-checking-system","text":"Before: Mixed approach with hardcoded cell references and inconsistent checking After: Unified checkAllBalances() function using named ranges exclusively Benefits: Robust against sheet structure changes Consistent behavior across all processes Proper fallback handling","title":"1. Refactored Balance Checking System"},{"location":"development/#2-strict-eoy-balance-enforcement","text":"Before: EOY processes allowed \"proceed anyway\" option After: EOY processes completely blocked if system unbalanced New Error Message: ``` \ud83d\udea8 Balance Check Failed - EOY Process Blocked Critical balance issues found: \u2022 Banks sheet is not balanced (X.XX) \ud83d\udd34 CRITICAL: The End of Year process copies current bank balances to become opening balances for the new fiscal year. \u274c EOY process cannot proceed until all balances are zero. \ud83d\udca1 Tip: 1. First - Update bank balances to June 30 (including final interest) 2. Second - Use 'Reconciliation Dashboard' to fix Cash Flow issues ```","title":"2. Strict EOY Balance Enforcement"},{"location":"development/#3-developer-mode-support","text":"Added: DEV_MODE bypass for all balance checks Purpose: Allows testing of process logic without perfect balance setup Safety: Only available when DEV_MODE = true in script properties","title":"3. Developer Mode Support"},{"location":"development/#4-process-specific-behavior","text":"End of Month: Retains flexible warning with \"proceed anyway\" option End of Year: Strict blocking with no override option Reasoning: Different risk profiles require different approaches","title":"4. Process-Specific Behavior"},{"location":"development/#files-modified","text":"src/config/namedRanges.js \u251c\u2500\u2500 Extended BALANCE_CHECK ranges \u2514\u2500\u2500 Added MAINTAIN_BUDGET_BALANCE named range src/utility/endOfMonth.js \u251c\u2500\u2500 Enhanced checkAllBalances() function \u251c\u2500\u2500 Added DEV_MODE bypass support \u2514\u2500\u2500 Consistent error messaging src/utility/yearEndBudget.js \u251c\u2500\u2500 Added checkAllBalances() function \u251c\u2500\u2500 Strict balance checking in showYearEndHelp() \u251c\u2500\u2500 Removed duplicate balance check in setupNewYearBudget() \u251c\u2500\u2500 Enhanced continueEOYSetup() balance checking \u2514\u2500\u2500 DEV_MODE bypass support","title":"Files Modified"},{"location":"development/#documentation-updated","text":"guides/yearly-tasks/end-of-year/overview.mdx \u251c\u2500\u2500 Updated Pre-EOY Requirements section \u2514\u2500\u2500 Added strict balance checking warnings guides/yearly-tasks/end-of-year/setup.mdx \u251c\u2500\u2500 Updated balance requirements section \u2514\u2500\u2500 Removed references to \"proceed anyway\" option guides/troubleshooting/common-issues.mdx \u251c\u2500\u2500 Created comprehensive troubleshooting guide \u251c\u2500\u2500 Added EOY balance checking failure solutions \u251c\u2500\u2500 Added developer mode documentation \u2514\u2500\u2500 Added authorization failure solutions quickstart.mdx \u251c\u2500\u2500 Added Critical Balance Requirement section \u2514\u2500\u2500 Highlighted new strict balance checking","title":"Documentation Updated"},{"location":"development/#impact","text":"","title":"Impact"},{"location":"development/#positive","text":"\ud83d\udee1\ufe0f Data Protection: Prevents catastrophic opening balance corruption \ud83d\udd27 Developer Friendly: DEV_MODE bypass supports testing workflows \ud83d\udcda Better Documentation: Comprehensive troubleshooting guidance \ud83c\udfd7\ufe0f Robust Architecture: Named ranges prevent sheet structure brittleness","title":"Positive"},{"location":"development/#user-experience","text":"\u26a0\ufe0f Stricter Requirements: Users must resolve balance issues before EOY \ud83d\udca1 Clear Guidance: Error messages explain why and how to fix issues \ud83c\udfaf Focused Solutions: Direct users to Reconciliation Dashboard","title":"User Experience"},{"location":"development/#technical-improvements","text":"Named Ranges Exclusively: ```javascript // Before: Hardcoded and brittle const banksBalance = banksSheet.getRange(\"C30\").getValue(); // After: Robust and maintainable const banksBalanceRange = ss.getRangeByName(\"banksBalance\"); const banksBalance = banksBalanceRange.getValue(); ``` Unified Balance Checking: javascript // New comprehensive function function checkAllBalances(showDetails = false) { // Checks all 3 critical balance cells // Returns detailed status information // Supports developer mode bypass } Risk-Based Processing: ```javascript // End of Month: Flexible (can be corrected later) if (!balanceCheck.isBalanced) { const response = ui.alert(\"\u26a0\ufe0f Balance Check Failed\", message, YES_NO); if (response !== ui.Button.YES) return; } // End of Year: Strict (prevents data corruption) if (!balanceCheck.isBalanced) { ui.alert(\"\ud83d\udea8 Balance Check Failed - EOY Process Blocked\", message, OK); return; // No override option } ```","title":"Technical Improvements"},{"location":"development/#future-considerations","text":"Named Range Management: Consider creating automated named range validation Balance Monitoring: Potential for proactive balance issue detection Recovery Tools: Enhanced tools for fixing common balance issues Audit Trail: Consider logging balance check results for debugging","title":"Future Considerations"},{"location":"development/#testing","text":"\u2705 EOY Process: Blocked when system unbalanced \u2705 EOM Process: Flexible warning with override option \u2705 DEV_MODE: All balance checks bypassed appropriately \u2705 Named Ranges: Robust handling when ranges missing \u2705 Error Messages: Clear, actionable guidance provided","title":"Testing"},{"location":"development/#2025-active-flag-and-deletion-management-enhancement","text":"Date: January 2025 Branch: feature/balance-mismatch-detection Issue: Manual deletion causing balance inconsistencies and ACTIVE flag sync issues","title":"2025 ACTIVE Flag and Deletion Management Enhancement"},{"location":"development/#problem-identified_1","text":"The system had several critical issues with category management: Manual Deletion Issues: Users could manually delete rows from Annual Budget or Maintain Budget sheets, causing balance inconsistencies ACTIVE Flag Sync Problems: Automatic triggers for ACTIVE flag synchronization were unreliable and caused performance issues Inconsistent Safety Checks: Deletion safety checks had incorrect column mappings and missing validations Zero Budget Distribution: System allowed distribution of items with zero budget amounts","title":"Problem Identified"},{"location":"development/#changes-made_1","text":"","title":"Changes Made"},{"location":"development/#1-robust-active-flag-synchronization","text":"Before: Relied on unreliable onEdit triggers that caused performance issues After: \"Distribution is the Gatekeeper\" approach - ACTIVE flags sync only after successful distribution Benefits: Reliable synchronization without performance impact Single point of truth for ACTIVE flag updates Automatic sync after individual and bulk distribution","title":"1. Robust ACTIVE Flag Synchronization"},{"location":"development/#2-enhanced-deletion-safety-checks","text":"Before: Incorrect column mappings and missing validations After: Comprehensive safety checks with proper column mappings New Validations: Prevents deletion of items with reconciled transactions (ACTUAL > 0) Corrects LookUps column mapping (Category: rowData[3], Subcategory: rowData[5]) Warns about Annual Budget sheet removal Ensures proper cleanup across all sheets","title":"2. Enhanced Deletion Safety Checks"},{"location":"development/#3-budget-distribution-validation","text":"Before: No validation of budget balance or individual item amounts After: Comprehensive validation before distribution New Features: Budget balance validation using named ranges Individual item budget amount validation (prevents zero-budget distribution) Popup warnings for unbalanced budgets Option to proceed despite warnings","title":"3. Budget Distribution Validation"},{"location":"development/#4-developer-tools-enhancement","text":"Added: \"\ud83d\udd04 Re-sync ACTIVE Flags\" function in Developer menu Simplified: Function now calls existing syncActiveFlagsFromBudgetedItems() Purpose: Manual sync when needed without performance impact","title":"4. Developer Tools Enhancement"},{"location":"development/#files-modified_1","text":"src/modules/distributeBudget.js \u251c\u2500\u2500 Added isBudgetBalanced() function \u251c\u2500\u2500 Added getBudgetBalance() function \u251c\u2500\u2500 Added checkDistributionRequirements() function \u251c\u2500\u2500 Added onDistributionComplete() function \u251c\u2500\u2500 Enhanced distributeValuesFromRow() with validation \u2514\u2500\u2500 Simplified cleanupActiveFlagInconsistencies() src/utility/budgetTools.js \u251c\u2500\u2500 Enhanced bulkDistribute() with balance validation \u251c\u2500\u2500 Added budget > 0 filtering \u2514\u2500\u2500 Added onDistributionComplete() call src/server/lookupManager.js \u251c\u2500\u2500 Fixed column mappings in safety checks \u251c\u2500\u2500 Added reconciled transaction validation \u251c\u2500\u2500 Added Annual Budget sheet cleanup \u2514\u2500\u2500 Enhanced deletion warnings src/triggers/onOpen.js \u251c\u2500\u2500 Deprecated unreliable onEdit triggers \u251c\u2500\u2500 Updated Developer menu with new functions \u2514\u2500\u2500 Added global function exports","title":"Files Modified"},{"location":"development/#technical-improvements_1","text":"Named Range Usage: javascript // Proper named range usage with sheet names const maintainBalanceRange = ss.getRangeByName(\"'Maintain Budget'!maintainBudgetBalance\"); const annualBalanceRange = ss.getRangeByName(\"'Annual Budget'!budgetBalance\"); Distribution Validation: ```javascript // Budget balance validation if (!isBudgetBalanced()) { const response = ui.alert(\"Budget Not Balanced\", message, YES_NO); if (response !== ui.Button.YES) return false; } // Individual item validation if (budgetAmount <= 0) { ui.alert(\"Cannot distribute zero budget amount\"); return; } ``` ACTIVE Flag Synchronization: javascript // Single point of sync after distribution function onDistributionComplete() { try { console.log(\"\ud83d\udd04 Syncing ACTIVE flags after distribution...\"); syncActiveFlagsFromBudgetedItems(); console.log(\"\u2705 ACTIVE flags synced successfully\"); } catch (error) { console.error(\"\u274c Error syncing ACTIVE flags:\", error.message); } } Enhanced Safety Checks: ``javascript // Prevent deletion of items with reconciled transactions if (actualAmount > 0) { issues.push( CRITICAL: Cannot delete item with reconciled transactions ($${actualAmount.toFixed(2)})`); } // Correct column mapping const category = rowData[3]; // Category Name const subcategory = rowData[5]; // Subcategory Name ```","title":"Technical Improvements"},{"location":"development/#documentation-updates","text":"Menu Reference: Updated to reflect current menu structure and functions Troubleshooting Guide: Added sections on ACTIVE flag issues and manual deletion problems Basic Operations: Updated category management workflows and best practices Development Docs: Added comprehensive change log and technical details","title":"Documentation Updates"},{"location":"development/#impact_1","text":"","title":"Impact"},{"location":"development/#positive_1","text":"\ud83d\udee1\ufe0f Data Integrity: Prevents accidental data loss from manual deletions \ud83d\udd04 Reliable Sync: ACTIVE flags now sync consistently without performance issues \u2696\ufe0f Balance Protection: Validates budget balance before distribution \ud83d\udd27 Better UX: Clear warnings and guidance for users","title":"Positive"},{"location":"development/#user-experience_1","text":"\u26a0\ufe0f Stricter Validation: Users must have balanced budgets for distribution \ud83d\udca1 Clear Guidance: Better error messages and warnings \ud83c\udfaf Proper Workflow: Encourages use of menu functions over manual editing","title":"User Experience"},{"location":"development/#future-considerations_1","text":"Sheet Protection: Consider protecting critical ranges to prevent manual deletion Audit Trail: Log category changes for better tracking Recovery Tools: Enhanced tools for fixing balance inconsistencies User Education: Continued emphasis on proper workflow usage","title":"Future Considerations"},{"location":"development/#testing_1","text":"\u2705 ACTIVE Flag Sync: Reliable synchronization after distribution \u2705 Deletion Safety: Prevents deletion of items with reconciled transactions \u2705 Budget Validation: Blocks distribution of zero-budget items \u2705 Balance Checking: Validates budget balance before distribution \u2705 Column Mapping: Correct LookUps sheet column references This update significantly improves data integrity and user workflow while maintaining system performance and reliability.","title":"Testing"},{"location":"introduction/","text":"My Personal Budget System This documentation will help me manage my household budget effectively using our Google Sheets-based system. Quick Links Daily Tasks : Learn how to import and categorize transactions Monthly Tasks : End of month procedures and reporting Need Help? : Troubleshooting and support","title":"Home"},{"location":"introduction/#my-personal-budget-system","text":"This documentation will help me manage my household budget effectively using our Google Sheets-based system.","title":"My Personal Budget System"},{"location":"introduction/#quick-links","text":"Daily Tasks : Learn how to import and categorize transactions Monthly Tasks : End of month procedures and reporting Need Help? : Troubleshooting and support","title":"Quick Links"},{"location":"quickstart/","text":"Quickstart Guide Welcome to the Budget System! This guide will help you get started with the basic operations you'll use regularly. First Steps 1. Access Your Budget Spreadsheet Open your Google Sheets budget spreadsheet Wait for the custom menus to load (\ud83c\udfe6 Budget, \ud83d\udcc5 Period Processing, etc.) Verify you can see the main menu options 2. Check System Status Look for the current month highlighted in blue Verify all sheets are accessible (Annual Budget, Cash Flow, Bank Records) Check that categories are set up in the LookUps sheet Daily Workflow Import Bank Transactions Download bank statements - Get CSV or spreadsheet format Open Import Tool - Click \ud83c\udfe6 Budget > Import Bank Transactions Choose method: Paste Data: Copy/paste from bank statement Manual Entry: Enter transactions manually Select bank format - Choose your bank type Review column mapping - Verify date, amount, description Process import - Handle duplicates and review results Reconcile Transactions Open Dashboard - Click \ud83c\udfe6 Budget > Reconciliation Dashboard Review auto-matches - Green highlighted transactions Handle unmatched - Click \"Add to Cash Flow\" for bank-only transactions Categorize transactions - Assign categories and subcategories Process splits - Handle split transactions with multiple categories Verify completion - Ensure all transactions reconciled Manage Categories Access Category Manager - Click \u2699\ufe0f Settings > Sheet Settings > Manage Categories Add categories - Create new income/expense categories Edit categories - Modify names and descriptions Toggle status - Activate/deactivate categories as needed Add subcategories - Create detailed breakdowns Monthly Tasks End of Month Process Verify reconciliation - Ensure all transactions reconciled Check balances - Verify account and budget balances Run EOM process - Click \ud83d\udcc5 Period Processing > Run End of Month Process Confirm month - Verify correct month is being processed Review results - Check copied values and formatting Month Management Initialize statuses - Click \ud83d\udcc5 Period Processing > End of Year > Initialize Month Statuses Verify highlighting - Check current month is highlighted in blue Note: Month management functions moved to Period Processing > End of Year submenu Settings and Configuration Import Settings Manage templates - Click \u2699\ufe0f Settings > Import Settings > Manage Import Templates Configure banks - Set up column mappings for your banks Save mappings - Store configurations for future imports Advanced Settings Archive master - Click \u2699\ufe0f Settings > Advanced Settings > Archive This Master Sync categories - Click \u2699\ufe0f Settings > Sheet Settings > Sync ACTIVE Flags Validate system - Click \u2699\ufe0f Settings > Sheet Settings > Validate ACTIVE Flags End of Year Process Important Annual Process: The End of Year (EOY) process is a critical annual procedure that must be completed in June to transition to the new fiscal year. When You Need EOY Setup The EOY process is required when: - It's June (final month of fiscal year) - System only allows access during June - You've completed all reconciliation for the current fiscal year - You're ready to set up the budget for the next financial year (July-June) EOY Process Overview The modern EOY process is a four-step guided workflow : Initial Setup (in master spreadsheet) - Export settings and create new copy Configuration & Budget Update (in new copy) - Set up new year and update budget amounts Month Processing (in new copy) - Run EOM to transition from June to July Finalization (in new copy) - Complete setup and archive previous master Learn about the End of Year process Step-by-step EOY setup instructions Troubleshooting Common Issues Problem: Custom menus not appearing Solution: - Refresh the page (Ctrl+F5) - Check script authorization - Verify spreadsheet access Problem: Can't import transactions Solution: - Check bank format selection - Verify column mapping - Review data format - Try manual entry method Problem: Dashboard not working Solution: - Refresh the dashboard - Check transaction data - Verify sheet access - Run performance diagnostics Problem: End of month process fails Solution: - Verify all transactions reconciled - Check current month setting - Review balance issues - Initialize month statuses Best Practices Import transactions weekly Reconcile before month-end Use consistent category names Keep backup copies Review balances regularly Document any issues Next Steps Learn about importing and reconciling Understand month-end processing Get help with common issues Getting Help User Manual: Click \u2139\ufe0f Help > User Manual Online Documentation: Click \u2139\ufe0f Help > Online Documentation Version Info: Click \u2139\ufe0f Help > About (Version Info) Developer Mode: Click \u2139\ufe0f Help > Toggle Developer Mode (for advanced users) For detailed instructions on any process, refer to the specific guides in the documentation.","title":"Quickstart"},{"location":"quickstart/#quickstart-guide","text":"Welcome to the Budget System! This guide will help you get started with the basic operations you'll use regularly.","title":"Quickstart Guide"},{"location":"quickstart/#first-steps","text":"","title":"First Steps"},{"location":"quickstart/#1-access-your-budget-spreadsheet","text":"Open your Google Sheets budget spreadsheet Wait for the custom menus to load (\ud83c\udfe6 Budget, \ud83d\udcc5 Period Processing, etc.) Verify you can see the main menu options","title":"1. Access Your Budget Spreadsheet"},{"location":"quickstart/#2-check-system-status","text":"Look for the current month highlighted in blue Verify all sheets are accessible (Annual Budget, Cash Flow, Bank Records) Check that categories are set up in the LookUps sheet","title":"2. Check System Status"},{"location":"quickstart/#daily-workflow","text":"","title":"Daily Workflow"},{"location":"quickstart/#import-bank-transactions","text":"Download bank statements - Get CSV or spreadsheet format Open Import Tool - Click \ud83c\udfe6 Budget > Import Bank Transactions Choose method: Paste Data: Copy/paste from bank statement Manual Entry: Enter transactions manually Select bank format - Choose your bank type Review column mapping - Verify date, amount, description Process import - Handle duplicates and review results","title":"Import Bank Transactions"},{"location":"quickstart/#reconcile-transactions","text":"Open Dashboard - Click \ud83c\udfe6 Budget > Reconciliation Dashboard Review auto-matches - Green highlighted transactions Handle unmatched - Click \"Add to Cash Flow\" for bank-only transactions Categorize transactions - Assign categories and subcategories Process splits - Handle split transactions with multiple categories Verify completion - Ensure all transactions reconciled","title":"Reconcile Transactions"},{"location":"quickstart/#manage-categories","text":"Access Category Manager - Click \u2699\ufe0f Settings > Sheet Settings > Manage Categories Add categories - Create new income/expense categories Edit categories - Modify names and descriptions Toggle status - Activate/deactivate categories as needed Add subcategories - Create detailed breakdowns","title":"Manage Categories"},{"location":"quickstart/#monthly-tasks","text":"","title":"Monthly Tasks"},{"location":"quickstart/#end-of-month-process","text":"Verify reconciliation - Ensure all transactions reconciled Check balances - Verify account and budget balances Run EOM process - Click \ud83d\udcc5 Period Processing > Run End of Month Process Confirm month - Verify correct month is being processed Review results - Check copied values and formatting","title":"End of Month Process"},{"location":"quickstart/#month-management","text":"Initialize statuses - Click \ud83d\udcc5 Period Processing > End of Year > Initialize Month Statuses Verify highlighting - Check current month is highlighted in blue Note: Month management functions moved to Period Processing > End of Year submenu","title":"Month Management"},{"location":"quickstart/#settings-and-configuration","text":"","title":"Settings and Configuration"},{"location":"quickstart/#import-settings","text":"Manage templates - Click \u2699\ufe0f Settings > Import Settings > Manage Import Templates Configure banks - Set up column mappings for your banks Save mappings - Store configurations for future imports","title":"Import Settings"},{"location":"quickstart/#advanced-settings","text":"Archive master - Click \u2699\ufe0f Settings > Advanced Settings > Archive This Master Sync categories - Click \u2699\ufe0f Settings > Sheet Settings > Sync ACTIVE Flags Validate system - Click \u2699\ufe0f Settings > Sheet Settings > Validate ACTIVE Flags","title":"Advanced Settings"},{"location":"quickstart/#end-of-year-process","text":"Important Annual Process: The End of Year (EOY) process is a critical annual procedure that must be completed in June to transition to the new fiscal year.","title":"End of Year Process"},{"location":"quickstart/#when-you-need-eoy-setup","text":"The EOY process is required when: - It's June (final month of fiscal year) - System only allows access during June - You've completed all reconciliation for the current fiscal year - You're ready to set up the budget for the next financial year (July-June)","title":"When You Need EOY Setup"},{"location":"quickstart/#eoy-process-overview","text":"The modern EOY process is a four-step guided workflow : Initial Setup (in master spreadsheet) - Export settings and create new copy Configuration & Budget Update (in new copy) - Set up new year and update budget amounts Month Processing (in new copy) - Run EOM to transition from June to July Finalization (in new copy) - Complete setup and archive previous master Learn about the End of Year process Step-by-step EOY setup instructions","title":"EOY Process Overview"},{"location":"quickstart/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"quickstart/#common-issues","text":"Problem: Custom menus not appearing Solution: - Refresh the page (Ctrl+F5) - Check script authorization - Verify spreadsheet access Problem: Can't import transactions Solution: - Check bank format selection - Verify column mapping - Review data format - Try manual entry method Problem: Dashboard not working Solution: - Refresh the dashboard - Check transaction data - Verify sheet access - Run performance diagnostics Problem: End of month process fails Solution: - Verify all transactions reconciled - Check current month setting - Review balance issues - Initialize month statuses","title":"Common Issues"},{"location":"quickstart/#best-practices","text":"Import transactions weekly Reconcile before month-end Use consistent category names Keep backup copies Review balances regularly Document any issues","title":"Best Practices"},{"location":"quickstart/#next-steps","text":"Learn about importing and reconciling Understand month-end processing Get help with common issues","title":"Next Steps"},{"location":"quickstart/#getting-help","text":"User Manual: Click \u2139\ufe0f Help > User Manual Online Documentation: Click \u2139\ufe0f Help > Online Documentation Version Info: Click \u2139\ufe0f Help > About (Version Info) Developer Mode: Click \u2139\ufe0f Help > Toggle Developer Mode (for advanced users) For detailed instructions on any process, refer to the specific guides in the documentation.","title":"Getting Help"},{"location":"essentials/code/","text":"Basic Inline Code To denote a word or phrase as code, enclose it in backticks (`). To denote a `word` or `phrase` as code, enclose it in backticks (`). Code Block Use fenced code blocks by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language. ```java HelloWorld.java class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ````md ```java HelloWorld.java class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ````","title":"Code Blocks"},{"location":"essentials/code/#basic","text":"","title":"Basic"},{"location":"essentials/code/#inline-code","text":"To denote a word or phrase as code, enclose it in backticks (`). To denote a `word` or `phrase` as code, enclose it in backticks (`).","title":"Inline Code"},{"location":"essentials/code/#code-block","text":"Use fenced code blocks by enclosing code in three backticks and follow the leading ticks with the programming language of your snippet to get syntax highlighting. Optionally, you can also write the name of your code after the programming language. ```java HelloWorld.java class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ````md ```java HelloWorld.java class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); } } ````","title":"Code Block"},{"location":"essentials/function-documentation-template/","text":"Function Documentation Template This template provides a standardized format for documenting individual Developer menu functions. Basic Function Documentation ### Function Name <Accordion title=\"Function Display Name\" icon=\"icon-name\"> - **Function:** `functionName()` - **Purpose:** Brief description of what the function does - **When to Use:** Specific scenarios when this function should be used - **Output:** What the function returns or displays - **Dependencies:** Required permissions, access, or system components - **Duration:** Expected execution time (if applicable) - **Warning:** Any important warnings or side effects (if applicable) - **Note:** Additional important information (if applicable) </Accordion> Detailed Function Documentation ### Function Name <Accordion title=\"Function Display Name\" icon=\"icon-name\"> - **Function:** `functionName()` - **Purpose:** Detailed description of what the function does - **When to Use:** - Specific scenario 1 - Specific scenario 2 - Specific scenario 3 - **Output:** - What the function returns - Format of the output - Where to find the results - **Dependencies:** - Required permissions - Required system access - Required data availability - **Duration:** Expected execution time and factors that affect it - **Parameters:** Any parameters the function accepts (if applicable) - **Side Effects:** Any changes the function makes to the system - **Error Handling:** How the function handles errors - **Example Usage:** Code example or usage scenario (if applicable) - **Warning:** Important warnings about usage - **Note:** Additional important information </Accordion> Performance Function Documentation ### Performance Function Name <Accordion title=\"Performance Function Display Name\" icon=\"tachometer\"> - **Function:** `performanceFunctionName()` - **Purpose:** Test and measure system performance - **When to Use:** - When investigating performance issues - During system optimization - For performance monitoring - **Output:** - Performance metrics in milliseconds - Breakdown by operation phase - Recommendations for optimization - **Dependencies:** Access to system components being tested - **Duration:** Varies based on system size and complexity - **Example Output:** ``` Phase 1: 50ms Phase 2: 200ms Phase 3: 100ms Total: 350ms ``` - **Performance Thresholds:** - **Good:** < 100ms per phase - **Acceptable:** 100-500ms per phase - **Poor:** > 500ms per phase - **Warning:** May consume significant system resources - **Note:** Results may vary based on system load and data size </Accordion> Debug Function Documentation ### Debug Function Name <Accordion title=\"Debug Function Display Name\" icon=\"bug\"> - **Function:** `debugFunctionName()` - **Purpose:** Debug and diagnose system issues - **When to Use:** - When system behavior is unexpected - When troubleshooting specific issues - During development and testing - **Output:** - Debug information and diagnostics - System state information - Error details and recommendations - **Dependencies:** Access to system components being debugged - **Duration:** Usually quick (under 30 seconds) - **Debug Levels:** - **Basic:** Essential information only - **Detailed:** Comprehensive diagnostic data - **Verbose:** Complete system state dump - **Warning:** May expose sensitive system information - **Note:** Output should be reviewed by experienced developers </Accordion> Testing Function Documentation ### Test Function Name <Accordion title=\"Test Function Display Name\" icon=\"flask\"> - **Function:** `testFunctionName()` - **Purpose:** Test system functionality and validate behavior - **When to Use:** - During development and testing - After system changes - For regression testing - **Output:** - Test results and pass/fail status - Detailed test metrics - Recommendations for fixes (if tests fail) - **Dependencies:** Access to system components being tested - **Duration:** Varies based on test complexity - **Test Coverage:** - **Unit Tests:** Individual component testing - **Integration Tests:** Component interaction testing - **System Tests:** End-to-end functionality testing - **Warning:** Tests may modify test data - **Note:** Run in test environment when possible </Accordion> Legacy Function Documentation ### Legacy Function Name <Accordion title=\"Legacy Function Display Name\" icon=\"archive\"> - **Function:** `legacyFunctionName()` - **Purpose:** Legacy system functionality (may be deprecated) - **When to Use:** - For legacy system compatibility - During system migration - For historical data access - **Output:** Legacy system results - **Dependencies:** Legacy system components - **Duration:** May be slower than modern alternatives - **Status:** - **Active:** Currently maintained - **Deprecated:** Will be removed in future versions - **Legacy:** Replaced by newer functionality - **Warning:** May not work with current system versions - **Note:** Consider migrating to modern alternatives </Accordion> Usage Guidelines Icons Use appropriate icons for different function types: - code - General development functions - info - Information and status functions - wrench - Repair and fix functions - flask - Testing functions - bug - Debug functions - tachometer - Performance functions - archive - Legacy functions - shield-check - Security and integrity functions Warnings and Notes Use Warning for critical safety information Use Note for important but non-critical information Use Dependencies to list required system access Use Duration for functions that may take significant time Output Documentation Describe what the function returns Include example output when helpful Specify where to find results (console, UI, etc.) Mention any side effects or system changes When to Use Guidelines Be specific about use cases Include both positive and negative use cases Mention alternatives when applicable Include timing considerations (when to run, how often)","title":"Function Documentation Template"},{"location":"essentials/function-documentation-template/#function-documentation-template","text":"This template provides a standardized format for documenting individual Developer menu functions.","title":"Function Documentation Template"},{"location":"essentials/function-documentation-template/#basic-function-documentation","text":"### Function Name <Accordion title=\"Function Display Name\" icon=\"icon-name\"> - **Function:** `functionName()` - **Purpose:** Brief description of what the function does - **When to Use:** Specific scenarios when this function should be used - **Output:** What the function returns or displays - **Dependencies:** Required permissions, access, or system components - **Duration:** Expected execution time (if applicable) - **Warning:** Any important warnings or side effects (if applicable) - **Note:** Additional important information (if applicable) </Accordion>","title":"Basic Function Documentation"},{"location":"essentials/function-documentation-template/#detailed-function-documentation","text":"### Function Name <Accordion title=\"Function Display Name\" icon=\"icon-name\"> - **Function:** `functionName()` - **Purpose:** Detailed description of what the function does - **When to Use:** - Specific scenario 1 - Specific scenario 2 - Specific scenario 3 - **Output:** - What the function returns - Format of the output - Where to find the results - **Dependencies:** - Required permissions - Required system access - Required data availability - **Duration:** Expected execution time and factors that affect it - **Parameters:** Any parameters the function accepts (if applicable) - **Side Effects:** Any changes the function makes to the system - **Error Handling:** How the function handles errors - **Example Usage:** Code example or usage scenario (if applicable) - **Warning:** Important warnings about usage - **Note:** Additional important information </Accordion>","title":"Detailed Function Documentation"},{"location":"essentials/function-documentation-template/#performance-function-documentation","text":"### Performance Function Name <Accordion title=\"Performance Function Display Name\" icon=\"tachometer\"> - **Function:** `performanceFunctionName()` - **Purpose:** Test and measure system performance - **When to Use:** - When investigating performance issues - During system optimization - For performance monitoring - **Output:** - Performance metrics in milliseconds - Breakdown by operation phase - Recommendations for optimization - **Dependencies:** Access to system components being tested - **Duration:** Varies based on system size and complexity - **Example Output:** ``` Phase 1: 50ms Phase 2: 200ms Phase 3: 100ms Total: 350ms ``` - **Performance Thresholds:** - **Good:** < 100ms per phase - **Acceptable:** 100-500ms per phase - **Poor:** > 500ms per phase - **Warning:** May consume significant system resources - **Note:** Results may vary based on system load and data size </Accordion>","title":"Performance Function Documentation"},{"location":"essentials/function-documentation-template/#debug-function-documentation","text":"### Debug Function Name <Accordion title=\"Debug Function Display Name\" icon=\"bug\"> - **Function:** `debugFunctionName()` - **Purpose:** Debug and diagnose system issues - **When to Use:** - When system behavior is unexpected - When troubleshooting specific issues - During development and testing - **Output:** - Debug information and diagnostics - System state information - Error details and recommendations - **Dependencies:** Access to system components being debugged - **Duration:** Usually quick (under 30 seconds) - **Debug Levels:** - **Basic:** Essential information only - **Detailed:** Comprehensive diagnostic data - **Verbose:** Complete system state dump - **Warning:** May expose sensitive system information - **Note:** Output should be reviewed by experienced developers </Accordion>","title":"Debug Function Documentation"},{"location":"essentials/function-documentation-template/#testing-function-documentation","text":"### Test Function Name <Accordion title=\"Test Function Display Name\" icon=\"flask\"> - **Function:** `testFunctionName()` - **Purpose:** Test system functionality and validate behavior - **When to Use:** - During development and testing - After system changes - For regression testing - **Output:** - Test results and pass/fail status - Detailed test metrics - Recommendations for fixes (if tests fail) - **Dependencies:** Access to system components being tested - **Duration:** Varies based on test complexity - **Test Coverage:** - **Unit Tests:** Individual component testing - **Integration Tests:** Component interaction testing - **System Tests:** End-to-end functionality testing - **Warning:** Tests may modify test data - **Note:** Run in test environment when possible </Accordion>","title":"Testing Function Documentation"},{"location":"essentials/function-documentation-template/#legacy-function-documentation","text":"### Legacy Function Name <Accordion title=\"Legacy Function Display Name\" icon=\"archive\"> - **Function:** `legacyFunctionName()` - **Purpose:** Legacy system functionality (may be deprecated) - **When to Use:** - For legacy system compatibility - During system migration - For historical data access - **Output:** Legacy system results - **Dependencies:** Legacy system components - **Duration:** May be slower than modern alternatives - **Status:** - **Active:** Currently maintained - **Deprecated:** Will be removed in future versions - **Legacy:** Replaced by newer functionality - **Warning:** May not work with current system versions - **Note:** Consider migrating to modern alternatives </Accordion>","title":"Legacy Function Documentation"},{"location":"essentials/function-documentation-template/#usage-guidelines","text":"","title":"Usage Guidelines"},{"location":"essentials/function-documentation-template/#icons","text":"Use appropriate icons for different function types: - code - General development functions - info - Information and status functions - wrench - Repair and fix functions - flask - Testing functions - bug - Debug functions - tachometer - Performance functions - archive - Legacy functions - shield-check - Security and integrity functions","title":"Icons"},{"location":"essentials/function-documentation-template/#warnings-and-notes","text":"Use Warning for critical safety information Use Note for important but non-critical information Use Dependencies to list required system access Use Duration for functions that may take significant time","title":"Warnings and Notes"},{"location":"essentials/function-documentation-template/#output-documentation","text":"Describe what the function returns Include example output when helpful Specify where to find results (console, UI, etc.) Mention any side effects or system changes","title":"Output Documentation"},{"location":"essentials/function-documentation-template/#when-to-use-guidelines","text":"Be specific about use cases Include both positive and negative use cases Mention alternatives when applicable Include timing considerations (when to run, how often)","title":"When to Use Guidelines"},{"location":"essentials/images/","text":"Image Using Markdown The markdown syntax lets you add images using the following code ![title](/path/image.jpg) Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like Cloudinary or S3 . You can then use that URL and embed. Using Embeds To get more customizability with images, you can also use to add images <img height=\"200\" src=\"/path/image.jpg\" /> Embeds and HTML elements Mintlify supports HTML tags in Markdown . This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility. iFrames Loads another HTML page within the document. Most commonly used for embedding videos. <iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>","title":"Images and Embeds"},{"location":"essentials/images/#image","text":"","title":"Image"},{"location":"essentials/images/#using-markdown","text":"The markdown syntax lets you add images using the following code ![title](/path/image.jpg) Note that the image file size must be less than 5MB. Otherwise, we recommend hosting on a service like Cloudinary or S3 . You can then use that URL and embed.","title":"Using Markdown"},{"location":"essentials/images/#using-embeds","text":"To get more customizability with images, you can also use to add images <img height=\"200\" src=\"/path/image.jpg\" />","title":"Using Embeds"},{"location":"essentials/images/#embeds-and-html-elements","text":"Mintlify supports HTML tags in Markdown . This is helpful if you prefer HTML tags to Markdown syntax, and lets you create documentation with infinite flexibility.","title":"Embeds and HTML elements"},{"location":"essentials/images/#iframes","text":"Loads another HTML page within the document. Most commonly used for embedding videos. <iframe src=\"https://www.youtube.com/embed/4KzFe50RQkQ\"> </iframe>","title":"iFrames"},{"location":"essentials/markdown/","text":"Titles Best used for section headers. ## Titles Subtitles Best use to subsection headers. ### Subtitles Each title and subtitle creates an anchor and also shows up on the table of contents on the right. Text Formatting We support most markdown formatting. Simply add ** , _ , or ~ around text to format it. Style How to write it Result Bold **bold** bold Italic _italic_ italic Strikethrough ~strikethrough~ ~strikethrough~ You can combine these. For example, write **_bold and italic_** to get bold and italic text. You need to use HTML to write superscript and subscript text. That is, add <sup> or <sub> around your text. Text Size How to write it Result Superscript <sup>superscript</sup> superscript Subscript <sub>subscript</sub> subscript Linking to Pages You can add a link by wrapping text in []() . You would write [link to google](https://google.com) to link to google . Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, [link to text](/writing-content/text) links to the page \"Text\" in our components section. Relative links like [link to text](../text) will open slower because we cannot optimize them as easily. Blockquotes Singleline To create a blockquote, add a > in front of a paragraph. Dorothy followed her through many of the beautiful rooms in her castle. > Dorothy followed her through many of the beautiful rooms in her castle. Multiline Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. > Dorothy followed her through many of the beautiful rooms in her castle. > > The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. LaTeX Mintlify supports LaTeX through the Latex component. 8 x (vk x H1 - H2) = (0,1) <Latex>8 x (vk x H1 - H2) = (0,1)</Latex>","title":"Markdown Syntax"},{"location":"essentials/markdown/#titles","text":"Best used for section headers. ## Titles","title":"Titles"},{"location":"essentials/markdown/#subtitles","text":"Best use to subsection headers. ### Subtitles Each title and subtitle creates an anchor and also shows up on the table of contents on the right.","title":"Subtitles"},{"location":"essentials/markdown/#text-formatting","text":"We support most markdown formatting. Simply add ** , _ , or ~ around text to format it. Style How to write it Result Bold **bold** bold Italic _italic_ italic Strikethrough ~strikethrough~ ~strikethrough~ You can combine these. For example, write **_bold and italic_** to get bold and italic text. You need to use HTML to write superscript and subscript text. That is, add <sup> or <sub> around your text. Text Size How to write it Result Superscript <sup>superscript</sup> superscript Subscript <sub>subscript</sub> subscript","title":"Text Formatting"},{"location":"essentials/markdown/#linking-to-pages","text":"You can add a link by wrapping text in []() . You would write [link to google](https://google.com) to link to google . Links to pages in your docs need to be root-relative. Basically, you should include the entire folder path. For example, [link to text](/writing-content/text) links to the page \"Text\" in our components section. Relative links like [link to text](../text) will open slower because we cannot optimize them as easily.","title":"Linking to Pages"},{"location":"essentials/markdown/#blockquotes","text":"","title":"Blockquotes"},{"location":"essentials/markdown/#singleline","text":"To create a blockquote, add a > in front of a paragraph. Dorothy followed her through many of the beautiful rooms in her castle. > Dorothy followed her through many of the beautiful rooms in her castle.","title":"Singleline"},{"location":"essentials/markdown/#multiline","text":"Dorothy followed her through many of the beautiful rooms in her castle. The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood. > Dorothy followed her through many of the beautiful rooms in her castle. > > The Witch bade her clean the pots and kettles and sweep the floor and keep the fire fed with wood.","title":"Multiline"},{"location":"essentials/markdown/#latex","text":"Mintlify supports LaTeX through the Latex component. 8 x (vk x H1 - H2) = (0,1) <Latex>8 x (vk x H1 - H2) = (0,1)</Latex>","title":"LaTeX"},{"location":"essentials/navigation/","text":"The navigation menu is the list of links on every website. You will likely update mint.json every time you add a new page. Pages do not show up automatically. Navigation syntax Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include .mdx in page names. ```json Regular Navigation \"navigation\": [ { \"group\": \"Getting Started\", \"pages\": [\"quickstart\"] } ] ```json Nested Navigation \"navigation\": [ { \"group\": \"Getting Started\", \"pages\": [ \"quickstart\", { \"group\": \"Nested Reference Pages\", \"pages\": [\"nested-reference-page\"] } ] } ] Folders Simply put your MDX files in folders and update the paths in mint.json . For example, to have a page at https://yoursite.com/your-folder/your-page you would make a folder called your-folder containing an MDX file called your-page.mdx . You cannot use api for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level api folder for internal server calls. A folder name such as api-reference would be accepted. json Navigation With Folder \"navigation\": [ { \"group\": \"Group Name\", \"pages\": [\"your-folder/your-page\"] } ] Hidden Pages MDX files not included in mint.json will not show up in the sidebar but are accessible through the search bar and by linking directly to them.","title":"Navigation"},{"location":"essentials/navigation/#navigation-syntax","text":"Our navigation syntax is recursive which means you can make nested navigation groups. You don't need to include .mdx in page names. ```json Regular Navigation \"navigation\": [ { \"group\": \"Getting Started\", \"pages\": [\"quickstart\"] } ] ```json Nested Navigation \"navigation\": [ { \"group\": \"Getting Started\", \"pages\": [ \"quickstart\", { \"group\": \"Nested Reference Pages\", \"pages\": [\"nested-reference-page\"] } ] } ]","title":"Navigation syntax"},{"location":"essentials/navigation/#folders","text":"Simply put your MDX files in folders and update the paths in mint.json . For example, to have a page at https://yoursite.com/your-folder/your-page you would make a folder called your-folder containing an MDX file called your-page.mdx . You cannot use api for the name of a folder unless you nest it inside another folder. Mintlify uses Next.js which reserves the top-level api folder for internal server calls. A folder name such as api-reference would be accepted. json Navigation With Folder \"navigation\": [ { \"group\": \"Group Name\", \"pages\": [\"your-folder/your-page\"] } ]","title":"Folders"},{"location":"essentials/navigation/#hidden-pages","text":"MDX files not included in mint.json will not show up in the sidebar but are accessible through the search bar and by linking directly to them.","title":"Hidden Pages"},{"location":"essentials/reusable-snippets/","text":"Creating a custom snippet Pre-condition : You must create your snippet file in the snippets directory. Any page in the snippets directory will be treated as a snippet and will not be rendered into a standalone page. If you want to create a standalone page from the snippet, import the snippet into another file and call it as a component. Default export Add content to your snippet file that you want to re-use across multiple locations. Optionally, you can add variables that can be filled in via props when you import the snippet. ```mdx snippets/my-snippet.mdx Hello world! This is my content I want to reuse across pages. My keyword of the day is {word}. <Warning> The content that you want to reuse must be inside the `snippets` directory in order for the import to work. </Warning> 2. Import the snippet into your destination file. ```mdx destination-file.mdx --- title: My title description: My Description --- ## Header Lorem impsum dolor sit amet. <MySnippet word=\"bananas\" /> Reusable variables Export a variable from your snippet file: ```mdx snippets/path/to/custom-variables.mdx export const myName = 'my name'; export const myObject = { fruit: 'strawberries' }; 2. Import the snippet from your destination file and use the variable: ```mdx destination-file.mdx --- title: My title description: My Description --- Hello, my name is {myName} and I like {myObject.fruit}. Reusable components Inside your snippet file, create a component that takes in props by exporting your component in the form of an arrow function. ```mdx snippets/custom-component.mdx export const MyComponent = ({ title }) => ( {title} ... snippet content ... ); <Warning> MDX does not compile inside the body of an arrow function. Stick to HTML syntax when you can or use a default export if you need to use MDX. </Warning> 2. Import the snippet into your destination file and pass in the props ```mdx destination-file.mdx --- title: My title description: My Description --- Lorem ipsum dolor sit amet. <MyComponent title={'Custom title'} />","title":"Reusable Snippets"},{"location":"essentials/reusable-snippets/#creating-a-custom-snippet","text":"Pre-condition : You must create your snippet file in the snippets directory. Any page in the snippets directory will be treated as a snippet and will not be rendered into a standalone page. If you want to create a standalone page from the snippet, import the snippet into another file and call it as a component.","title":"Creating a custom snippet"},{"location":"essentials/reusable-snippets/#default-export","text":"Add content to your snippet file that you want to re-use across multiple locations. Optionally, you can add variables that can be filled in via props when you import the snippet. ```mdx snippets/my-snippet.mdx Hello world! This is my content I want to reuse across pages. My keyword of the day is {word}. <Warning> The content that you want to reuse must be inside the `snippets` directory in order for the import to work. </Warning> 2. Import the snippet into your destination file. ```mdx destination-file.mdx --- title: My title description: My Description --- ## Header Lorem impsum dolor sit amet. <MySnippet word=\"bananas\" />","title":"Default export"},{"location":"essentials/reusable-snippets/#reusable-variables","text":"Export a variable from your snippet file: ```mdx snippets/path/to/custom-variables.mdx export const myName = 'my name'; export const myObject = { fruit: 'strawberries' }; 2. Import the snippet from your destination file and use the variable: ```mdx destination-file.mdx --- title: My title description: My Description --- Hello, my name is {myName} and I like {myObject.fruit}.","title":"Reusable variables"},{"location":"essentials/reusable-snippets/#reusable-components","text":"Inside your snippet file, create a component that takes in props by exporting your component in the form of an arrow function. ```mdx snippets/custom-component.mdx export const MyComponent = ({ title }) => (","title":"Reusable components"},{"location":"essentials/settings/","text":"Every Mintlify site needs a mint.json file with the core configuration settings. Learn more about the properties below. Properties Name of your project. Used for the global title. An array of groups with all the pages within that group The name of the group. Example: `Settings` </ResponseField> <ResponseField name=\"pages\" type=\"string[]\"> The relative paths to the markdown files that will serve as pages. Example: `[\"customization\", \"page\"]` </ResponseField> Path to logo image or object with path to \"light\" and \"dark\" mode logo images Path to the logo in light mode Path to the logo in dark mode Where clicking on the logo links you to Path to the favicon image Hex color codes for your global theme The primary color. Used for most often for highlighted content, section headers, accents, in light mode The primary color for dark mode. Used for most often for highlighted content, section headers, accents, in dark mode The primary color for important buttons The color of the background in both light and dark mode The hex color code of the background in light mode The hex color code of the background in dark mode Array of name s and url s of links you want to include in the topbar The name of the button. Example: `Contact us` </ResponseField> <ResponseField name=\"url\" type=\"string\"> </ResponseField> Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars. If link : What the button links to. If `github`: Link to the repository to load GitHub information from. </ResponseField> <ResponseField name=\"name\" type=\"string\"> Text inside the button. Only required if `type` is a `link`. </ResponseField> Array of version names. Only use this if you want to show different versions of docs with a dropdown in the navigation bar. An array of the anchors, includes the icon , color , and url . The Font Awesome icon used to feature the anchor. Example: `comments` </ResponseField> <ResponseField name=\"name\" type=\"string\"> The name of the anchor label. Example: `Community` </ResponseField> <ResponseField name=\"url\" type=\"string\"> The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in. </ResponseField> <ResponseField name=\"color\" type=\"string\"> The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color. </ResponseField> <ResponseField name=\"version\" type=\"string\"> Used if you want to hide an anchor until the correct docs version is selected. </ResponseField> <ResponseField name=\"isDefaultHidden\" type=\"boolean\" default=\"false\"> Pass `true` if you want to hide the anchor until you directly link someone to docs inside it. </ResponseField> <ResponseField name=\"iconType\" default=\"duotone\" type=\"string\"> One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\" </ResponseField> Override the default configurations for the top-most anchor. The name of the top-most anchor Font Awesome icon. One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\" An array of navigational tabs. The name of the tab label. The start of the URL that marks what pages go in the tab. Generally, this is the name of the folder you put your pages in. Configuration for API settings. Learn more about API pages at . The base url for all API endpoints. If baseUrl is an array, it will enable for multiple base url options that the user can toggle. <ResponseField name=\"auth\" type=\"Auth\"> <Expandable title=\"Auth\"> <ResponseField name=\"method\" type='\"bearer\" | \"basic\" | \"key\"'> The authentication strategy used for all API endpoints. </ResponseField> <ResponseField name=\"name\" type=\"string\"> The name of the authentication parameter used in the API playground. If method is `basic`, the format should be `[usernameName]:[passwordName]` </ResponseField> <ResponseField name=\"inputPrefix\" type=\"string\"> The default value that's designed to be a prefix for the authentication input field. E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`. </ResponseField> </Expandable> </ResponseField> <ResponseField name=\"playground\" type=\"Playground\"> Configurations for the API playground <Expandable title=\"Playground\"> <ResponseField name=\"mode\" default=\"show\" type='\"show\" | \"simple\" | \"hide\"'> Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple` Learn more at the </ResponseField> </Expandable> </ResponseField> <ResponseField name=\"maintainOrder\" type=\"boolean\"> Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file. <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning> </ResponseField> A string or an array of strings of URL(s) or relative path(s) pointing to your OpenAPI file. Examples: json Absolute \"openapi\": \"https://example.com/openapi.json\" json Relative \"openapi\": \"/openapi.json\" json Multiple \"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"] An object of social media accounts where the key:property pair represents the social media platform and the account url. Example: json { } One of the following values website , facebook , x , discord , slack , github , linkedin , instagram , hacker-news Example: `x` </ResponseField> <ResponseField name=\"property\" type=\"string\"> The URL to the social platform. </ResponseField> Configurations to enable feedback buttons Enables a button to allow users to suggest edits via pull requests Enables a button to allow users to raise an issue about the documentation Customize the dark mode toggle. Set if you always want to show light or dark mode for new users. When not set, we default to the same mode as the user's operating system. Set to true to hide the dark/light mode toggle. You can combine isHidden with default to force your docs to only use light or dark mode. For example: <CodeGroup> ```json Only Dark Mode \"modeToggle\": { \"default\": \"dark\", \"isHidden\": true } ``` ```json Only Light Mode \"modeToggle\": { \"default\": \"light\", \"isHidden\": true } ``` </CodeGroup> </ResponseField> A background image to be displayed behind every page. See example with Infisical and FRPC .","title":"Global Settings"},{"location":"essentials/settings/#properties","text":"Name of your project. Used for the global title. An array of groups with all the pages within that group The name of the group. Example: `Settings` </ResponseField> <ResponseField name=\"pages\" type=\"string[]\"> The relative paths to the markdown files that will serve as pages. Example: `[\"customization\", \"page\"]` </ResponseField> Path to logo image or object with path to \"light\" and \"dark\" mode logo images Path to the logo in light mode Path to the logo in dark mode Where clicking on the logo links you to Path to the favicon image Hex color codes for your global theme The primary color. Used for most often for highlighted content, section headers, accents, in light mode The primary color for dark mode. Used for most often for highlighted content, section headers, accents, in dark mode The primary color for important buttons The color of the background in both light and dark mode The hex color code of the background in light mode The hex color code of the background in dark mode Array of name s and url s of links you want to include in the topbar The name of the button. Example: `Contact us` </ResponseField> <ResponseField name=\"url\" type=\"string\"> </ResponseField> Link shows a button. GitHub shows the repo information at the url provided including the number of GitHub stars. If link : What the button links to. If `github`: Link to the repository to load GitHub information from. </ResponseField> <ResponseField name=\"name\" type=\"string\"> Text inside the button. Only required if `type` is a `link`. </ResponseField> Array of version names. Only use this if you want to show different versions of docs with a dropdown in the navigation bar. An array of the anchors, includes the icon , color , and url . The Font Awesome icon used to feature the anchor. Example: `comments` </ResponseField> <ResponseField name=\"name\" type=\"string\"> The name of the anchor label. Example: `Community` </ResponseField> <ResponseField name=\"url\" type=\"string\"> The start of the URL that marks what pages go in the anchor. Generally, this is the name of the folder you put your pages in. </ResponseField> <ResponseField name=\"color\" type=\"string\"> The hex color of the anchor icon background. Can also be a gradient if you pass an object with the properties `from` and `to` that are each a hex color. </ResponseField> <ResponseField name=\"version\" type=\"string\"> Used if you want to hide an anchor until the correct docs version is selected. </ResponseField> <ResponseField name=\"isDefaultHidden\" type=\"boolean\" default=\"false\"> Pass `true` if you want to hide the anchor until you directly link someone to docs inside it. </ResponseField> <ResponseField name=\"iconType\" default=\"duotone\" type=\"string\"> One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\" </ResponseField> Override the default configurations for the top-most anchor. The name of the top-most anchor Font Awesome icon. One of: \"brands\", \"duotone\", \"light\", \"sharp-solid\", \"solid\", or \"thin\" An array of navigational tabs. The name of the tab label. The start of the URL that marks what pages go in the tab. Generally, this is the name of the folder you put your pages in. Configuration for API settings. Learn more about API pages at . The base url for all API endpoints. If baseUrl is an array, it will enable for multiple base url options that the user can toggle. <ResponseField name=\"auth\" type=\"Auth\"> <Expandable title=\"Auth\"> <ResponseField name=\"method\" type='\"bearer\" | \"basic\" | \"key\"'> The authentication strategy used for all API endpoints. </ResponseField> <ResponseField name=\"name\" type=\"string\"> The name of the authentication parameter used in the API playground. If method is `basic`, the format should be `[usernameName]:[passwordName]` </ResponseField> <ResponseField name=\"inputPrefix\" type=\"string\"> The default value that's designed to be a prefix for the authentication input field. E.g. If an `inputPrefix` of `AuthKey` would inherit the default input result of the authentication field as `AuthKey`. </ResponseField> </Expandable> </ResponseField> <ResponseField name=\"playground\" type=\"Playground\"> Configurations for the API playground <Expandable title=\"Playground\"> <ResponseField name=\"mode\" default=\"show\" type='\"show\" | \"simple\" | \"hide\"'> Whether the playground is showing, hidden, or only displaying the endpoint with no added user interactivity `simple` Learn more at the </ResponseField> </Expandable> </ResponseField> <ResponseField name=\"maintainOrder\" type=\"boolean\"> Enabling this flag ensures that key ordering in OpenAPI pages matches the key ordering defined in the OpenAPI file. <Warning>This behavior will soon be enabled by default, at which point this field will be deprecated.</Warning> </ResponseField> A string or an array of strings of URL(s) or relative path(s) pointing to your OpenAPI file. Examples: json Absolute \"openapi\": \"https://example.com/openapi.json\" json Relative \"openapi\": \"/openapi.json\" json Multiple \"openapi\": [\"https://example.com/openapi1.json\", \"/openapi2.json\", \"/openapi3.json\"] An object of social media accounts where the key:property pair represents the social media platform and the account url. Example: json { } One of the following values website , facebook , x , discord , slack , github , linkedin , instagram , hacker-news Example: `x` </ResponseField> <ResponseField name=\"property\" type=\"string\"> The URL to the social platform. </ResponseField> Configurations to enable feedback buttons Enables a button to allow users to suggest edits via pull requests Enables a button to allow users to raise an issue about the documentation Customize the dark mode toggle. Set if you always want to show light or dark mode for new users. When not set, we default to the same mode as the user's operating system. Set to true to hide the dark/light mode toggle. You can combine isHidden with default to force your docs to only use light or dark mode. For example: <CodeGroup> ```json Only Dark Mode \"modeToggle\": { \"default\": \"dark\", \"isHidden\": true } ``` ```json Only Light Mode \"modeToggle\": { \"default\": \"light\", \"isHidden\": true } ``` </CodeGroup> </ResponseField> A background image to be displayed behind every page. See example with Infisical and FRPC .","title":"Properties"},{"location":"guides/daily-tasks/categorizing/","text":"Categorizing Transactions This guide covers how to categorize transactions and manage the category system in your budget. Overview Categorization is the process of assigning transactions to specific income or expense categories. This helps you track spending patterns, analyze budget performance, and generate meaningful reports. Category System Structure The category system uses a two-level hierarchy: - High-level classifications - Income vs Expense types - Examples: Food, Transport, Salary - Detailed breakdowns - More specific classifications - Examples: Groceries, Fuel, Wages Category Types - INC prefix - Income categories - Green color coding - Visual identification - Examples: Salary, Gifts, Investment Income - EXP prefix - Expense categories - Red color coding - Visual identification - Examples: Food, Transport, Utilities Managing Categories Access Category Manager Open your budget spreadsheet Click \u2699\ufe0f Settings > Sheet Settings > Manage Categories The Category Manager will open in a new window Adding New Categories 1. Click \"Add Category\" - In the Category Manager 2. Enter category name - Use clear, descriptive names 3. Select category type - Income or Expense 4. Click \"Save\" - Category is added to the system Editing Categories Select category - Click on the category in the list Click \"Edit\" - Opens edit dialog Modify name - Update category name as needed Save changes - Click \"Save\" to update Activating/Deactivating Categories Select category - Click on the category in the list Toggle status - Click \"Activate\" or \"Deactivate\" Confirm change - Status updates immediately Adding Subcategories Select main category - Click on the parent category Click \"Add Sub-category\" - In the subcategory panel Enter subcategory name - Use specific, descriptive names Save subcategory - Click \"Save\" to add Categorizing Transactions During Reconciliation Open Reconciliation Dashboard - \ud83c\udfe6 Budget > Reconciliation Dashboard Select transaction - Click on unmatched transaction Click \"Add to Cash Flow\" - Opens categorization dialog Choose category - Select from dropdown menu Select subcategory - Choose specific subcategory Add description - Modify transaction description Save transaction - Click \"Add Transaction\" Manual Entry Open Import Tool - \ud83c\udfe6 Budget > Import Bank Transactions Switch to Manual tab - Click \"Manual Entry\" Fill transaction details - Date, amount, description Select category - Choose from dropdown Add to pending list - Click \"Add Transaction\" Process all - Click \"Process All\" when done Split Transactions Identify split - Look for blue highlighted groups Click \"Find Match\" - Locate bank transaction Add splits - Click \"Add Split\" for each part Assign categories - Different category for each split Verify total - Ensure splits equal bank amount Save splits - Click \"Save Split Transactions\" Category Best Practices Naming Conventions Use clear names - Avoid abbreviations Be consistent - Use same names throughout Be specific - \"Groceries\" not just \"Food\" Use hierarchy - Main category + subcategory Organization Tips Group related items - Keep similar categories together Use subcategories - Break down main categories Regular cleanup - Remove unused categories Standardize names - Use consistent terminology Common Categories - Salary/Wages - Regular employment income - Investment Income - Dividends, interest - Gifts - Cash gifts, presents - Other Income - Miscellaneous income - Food & Dining - Groceries, restaurants - Transport - Fuel, public transport - Utilities - Electricity, water, gas - Entertainment - Movies, hobbies - Shopping - Clothing, household items - Healthcare - Medical expenses Category Management Active vs Inactive Active categories - Available for selection Inactive categories - Hidden from dropdowns Toggle status - Activate/deactivate as needed Historical data - Inactive categories preserve history Category Hierarchy Main categories - High-level classifications Subcategories - Detailed breakdowns Consistent structure - Maintain hierarchy Easy navigation - Clear organization Bulk Operations Sync ACTIVE flags - Synchronize category status Validate ACTIVE flags - Check for inconsistencies Bulk distribute - Distribute budget values Troubleshooting Common Issues Problem: Category not in dropdown Solution: - Check if category is active - Verify category type (Income/Expense) - Refresh the dropdown Problem: Income category for expense transaction Solution: - Select correct category type - Check transaction type setting - Verify category assignment Problem: No subcategories available Solution: - Add subcategories to main category - Check if main category is active - Verify subcategory status Problem: Can't access category manager Solution: - Check menu permissions - Verify spreadsheet access - Try refreshing the page Advanced Features Category Statistics Usage tracking - Monitor category usage Budget analysis - Compare actual vs budget Trend analysis - Track spending patterns Report generation - Category-based reports Import Templates Save mappings - Store category assignments Auto-categorization - Based on transaction descriptions Template management - Edit and update templates Bulk Operations Category updates - Modify multiple categories Status changes - Activate/deactivate in bulk Data migration - Move categories between systems Best Practices Use consistent category names Create meaningful subcategories Regularly review and clean up categories Use active categories only Maintain category hierarchy Document category purposes Next Steps After categorizing: 1. Review categorization - Check for consistency 2. Update categories - Add new categories as needed 3. Generate reports - Analyze spending patterns 4. Adjust budget - Update budget based on categories For detailed budget management, see the Budget Management Guide .","title":"Categorizing"},{"location":"guides/daily-tasks/categorizing/#categorizing-transactions","text":"This guide covers how to categorize transactions and manage the category system in your budget.","title":"Categorizing Transactions"},{"location":"guides/daily-tasks/categorizing/#overview","text":"Categorization is the process of assigning transactions to specific income or expense categories. This helps you track spending patterns, analyze budget performance, and generate meaningful reports.","title":"Overview"},{"location":"guides/daily-tasks/categorizing/#category-system","text":"","title":"Category System"},{"location":"guides/daily-tasks/categorizing/#structure","text":"The category system uses a two-level hierarchy: - High-level classifications - Income vs Expense types - Examples: Food, Transport, Salary - Detailed breakdowns - More specific classifications - Examples: Groceries, Fuel, Wages","title":"Structure"},{"location":"guides/daily-tasks/categorizing/#category-types","text":"- INC prefix - Income categories - Green color coding - Visual identification - Examples: Salary, Gifts, Investment Income - EXP prefix - Expense categories - Red color coding - Visual identification - Examples: Food, Transport, Utilities","title":"Category Types"},{"location":"guides/daily-tasks/categorizing/#managing-categories","text":"","title":"Managing Categories"},{"location":"guides/daily-tasks/categorizing/#access-category-manager","text":"Open your budget spreadsheet Click \u2699\ufe0f Settings > Sheet Settings > Manage Categories The Category Manager will open in a new window","title":"Access Category Manager"},{"location":"guides/daily-tasks/categorizing/#adding-new-categories","text":"1. Click \"Add Category\" - In the Category Manager 2. Enter category name - Use clear, descriptive names 3. Select category type - Income or Expense 4. Click \"Save\" - Category is added to the system","title":"Adding New Categories"},{"location":"guides/daily-tasks/categorizing/#editing-categories","text":"Select category - Click on the category in the list Click \"Edit\" - Opens edit dialog Modify name - Update category name as needed Save changes - Click \"Save\" to update","title":"Editing Categories"},{"location":"guides/daily-tasks/categorizing/#activatingdeactivating-categories","text":"Select category - Click on the category in the list Toggle status - Click \"Activate\" or \"Deactivate\" Confirm change - Status updates immediately","title":"Activating/Deactivating Categories"},{"location":"guides/daily-tasks/categorizing/#adding-subcategories","text":"Select main category - Click on the parent category Click \"Add Sub-category\" - In the subcategory panel Enter subcategory name - Use specific, descriptive names Save subcategory - Click \"Save\" to add","title":"Adding Subcategories"},{"location":"guides/daily-tasks/categorizing/#categorizing-transactions_1","text":"","title":"Categorizing Transactions"},{"location":"guides/daily-tasks/categorizing/#during-reconciliation","text":"Open Reconciliation Dashboard - \ud83c\udfe6 Budget > Reconciliation Dashboard Select transaction - Click on unmatched transaction Click \"Add to Cash Flow\" - Opens categorization dialog Choose category - Select from dropdown menu Select subcategory - Choose specific subcategory Add description - Modify transaction description Save transaction - Click \"Add Transaction\"","title":"During Reconciliation"},{"location":"guides/daily-tasks/categorizing/#manual-entry","text":"Open Import Tool - \ud83c\udfe6 Budget > Import Bank Transactions Switch to Manual tab - Click \"Manual Entry\" Fill transaction details - Date, amount, description Select category - Choose from dropdown Add to pending list - Click \"Add Transaction\" Process all - Click \"Process All\" when done","title":"Manual Entry"},{"location":"guides/daily-tasks/categorizing/#split-transactions","text":"Identify split - Look for blue highlighted groups Click \"Find Match\" - Locate bank transaction Add splits - Click \"Add Split\" for each part Assign categories - Different category for each split Verify total - Ensure splits equal bank amount Save splits - Click \"Save Split Transactions\"","title":"Split Transactions"},{"location":"guides/daily-tasks/categorizing/#category-best-practices","text":"","title":"Category Best Practices"},{"location":"guides/daily-tasks/categorizing/#naming-conventions","text":"Use clear names - Avoid abbreviations Be consistent - Use same names throughout Be specific - \"Groceries\" not just \"Food\" Use hierarchy - Main category + subcategory","title":"Naming Conventions"},{"location":"guides/daily-tasks/categorizing/#organization-tips","text":"Group related items - Keep similar categories together Use subcategories - Break down main categories Regular cleanup - Remove unused categories Standardize names - Use consistent terminology","title":"Organization Tips"},{"location":"guides/daily-tasks/categorizing/#common-categories","text":"- Salary/Wages - Regular employment income - Investment Income - Dividends, interest - Gifts - Cash gifts, presents - Other Income - Miscellaneous income - Food & Dining - Groceries, restaurants - Transport - Fuel, public transport - Utilities - Electricity, water, gas - Entertainment - Movies, hobbies - Shopping - Clothing, household items - Healthcare - Medical expenses","title":"Common Categories"},{"location":"guides/daily-tasks/categorizing/#category-management","text":"","title":"Category Management"},{"location":"guides/daily-tasks/categorizing/#active-vs-inactive","text":"Active categories - Available for selection Inactive categories - Hidden from dropdowns Toggle status - Activate/deactivate as needed Historical data - Inactive categories preserve history","title":"Active vs Inactive"},{"location":"guides/daily-tasks/categorizing/#category-hierarchy","text":"Main categories - High-level classifications Subcategories - Detailed breakdowns Consistent structure - Maintain hierarchy Easy navigation - Clear organization","title":"Category Hierarchy"},{"location":"guides/daily-tasks/categorizing/#bulk-operations","text":"Sync ACTIVE flags - Synchronize category status Validate ACTIVE flags - Check for inconsistencies Bulk distribute - Distribute budget values","title":"Bulk Operations"},{"location":"guides/daily-tasks/categorizing/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"guides/daily-tasks/categorizing/#common-issues","text":"Problem: Category not in dropdown Solution: - Check if category is active - Verify category type (Income/Expense) - Refresh the dropdown Problem: Income category for expense transaction Solution: - Select correct category type - Check transaction type setting - Verify category assignment Problem: No subcategories available Solution: - Add subcategories to main category - Check if main category is active - Verify subcategory status Problem: Can't access category manager Solution: - Check menu permissions - Verify spreadsheet access - Try refreshing the page","title":"Common Issues"},{"location":"guides/daily-tasks/categorizing/#advanced-features","text":"","title":"Advanced Features"},{"location":"guides/daily-tasks/categorizing/#category-statistics","text":"Usage tracking - Monitor category usage Budget analysis - Compare actual vs budget Trend analysis - Track spending patterns Report generation - Category-based reports","title":"Category Statistics"},{"location":"guides/daily-tasks/categorizing/#import-templates","text":"Save mappings - Store category assignments Auto-categorization - Based on transaction descriptions Template management - Edit and update templates","title":"Import Templates"},{"location":"guides/daily-tasks/categorizing/#bulk-operations_1","text":"Category updates - Modify multiple categories Status changes - Activate/deactivate in bulk Data migration - Move categories between systems","title":"Bulk Operations"},{"location":"guides/daily-tasks/categorizing/#best-practices","text":"Use consistent category names Create meaningful subcategories Regularly review and clean up categories Use active categories only Maintain category hierarchy Document category purposes","title":"Best Practices"},{"location":"guides/daily-tasks/categorizing/#next-steps","text":"After categorizing: 1. Review categorization - Check for consistency 2. Update categories - Add new categories as needed 3. Generate reports - Analyze spending patterns 4. Adjust budget - Update budget based on categories For detailed budget management, see the Budget Management Guide .","title":"Next Steps"},{"location":"guides/daily-tasks/importing/","text":"Importing Bank Transactions This guide covers how to import bank transactions from your financial institutions, with special emphasis on timing to prevent duplicate detection issues. Overview Bank transaction importing is the foundation of effective budget reconciliation. When you import matters as much as what you import - banks can change transaction processing dates, affecting your reconciliation accuracy. Critical Timing Guidelines \u23f0 Timing Rules for Success Import within 7 days of month-end - Prevents bank date advancement issues - Enables cross-month duplicate detection - Maintains historical data integrity Import July within 7 days of EOY completion - Critical for cross-year duplicate detection - Prevents June\u2192July transaction movement - Maintains fiscal year boundary accuracy \ud83d\udea8 Why Timing Matters Banks routinely advance transaction processing dates by 2-7 days after initial processing. This means: June 30 transactions may appear as July 1-7 transactions Month-end transactions may appear in the following month Historical bank balances become incorrect if reconciliation is delayed Cross-year duplicate detection fails if import timing exceeds system windows Import Process Step 1: Download Bank Statements Log into your bank's website or app Select the account you want to import Choose date range - typically one month at a time Download in CSV format (preferred) or PDF if CSV unavailable Save to a known location on your computer File Format Priority: Most banks offer multiple export formats. Always choose CSV over PDF when available - it imports more accurately and faster. Step 2: Access Import Function Open your budget spreadsheet Navigate to Budget \u2192 Import Bank Transactions Select your bank template or configure if first time Upload your downloaded file Step 3: Configure Import Settings For First-Time Setup: 1. Map columns - Tell system which columns contain dates, amounts, descriptions 2. Set lookback days - Usually 7 days for duplicate detection 3. Configure account rules - How to identify which account transactions belong to 4. Save as template - Reuse settings for future imports For Regular Imports: 1. Select saved template for your bank 2. Verify column mapping (banks occasionally change formats) 3. Proceed with import Step 4: Review and Process Review potential duplicates - System shows transactions that might already exist Verify new transactions - Check amounts, dates, descriptions are correct Confirm account assignment - Ensure transactions go to correct bank account Complete import - Add transactions to your budget system Import Templates and Settings Lookback Days Configuration Default: 7 days - Appropriate for most situations Monthly reconciliation: 7 days catches bank date advances Delayed reconciliation: Won't catch older duplicates (intentional safety feature) Cross-year detection: Automatically uses template settings Bank-Specific Templates Save templates for each bank you use: - Column mappings for your bank's CSV format - Account identification rules - Default descriptions for common transaction types - Lookback day preferences Account Rules Configure how the system identifies which account transactions belong to: - Credit cards: Often use ending digits (e.g., ending-1234) - Bank accounts: May use full account number - Manual selection: Choose account during import Best Practices \ud83c\udfaf Timing Best Practices Import within 7 days of transaction dates Complete EOY imports immediately after fiscal year end Process month-end imports promptly (within 1 week) Monitor for bank format changes quarterly \ud83c\udfaf Data Quality Best Practices Verify dates before importing - Check for obvious errors Review amounts for reasonableness - Catch decimal point errors Check descriptions for completeness - Some banks truncate descriptions Confirm account assignments - Ensure transactions go to correct accounts \ud83c\udfaf File Management Best Practices Use consistent naming - e.g., \"NAB-Checking-2025-07.csv\" Keep monthly exports organized - Separate folders by year/month Archive import files - Keep for audit trail and re-import if needed Delete temporary downloads - Clean up download folder regularly Troubleshooting Common Issues \u274c Import Fails or Maps Incorrectly Solutions: 1. Check file format - Ensure CSV not PDF 2. Verify column mappings - Bank may have changed format 3. Clear stored mappings - Start fresh if bank changed significantly 4. Update template - Save new configuration for future use \u274c Too Many Duplicates Detected Causes: - Importing overlapping date ranges - Re-importing same file - Bank file contains previously imported transactions Solutions: 1. Check date ranges - Don't overlap with previous imports 2. Review file contents - Ensure new transactions only 3. Use duplicate review - System shows why it thinks transactions are duplicates \u274c Missing Transactions Causes: - Bank file doesn't contain all transactions - Date range too narrow - CSV export excluded some transaction types Solutions: 1. Verify date range - Check if bank export covers full period 2. Check account settings - Some accounts exclude certain transaction types 3. Download separate files - Some banks separate credits and debits 4. Manual entry backup - Add missing transactions manually if needed \u26a0\ufe0f Cross-Year/Month Detection Not Working Most Common Cause: Delayed import timing Why This Happens: - System only detects cross-period duplicates within 7-day window - Late imports assume it's not \"first import\" of new period - Bank date advancement occurs between import and reconciliation Prevention: - Import immediately after period end - Complete EOY process promptly - Don't delay monthly reconciliation Recovery: - Manual comparison - Visual check of period boundaries - Adjust bank balances - Restore zero balance manually Integration with Reconciliation After Import: Next Steps Open Reconciliation Dashboard - Budget \u2192 Reconciliation Dashboard Review auto-matches - Verify system-suggested matches are correct Process unmatched transactions - Categorize and assign to budget Complete reconciliation - Match all transactions to achieve zero balance Reconciliation Timing Critical Window: Complete reconciliation within 7 days of import to maintain data integrity and prevent bank date advancement issues from affecting your budget accuracy. Advanced Features Manual Transaction Entry For banks that only provide PDF statements: 1. Use Transaction Editor - Budget \u2192 Edit Transaction 2. Enter transactions individually - Date, amount, description, account 3. Categorize immediately - Assign to budget categories 4. No duplicate detection - Manual entries skip duplicate checking Bulk Processing For multiple accounts or months: 1. Import each account separately - Maintains clear audit trail 2. Process chronologically - Import older months first 3. Reconcile between imports - Don't accumulate unreconciled transactions 4. Monitor system performance - Large imports may take longer Bulk Import Limitation: Cross-year detection expects \"first import\" to be small. Importing 70+ transactions at once may bypass detection even within the 7-day window. Next Steps After successful import: 1. Reconcile transactions - Match imports to budget categories 2. Run month-end process - When all transactions reconciled 3. Update categories - Add new categories if needed Remember: Import timing affects reconciliation accuracy. The few minutes saved by delaying imports can cost hours of manual correction later.","title":"Importing"},{"location":"guides/daily-tasks/importing/#importing-bank-transactions","text":"This guide covers how to import bank transactions from your financial institutions, with special emphasis on timing to prevent duplicate detection issues.","title":"Importing Bank Transactions"},{"location":"guides/daily-tasks/importing/#overview","text":"Bank transaction importing is the foundation of effective budget reconciliation. When you import matters as much as what you import - banks can change transaction processing dates, affecting your reconciliation accuracy.","title":"Overview"},{"location":"guides/daily-tasks/importing/#critical-timing-guidelines","text":"","title":"Critical Timing Guidelines"},{"location":"guides/daily-tasks/importing/#timing-rules-for-success","text":"Import within 7 days of month-end - Prevents bank date advancement issues - Enables cross-month duplicate detection - Maintains historical data integrity Import July within 7 days of EOY completion - Critical for cross-year duplicate detection - Prevents June\u2192July transaction movement - Maintains fiscal year boundary accuracy","title":"\u23f0 Timing Rules for Success"},{"location":"guides/daily-tasks/importing/#why-timing-matters","text":"Banks routinely advance transaction processing dates by 2-7 days after initial processing. This means: June 30 transactions may appear as July 1-7 transactions Month-end transactions may appear in the following month Historical bank balances become incorrect if reconciliation is delayed Cross-year duplicate detection fails if import timing exceeds system windows","title":"\ud83d\udea8 Why Timing Matters"},{"location":"guides/daily-tasks/importing/#import-process","text":"","title":"Import Process"},{"location":"guides/daily-tasks/importing/#step-1-download-bank-statements","text":"Log into your bank's website or app Select the account you want to import Choose date range - typically one month at a time Download in CSV format (preferred) or PDF if CSV unavailable Save to a known location on your computer File Format Priority: Most banks offer multiple export formats. Always choose CSV over PDF when available - it imports more accurately and faster.","title":"Step 1: Download Bank Statements"},{"location":"guides/daily-tasks/importing/#step-2-access-import-function","text":"Open your budget spreadsheet Navigate to Budget \u2192 Import Bank Transactions Select your bank template or configure if first time Upload your downloaded file","title":"Step 2: Access Import Function"},{"location":"guides/daily-tasks/importing/#step-3-configure-import-settings","text":"For First-Time Setup: 1. Map columns - Tell system which columns contain dates, amounts, descriptions 2. Set lookback days - Usually 7 days for duplicate detection 3. Configure account rules - How to identify which account transactions belong to 4. Save as template - Reuse settings for future imports For Regular Imports: 1. Select saved template for your bank 2. Verify column mapping (banks occasionally change formats) 3. Proceed with import","title":"Step 3: Configure Import Settings"},{"location":"guides/daily-tasks/importing/#step-4-review-and-process","text":"Review potential duplicates - System shows transactions that might already exist Verify new transactions - Check amounts, dates, descriptions are correct Confirm account assignment - Ensure transactions go to correct bank account Complete import - Add transactions to your budget system","title":"Step 4: Review and Process"},{"location":"guides/daily-tasks/importing/#import-templates-and-settings","text":"","title":"Import Templates and Settings"},{"location":"guides/daily-tasks/importing/#lookback-days-configuration","text":"Default: 7 days - Appropriate for most situations Monthly reconciliation: 7 days catches bank date advances Delayed reconciliation: Won't catch older duplicates (intentional safety feature) Cross-year detection: Automatically uses template settings","title":"Lookback Days Configuration"},{"location":"guides/daily-tasks/importing/#bank-specific-templates","text":"Save templates for each bank you use: - Column mappings for your bank's CSV format - Account identification rules - Default descriptions for common transaction types - Lookback day preferences","title":"Bank-Specific Templates"},{"location":"guides/daily-tasks/importing/#account-rules","text":"Configure how the system identifies which account transactions belong to: - Credit cards: Often use ending digits (e.g., ending-1234) - Bank accounts: May use full account number - Manual selection: Choose account during import","title":"Account Rules"},{"location":"guides/daily-tasks/importing/#best-practices","text":"","title":"Best Practices"},{"location":"guides/daily-tasks/importing/#timing-best-practices","text":"Import within 7 days of transaction dates Complete EOY imports immediately after fiscal year end Process month-end imports promptly (within 1 week) Monitor for bank format changes quarterly","title":"\ud83c\udfaf Timing Best Practices"},{"location":"guides/daily-tasks/importing/#data-quality-best-practices","text":"Verify dates before importing - Check for obvious errors Review amounts for reasonableness - Catch decimal point errors Check descriptions for completeness - Some banks truncate descriptions Confirm account assignments - Ensure transactions go to correct accounts","title":"\ud83c\udfaf Data Quality Best Practices"},{"location":"guides/daily-tasks/importing/#file-management-best-practices","text":"Use consistent naming - e.g., \"NAB-Checking-2025-07.csv\" Keep monthly exports organized - Separate folders by year/month Archive import files - Keep for audit trail and re-import if needed Delete temporary downloads - Clean up download folder regularly","title":"\ud83c\udfaf File Management Best Practices"},{"location":"guides/daily-tasks/importing/#troubleshooting-common-issues","text":"","title":"Troubleshooting Common Issues"},{"location":"guides/daily-tasks/importing/#import-fails-or-maps-incorrectly","text":"Solutions: 1. Check file format - Ensure CSV not PDF 2. Verify column mappings - Bank may have changed format 3. Clear stored mappings - Start fresh if bank changed significantly 4. Update template - Save new configuration for future use","title":"\u274c Import Fails or Maps Incorrectly"},{"location":"guides/daily-tasks/importing/#too-many-duplicates-detected","text":"Causes: - Importing overlapping date ranges - Re-importing same file - Bank file contains previously imported transactions Solutions: 1. Check date ranges - Don't overlap with previous imports 2. Review file contents - Ensure new transactions only 3. Use duplicate review - System shows why it thinks transactions are duplicates","title":"\u274c Too Many Duplicates Detected"},{"location":"guides/daily-tasks/importing/#missing-transactions","text":"Causes: - Bank file doesn't contain all transactions - Date range too narrow - CSV export excluded some transaction types Solutions: 1. Verify date range - Check if bank export covers full period 2. Check account settings - Some accounts exclude certain transaction types 3. Download separate files - Some banks separate credits and debits 4. Manual entry backup - Add missing transactions manually if needed","title":"\u274c Missing Transactions"},{"location":"guides/daily-tasks/importing/#cross-yearmonth-detection-not-working","text":"Most Common Cause: Delayed import timing Why This Happens: - System only detects cross-period duplicates within 7-day window - Late imports assume it's not \"first import\" of new period - Bank date advancement occurs between import and reconciliation Prevention: - Import immediately after period end - Complete EOY process promptly - Don't delay monthly reconciliation Recovery: - Manual comparison - Visual check of period boundaries - Adjust bank balances - Restore zero balance manually","title":"\u26a0\ufe0f Cross-Year/Month Detection Not Working"},{"location":"guides/daily-tasks/importing/#integration-with-reconciliation","text":"","title":"Integration with Reconciliation"},{"location":"guides/daily-tasks/importing/#after-import-next-steps","text":"Open Reconciliation Dashboard - Budget \u2192 Reconciliation Dashboard Review auto-matches - Verify system-suggested matches are correct Process unmatched transactions - Categorize and assign to budget Complete reconciliation - Match all transactions to achieve zero balance","title":"After Import: Next Steps"},{"location":"guides/daily-tasks/importing/#reconciliation-timing","text":"Critical Window: Complete reconciliation within 7 days of import to maintain data integrity and prevent bank date advancement issues from affecting your budget accuracy.","title":"Reconciliation Timing"},{"location":"guides/daily-tasks/importing/#advanced-features","text":"","title":"Advanced Features"},{"location":"guides/daily-tasks/importing/#manual-transaction-entry","text":"For banks that only provide PDF statements: 1. Use Transaction Editor - Budget \u2192 Edit Transaction 2. Enter transactions individually - Date, amount, description, account 3. Categorize immediately - Assign to budget categories 4. No duplicate detection - Manual entries skip duplicate checking","title":"Manual Transaction Entry"},{"location":"guides/daily-tasks/importing/#bulk-processing","text":"For multiple accounts or months: 1. Import each account separately - Maintains clear audit trail 2. Process chronologically - Import older months first 3. Reconcile between imports - Don't accumulate unreconciled transactions 4. Monitor system performance - Large imports may take longer Bulk Import Limitation: Cross-year detection expects \"first import\" to be small. Importing 70+ transactions at once may bypass detection even within the 7-day window.","title":"Bulk Processing"},{"location":"guides/daily-tasks/importing/#next-steps","text":"After successful import: 1. Reconcile transactions - Match imports to budget categories 2. Run month-end process - When all transactions reconciled 3. Update categories - Add new categories if needed Remember: Import timing affects reconciliation accuracy. The few minutes saved by delaying imports can cost hours of manual correction later.","title":"Next Steps"},{"location":"guides/daily-tasks/reconciling/","text":"Reconciling Transactions This guide covers how to use the Reconciliation Dashboard to match and verify transactions between your bank records and cash flow entries. Overview Reconciliation is the process of matching transactions from your bank statements with entries in your cash flow sheet. The Reconciliation Dashboard provides a side-by-side view to help you identify and resolve discrepancies. Getting Started Prerequisites Transactions imported from bank statements Cash flow entries for income and expenses Categories set up in the system Access the Dashboard Open your budget spreadsheet Click \ud83c\udfe6 Budget > Reconciliation Dashboard The dashboard will open in a new window Dashboard Interface Layout The dashboard displays two columns: - Your categorized transactions - Income and expense entries - Split transaction groups - Unreconciled entries - Imported bank transactions - Unmatched bank entries - Transaction details - Account information Transaction Status Indicators Auto-matched transactions - System matched by amount and date - Ready for reconciliation Split transaction groups - Multiple cash flow entries - Match to single bank transaction Unmatched transactions - Need manual processing - Require categorization Reconciliation Process Step 1: Review Auto-Matches Identify green highlights - These are automatically matched Verify details - Check amount, date, and description Reconcile matches - Click \"Reconcile Match\" for verified pairs Step 2: Handle Unmatched Transactions Review bank transactions - Look for transactions without matches Click \"Add to Cash Flow\" - For bank-only transactions Categorize transactions - Assign categories and subcategories Add descriptions - Modify transaction descriptions as needed Step 3: Process Split Transactions Identify blue highlights - These are split transaction groups Click \"Find Match\" - Locate corresponding bank transaction Verify split amounts - Ensure total equals bank transaction Reconcile group - Click \"Reconcile Match\" for complete split Step 4: Bulk Reconciliation Select multiple transactions - Use checkboxes for batch processing Click \"Bulk Reconcile\" - Process multiple pairs at once Review results - Check for any failed reconciliations Transaction Types Single Transactions Standard transactions - One-to-one matching Category assignment - Select from dropdown menus Description editing - Modify transaction descriptions Account verification - Confirm correct account assignment Split Transactions Multiple categories - Divide amount across categories Group identification - Blue highlighted groups Total verification - Ensure split amounts equal bank transaction Category assignment - Assign categories to each split Manual Entries Cash transactions - Expenses paid in cash Income entries - Salary, gifts, or other income Account reconciliation - Verify against bank balance Category Assignment Selecting Categories Choose transaction type - Income or Expense Select main category - From dropdown menu Choose subcategory - More specific classification Add description - Modify transaction description Category Management Active categories only - Inactive categories are hidden Consistent naming - Use standard category names Subcategory hierarchy - Maintain category structure Advanced Features Search and Filter Search transactions - Find specific transactions Filter by status - Show reconciled/unreconciled Filter by account - Focus on specific accounts Performance Diagnostics Run diagnostics - Test system performance Check data loading - Verify transaction retrieval Monitor processing - Track reconciliation speed Refresh and Update Refresh dashboard - Update transaction status Close dashboard - Update reconciliation date Auto-save - Changes are saved automatically Troubleshooting Common Issues Problem: Transactions not appearing in dashboard Solution: - Check if transactions are already reconciled - Verify import was successful - Refresh the dashboard Problem: Incorrect auto-matches Solution: - Manually reconcile correct pairs - Add missing transactions to cash flow - Review transaction dates and amounts Problem: Transactions appear in wrong month after delayed reconciliation Solution: - Immediate processing prevents this - Banks change transaction dates 2-7 days after processing - Compare last few days of previous month with first few days of current month - Look for identical amounts and descriptions between periods - Manually adjust bank balances if historical data is affected - Prevention: Always reconcile within 7 days of month/year end Problem: Split amounts don't match Solution: - Verify split total equals bank transaction - Check for rounding errors - Review individual split amounts Problem: Dashboard is slow Solution: - Run performance diagnostics - Check transaction count - Consider processing in smaller batches Best Practices Reconcile within 7 days of transactions - Critical for cross-year detection Process End-of-Year imports immediately - Avoid bank date advancement issues Reconcile regularly (weekly recommended) Verify all auto-matches before reconciling Use consistent category names Review split transactions carefully Keep descriptions clear and consistent Refresh dashboard after major changes Completion Checklist Before closing the dashboard: - [ ] All auto-matches reviewed and reconciled - [ ] Unmatched transactions categorized - [ ] Split transactions verified and reconciled - [ ] All bank transactions accounted for - [ ] Cash flow entries complete - [ ] Balances verified Next Steps After reconciliation: 1. Review balances - Check account balances 2. Run month-end process - If all transactions reconciled 3. Update categories - Add new categories if needed 4. Archive data - Keep records for future reference For month-end processing instructions, see the Monthly Tasks Guide .","title":"Reconciling"},{"location":"guides/daily-tasks/reconciling/#reconciling-transactions","text":"This guide covers how to use the Reconciliation Dashboard to match and verify transactions between your bank records and cash flow entries.","title":"Reconciling Transactions"},{"location":"guides/daily-tasks/reconciling/#overview","text":"Reconciliation is the process of matching transactions from your bank statements with entries in your cash flow sheet. The Reconciliation Dashboard provides a side-by-side view to help you identify and resolve discrepancies.","title":"Overview"},{"location":"guides/daily-tasks/reconciling/#getting-started","text":"","title":"Getting Started"},{"location":"guides/daily-tasks/reconciling/#prerequisites","text":"Transactions imported from bank statements Cash flow entries for income and expenses Categories set up in the system","title":"Prerequisites"},{"location":"guides/daily-tasks/reconciling/#access-the-dashboard","text":"Open your budget spreadsheet Click \ud83c\udfe6 Budget > Reconciliation Dashboard The dashboard will open in a new window","title":"Access the Dashboard"},{"location":"guides/daily-tasks/reconciling/#dashboard-interface","text":"","title":"Dashboard Interface"},{"location":"guides/daily-tasks/reconciling/#layout","text":"The dashboard displays two columns: - Your categorized transactions - Income and expense entries - Split transaction groups - Unreconciled entries - Imported bank transactions - Unmatched bank entries - Transaction details - Account information","title":"Layout"},{"location":"guides/daily-tasks/reconciling/#transaction-status-indicators","text":"Auto-matched transactions - System matched by amount and date - Ready for reconciliation Split transaction groups - Multiple cash flow entries - Match to single bank transaction Unmatched transactions - Need manual processing - Require categorization","title":"Transaction Status Indicators"},{"location":"guides/daily-tasks/reconciling/#reconciliation-process","text":"","title":"Reconciliation Process"},{"location":"guides/daily-tasks/reconciling/#step-1-review-auto-matches","text":"Identify green highlights - These are automatically matched Verify details - Check amount, date, and description Reconcile matches - Click \"Reconcile Match\" for verified pairs","title":"Step 1: Review Auto-Matches"},{"location":"guides/daily-tasks/reconciling/#step-2-handle-unmatched-transactions","text":"Review bank transactions - Look for transactions without matches Click \"Add to Cash Flow\" - For bank-only transactions Categorize transactions - Assign categories and subcategories Add descriptions - Modify transaction descriptions as needed","title":"Step 2: Handle Unmatched Transactions"},{"location":"guides/daily-tasks/reconciling/#step-3-process-split-transactions","text":"Identify blue highlights - These are split transaction groups Click \"Find Match\" - Locate corresponding bank transaction Verify split amounts - Ensure total equals bank transaction Reconcile group - Click \"Reconcile Match\" for complete split","title":"Step 3: Process Split Transactions"},{"location":"guides/daily-tasks/reconciling/#step-4-bulk-reconciliation","text":"Select multiple transactions - Use checkboxes for batch processing Click \"Bulk Reconcile\" - Process multiple pairs at once Review results - Check for any failed reconciliations","title":"Step 4: Bulk Reconciliation"},{"location":"guides/daily-tasks/reconciling/#transaction-types","text":"","title":"Transaction Types"},{"location":"guides/daily-tasks/reconciling/#single-transactions","text":"Standard transactions - One-to-one matching Category assignment - Select from dropdown menus Description editing - Modify transaction descriptions Account verification - Confirm correct account assignment","title":"Single Transactions"},{"location":"guides/daily-tasks/reconciling/#split-transactions","text":"Multiple categories - Divide amount across categories Group identification - Blue highlighted groups Total verification - Ensure split amounts equal bank transaction Category assignment - Assign categories to each split","title":"Split Transactions"},{"location":"guides/daily-tasks/reconciling/#manual-entries","text":"Cash transactions - Expenses paid in cash Income entries - Salary, gifts, or other income Account reconciliation - Verify against bank balance","title":"Manual Entries"},{"location":"guides/daily-tasks/reconciling/#category-assignment","text":"","title":"Category Assignment"},{"location":"guides/daily-tasks/reconciling/#selecting-categories","text":"Choose transaction type - Income or Expense Select main category - From dropdown menu Choose subcategory - More specific classification Add description - Modify transaction description","title":"Selecting Categories"},{"location":"guides/daily-tasks/reconciling/#category-management","text":"Active categories only - Inactive categories are hidden Consistent naming - Use standard category names Subcategory hierarchy - Maintain category structure","title":"Category Management"},{"location":"guides/daily-tasks/reconciling/#advanced-features","text":"","title":"Advanced Features"},{"location":"guides/daily-tasks/reconciling/#search-and-filter","text":"Search transactions - Find specific transactions Filter by status - Show reconciled/unreconciled Filter by account - Focus on specific accounts","title":"Search and Filter"},{"location":"guides/daily-tasks/reconciling/#performance-diagnostics","text":"Run diagnostics - Test system performance Check data loading - Verify transaction retrieval Monitor processing - Track reconciliation speed","title":"Performance Diagnostics"},{"location":"guides/daily-tasks/reconciling/#refresh-and-update","text":"Refresh dashboard - Update transaction status Close dashboard - Update reconciliation date Auto-save - Changes are saved automatically","title":"Refresh and Update"},{"location":"guides/daily-tasks/reconciling/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"guides/daily-tasks/reconciling/#common-issues","text":"Problem: Transactions not appearing in dashboard Solution: - Check if transactions are already reconciled - Verify import was successful - Refresh the dashboard Problem: Incorrect auto-matches Solution: - Manually reconcile correct pairs - Add missing transactions to cash flow - Review transaction dates and amounts Problem: Transactions appear in wrong month after delayed reconciliation Solution: - Immediate processing prevents this - Banks change transaction dates 2-7 days after processing - Compare last few days of previous month with first few days of current month - Look for identical amounts and descriptions between periods - Manually adjust bank balances if historical data is affected - Prevention: Always reconcile within 7 days of month/year end Problem: Split amounts don't match Solution: - Verify split total equals bank transaction - Check for rounding errors - Review individual split amounts Problem: Dashboard is slow Solution: - Run performance diagnostics - Check transaction count - Consider processing in smaller batches","title":"Common Issues"},{"location":"guides/daily-tasks/reconciling/#best-practices","text":"Reconcile within 7 days of transactions - Critical for cross-year detection Process End-of-Year imports immediately - Avoid bank date advancement issues Reconcile regularly (weekly recommended) Verify all auto-matches before reconciling Use consistent category names Review split transactions carefully Keep descriptions clear and consistent Refresh dashboard after major changes","title":"Best Practices"},{"location":"guides/daily-tasks/reconciling/#completion-checklist","text":"Before closing the dashboard: - [ ] All auto-matches reviewed and reconciled - [ ] Unmatched transactions categorized - [ ] Split transactions verified and reconciled - [ ] All bank transactions accounted for - [ ] Cash flow entries complete - [ ] Balances verified","title":"Completion Checklist"},{"location":"guides/daily-tasks/reconciling/#next-steps","text":"After reconciliation: 1. Review balances - Check account balances 2. Run month-end process - If all transactions reconciled 3. Update categories - Add new categories if needed 4. Archive data - Keep records for future reference For month-end processing instructions, see the Monthly Tasks Guide .","title":"Next Steps"},{"location":"guides/monthly-tasks/end-of-month/","text":"End of Month Process This guide covers how to complete the monthly budget processing to close the current month and prepare for the next month. Overview The End of Month (EOM) process is a critical monthly procedure that: - Copies actual values to the next month - Updates month formatting and status - Prepares the system for the next month's processing - Prevents duplicate processing Prerequisites Before Running EOM All transactions reconciled Categories verified and assigned Bank balances verified Budget variances reviewed No pending transactions System Requirements Current month properly set Month statuses initialized All sheets accessible Proper authorization Running the Process Access the EOM Process Open your budget spreadsheet Click \ud83d\udcc5 Period Processing > Run End of Month Process The system will verify prerequisites and show confirmation Confirmation Dialog The system will display: - Current month being processed - Column ranges for current and next month - Confirmation prompt to proceed Important: Verify the correct month is selected before proceeding Balance Check The system performs a comprehensive balance check: - Bank balances - Verify account balances - Budget balances - Check budget vs actual - Transaction reconciliation - Ensure all transactions reconciled If issues are found: - Review warnings - Check each issue - Fix problems - Resolve before proceeding - Re-run check - Verify fixes before EOM What the Process Does Step 1: Copy Actual Values Source: Current month's Actual column (right column) Target: Next month's Actual column Range: Rows 5-114 (budget items) Method: Natural copy with formula adjustment Step 2: Update Formatting Current month: Apply historical formatting (gray background) Next month: Apply current month formatting (blue highlights) Method: Paint Format copy from template Step 3: Update Status Tracking Mark current month: Set status to \"historical\" Mark next month: Set status to \"current\" Update properties: Store processing information Hide EOM option: Prevent duplicate processing Step 4: EOY Transition (June Only) If processing June (end of fiscal year): - Increment year: Update to next fiscal year - Clear formulas: Remove formulas from all months except July - Update headers: Set up new fiscal year headers - Initialize July: Set up July as current month Post-Processing Verification Steps Check copied values - Verify Actual column in next month Review formatting - Confirm month highlighting is correct Verify status - Check month status tracking Test functionality - Ensure system is ready for next month Menu Updates EOM option hidden - No longer available for processed month Next month ready - System prepared for next month Status indicators - Updated throughout interface Troubleshooting Common Issues Problem: System shows balance issues Solution: - Review each balance issue - Reconcile missing transactions - Verify account mappings - Re-run balance check Problem: Incorrect month being processed Solution: - Cancel the process - Set correct current month - Initialize month statuses - Re-run EOM process Problem: Month formatting not applied correctly Solution: - Check template month availability - Verify column ranges - Re-run formatting manually - Contact support if persistent Problem: Month statuses not updated Solution: - Check system properties - Verify month tracking - Re-initialize month statuses - Re-run EOM process EOY-Specific Issues Problem: Year not incremented properly Solution: - Verify June processing - Check fiscal year settings - Review year transition logic - Re-run EOM process Problem: Formulas not cleared from old months Solution: - Check July setup - Verify formula clearing logic - Review month column ranges - Contact support Best Practices Always reconcile before EOM Verify current month before processing Review balance check results Test system after EOM completion Keep backup before major changes Document any issues encountered Completion Checklist After EOM processing: - [ ] Actual values copied to next month - [ ] Current month formatted as historical - [ ] Next month formatted as current - [ ] Month statuses updated - [ ] EOM option hidden for processed month - [ ] System ready for next month - [ ] All balances verified - [ ] No errors in processing Next Steps After successful EOM: 1. Begin next month - Start importing new transactions 2. Update budget - Adjust budget for next month 3. Monitor performance - Track budget vs actual 4. Prepare for EOY - If approaching June For End of Year processing, see the EOY Guide . Advanced Features Performance Monitoring Processing time - Track EOM completion time Error logging - Monitor for processing issues Status tracking - Verify all steps completed System health - Check overall system status Backup and Recovery Pre-EOM backup - Automatic backup before processing Rollback capability - Revert if issues occur Data integrity - Verify data consistency Error recovery - Handle processing failures Integration Month tracking - Integrated with month status system Menu updates - Automatic menu refresh Status synchronization - Consistent status across system Property management - Update system properties","title":"End of Month"},{"location":"guides/monthly-tasks/end-of-month/#end-of-month-process","text":"This guide covers how to complete the monthly budget processing to close the current month and prepare for the next month.","title":"End of Month Process"},{"location":"guides/monthly-tasks/end-of-month/#overview","text":"The End of Month (EOM) process is a critical monthly procedure that: - Copies actual values to the next month - Updates month formatting and status - Prepares the system for the next month's processing - Prevents duplicate processing","title":"Overview"},{"location":"guides/monthly-tasks/end-of-month/#prerequisites","text":"","title":"Prerequisites"},{"location":"guides/monthly-tasks/end-of-month/#before-running-eom","text":"All transactions reconciled Categories verified and assigned Bank balances verified Budget variances reviewed No pending transactions","title":"Before Running EOM"},{"location":"guides/monthly-tasks/end-of-month/#system-requirements","text":"Current month properly set Month statuses initialized All sheets accessible Proper authorization","title":"System Requirements"},{"location":"guides/monthly-tasks/end-of-month/#running-the-process","text":"","title":"Running the Process"},{"location":"guides/monthly-tasks/end-of-month/#access-the-eom-process","text":"Open your budget spreadsheet Click \ud83d\udcc5 Period Processing > Run End of Month Process The system will verify prerequisites and show confirmation","title":"Access the EOM Process"},{"location":"guides/monthly-tasks/end-of-month/#confirmation-dialog","text":"The system will display: - Current month being processed - Column ranges for current and next month - Confirmation prompt to proceed Important: Verify the correct month is selected before proceeding","title":"Confirmation Dialog"},{"location":"guides/monthly-tasks/end-of-month/#balance-check","text":"The system performs a comprehensive balance check: - Bank balances - Verify account balances - Budget balances - Check budget vs actual - Transaction reconciliation - Ensure all transactions reconciled If issues are found: - Review warnings - Check each issue - Fix problems - Resolve before proceeding - Re-run check - Verify fixes before EOM","title":"Balance Check"},{"location":"guides/monthly-tasks/end-of-month/#what-the-process-does","text":"","title":"What the Process Does"},{"location":"guides/monthly-tasks/end-of-month/#step-1-copy-actual-values","text":"Source: Current month's Actual column (right column) Target: Next month's Actual column Range: Rows 5-114 (budget items) Method: Natural copy with formula adjustment","title":"Step 1: Copy Actual Values"},{"location":"guides/monthly-tasks/end-of-month/#step-2-update-formatting","text":"Current month: Apply historical formatting (gray background) Next month: Apply current month formatting (blue highlights) Method: Paint Format copy from template","title":"Step 2: Update Formatting"},{"location":"guides/monthly-tasks/end-of-month/#step-3-update-status-tracking","text":"Mark current month: Set status to \"historical\" Mark next month: Set status to \"current\" Update properties: Store processing information Hide EOM option: Prevent duplicate processing","title":"Step 3: Update Status Tracking"},{"location":"guides/monthly-tasks/end-of-month/#step-4-eoy-transition-june-only","text":"If processing June (end of fiscal year): - Increment year: Update to next fiscal year - Clear formulas: Remove formulas from all months except July - Update headers: Set up new fiscal year headers - Initialize July: Set up July as current month","title":"Step 4: EOY Transition (June Only)"},{"location":"guides/monthly-tasks/end-of-month/#post-processing","text":"","title":"Post-Processing"},{"location":"guides/monthly-tasks/end-of-month/#verification-steps","text":"Check copied values - Verify Actual column in next month Review formatting - Confirm month highlighting is correct Verify status - Check month status tracking Test functionality - Ensure system is ready for next month","title":"Verification Steps"},{"location":"guides/monthly-tasks/end-of-month/#menu-updates","text":"EOM option hidden - No longer available for processed month Next month ready - System prepared for next month Status indicators - Updated throughout interface","title":"Menu Updates"},{"location":"guides/monthly-tasks/end-of-month/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"guides/monthly-tasks/end-of-month/#common-issues","text":"Problem: System shows balance issues Solution: - Review each balance issue - Reconcile missing transactions - Verify account mappings - Re-run balance check Problem: Incorrect month being processed Solution: - Cancel the process - Set correct current month - Initialize month statuses - Re-run EOM process Problem: Month formatting not applied correctly Solution: - Check template month availability - Verify column ranges - Re-run formatting manually - Contact support if persistent Problem: Month statuses not updated Solution: - Check system properties - Verify month tracking - Re-initialize month statuses - Re-run EOM process","title":"Common Issues"},{"location":"guides/monthly-tasks/end-of-month/#eoy-specific-issues","text":"Problem: Year not incremented properly Solution: - Verify June processing - Check fiscal year settings - Review year transition logic - Re-run EOM process Problem: Formulas not cleared from old months Solution: - Check July setup - Verify formula clearing logic - Review month column ranges - Contact support","title":"EOY-Specific Issues"},{"location":"guides/monthly-tasks/end-of-month/#best-practices","text":"Always reconcile before EOM Verify current month before processing Review balance check results Test system after EOM completion Keep backup before major changes Document any issues encountered","title":"Best Practices"},{"location":"guides/monthly-tasks/end-of-month/#completion-checklist","text":"After EOM processing: - [ ] Actual values copied to next month - [ ] Current month formatted as historical - [ ] Next month formatted as current - [ ] Month statuses updated - [ ] EOM option hidden for processed month - [ ] System ready for next month - [ ] All balances verified - [ ] No errors in processing","title":"Completion Checklist"},{"location":"guides/monthly-tasks/end-of-month/#next-steps","text":"After successful EOM: 1. Begin next month - Start importing new transactions 2. Update budget - Adjust budget for next month 3. Monitor performance - Track budget vs actual 4. Prepare for EOY - If approaching June For End of Year processing, see the EOY Guide .","title":"Next Steps"},{"location":"guides/monthly-tasks/end-of-month/#advanced-features","text":"","title":"Advanced Features"},{"location":"guides/monthly-tasks/end-of-month/#performance-monitoring","text":"Processing time - Track EOM completion time Error logging - Monitor for processing issues Status tracking - Verify all steps completed System health - Check overall system status","title":"Performance Monitoring"},{"location":"guides/monthly-tasks/end-of-month/#backup-and-recovery","text":"Pre-EOM backup - Automatic backup before processing Rollback capability - Revert if issues occur Data integrity - Verify data consistency Error recovery - Handle processing failures","title":"Backup and Recovery"},{"location":"guides/monthly-tasks/end-of-month/#integration","text":"Month tracking - Integrated with month status system Menu updates - Automatic menu refresh Status synchronization - Consistent status across system Property management - Update system properties","title":"Integration"},{"location":"guides/monthly-tasks/reporting/","text":"","title":"Reporting"},{"location":"guides/system/changelog/","text":"Changelog A complete history of changes and updates to the Budget System documentation. Version History 2.0.0 (2024-06-30) End of Year Process Documentation Overhaul - Complete rewrite of End of Year documentation - Three-step process clarification - State-driven menu system documentation - Month restriction guidelines - Updated developer guide with current implementation - Comprehensive testing checklist - Performance considerations - Security best practices Added - Comprehensive pre-setup verification requirements - Step-by-step three-phase EOY process guide - State-driven menu system explanation - Automated master archiving documentation - Month restriction (June only) guidelines - Enhanced troubleshooting section - Developer testing workflow and checklist - Performance optimization guidance Changed - Complete restructure of EOY setup process documentation - Updated process flow to reflect current three-step implementation - Improved technical implementation details - Enhanced user guidance with warnings and tips - Modernized documentation format with better organization Fixed - Outdated process descriptions that didn't match current implementation - Missing documentation for automated archiving feature - Incomplete technical limitation explanations - Lack of comprehensive testing guidance 1.0.0 (2024-02-22) Initial Release - Initial documentation structure - User manual sections - Quick start guides - Basic operations guide - Menu reference - Troubleshooting guides Added - Complete user manual - Transaction guides - Support documentation Changed - N/A (Initial release) Fixed - N/A (Initial release)","title":"Changelog"},{"location":"guides/system/changelog/#changelog","text":"A complete history of changes and updates to the Budget System documentation.","title":"Changelog"},{"location":"guides/system/changelog/#version-history","text":"","title":"Version History"},{"location":"guides/system/changelog/#200-2024-06-30","text":"End of Year Process Documentation Overhaul - Complete rewrite of End of Year documentation - Three-step process clarification - State-driven menu system documentation - Month restriction guidelines - Updated developer guide with current implementation - Comprehensive testing checklist - Performance considerations - Security best practices Added - Comprehensive pre-setup verification requirements - Step-by-step three-phase EOY process guide - State-driven menu system explanation - Automated master archiving documentation - Month restriction (June only) guidelines - Enhanced troubleshooting section - Developer testing workflow and checklist - Performance optimization guidance Changed - Complete restructure of EOY setup process documentation - Updated process flow to reflect current three-step implementation - Improved technical implementation details - Enhanced user guidance with warnings and tips - Modernized documentation format with better organization Fixed - Outdated process descriptions that didn't match current implementation - Missing documentation for automated archiving feature - Incomplete technical limitation explanations - Lack of comprehensive testing guidance","title":"2.0.0 (2024-06-30)"},{"location":"guides/system/changelog/#100-2024-02-22","text":"Initial Release - Initial documentation structure - User manual sections - Quick start guides - Basic operations guide - Menu reference - Troubleshooting guides Added - Complete user manual - Transaction guides - Support documentation Changed - N/A (Initial release) Fixed - N/A (Initial release)","title":"1.0.0 (2024-02-22)"},{"location":"guides/system/developer-menu/","text":"Developer Menu Reference The Developer menu is only available when Developer Mode is enabled. To enable Developer Mode, go to \u2139\ufe0f Help > Toggle Developer Mode . Developer Mode Warning: Developer mode bypasses critical safety checks and should only be used for development and testing purposes. Always disable Developer Mode for normal budget operations. \ud83d\udee0\ufe0f Developer Menu Overview The Developer menu provides access to advanced system tools, debugging utilities, and legacy functions. It's organized into several submenus for easy navigation: Dev Mode - Developer mode controls System Status - System configuration management Triggers - Google Apps Script trigger management Integrity Checker - System validation and repair tools Testing Tools - Development testing utilities Debug Tools - Diagnostic and debugging functions Legacy - Legacy system tools and advanced testing \ud83d\udd27 Dev Mode Controls - Function: checkDevMode() - **Purpose:** Display current developer mode status - **When to Use:** Verify if developer mode is active - **Output:** Shows current DEV_MODE property value - **Dependencies:** None - Function: enableDevMode() - **Purpose:** Turn on developer mode - **When to Use:** When you need access to developer tools - **Effect:** Enables all developer menu functions - **Dependencies:** Script properties access - Function: disableDevMode() - **Purpose:** Turn off developer mode - **When to Use:** After completing development work - **Effect:** Disables developer menu access - **Dependencies:** Script properties access \ud83d\udcca System Status - Function: checkMasterStatus() - **Purpose:** Verify if current spreadsheet is the master - **When to Use:** Before performing master-only operations - **Output:** Shows IS_MASTER property and related status - **Dependencies:** Script properties access - Function: setAsMaster() - **Purpose:** Mark current spreadsheet as the master - **When to Use:** When setting up a new master spreadsheet - **Effect:** Sets IS_MASTER property to true - **Dependencies:** Script properties access - **Warning:** Only use on the intended master spreadsheet \u2699\ufe0f Triggers - Function: installOnEditTrigger() - **Purpose:** Set up automatic edit detection - **When to Use:** When automatic processing is needed - **Effect:** Creates onEdit trigger for automatic processing - **Dependencies:** Trigger creation permissions - Function: removeOnEditTrigger() - **Purpose:** Remove automatic edit detection - **When to Use:** When automatic processing is not needed - **Effect:** Deletes existing onEdit trigger - **Dependencies:** Trigger management permissions \ud83d\udee1\ufe0f Integrity Checker - Function: runComprehensiveIntegrityCheck() - **Purpose:** Full system validation and health check - **When to Use:** When investigating system issues or before major changes - **Output:** Detailed report of system integrity status - **Dependencies:** Access to all system sheets - **Duration:** May take several minutes for large datasets - Function: quickIntegrityCheck() - **Purpose:** Fast validation check for common issues - **When to Use:** Regular system health monitoring - **Output:** Quick summary of critical issues - **Dependencies:** Basic sheet access - **Duration:** Usually completes in under 30 seconds - Function: fixCorruptedFormulas() - **Purpose:** Repair broken or corrupted formulas - **When to Use:** When formulas are not calculating correctly - **Effect:** Attempts to repair identified formula issues - **Dependencies:** Write access to sheets with formulas - **Warning:** Creates backup before making changes \ud83e\uddea Testing Tools - Function: resetMonthStatuses() - **Purpose:** Reset month processing statuses - **When to Use:** When month statuses are corrupted or incorrect - **Effect:** Resets all month status flags to default state - **Dependencies:** Write access to month status ranges - **Warning:** May affect month processing workflow - Function: validateScriptProperties() - **Purpose:** Check script properties for consistency - **When to Use:** When system behavior is unexpected - **Output:** Report of script properties and their values - **Dependencies:** Script properties access \ud83d\udc1b Debug Tools - Function: verifyNamedRanges() - **Purpose:** Check spreadsheet named ranges - **When to Use:** When named ranges are not working correctly - **Output:** Complete list of all named ranges and their status - **Dependencies:** Named ranges access - Function: viewStoredMappings() - **Purpose:** Check stored bank configurations - **When to Use:** When import mappings are not working - **Output:** Display of all stored bank import mappings - **Dependencies:** Stored mappings access - Function: showImportHistory() - **Purpose:** View transaction import history - **When to Use:** When investigating import issues - **Output:** List of recent imports with timestamps and details - **Dependencies:** Import history data access - Function: cleanupActiveFlagInconsistencies() - **Purpose:** Manually sync category active status - **When to Use:** When ACTIVE flags are out of sync - **Effect:** Synchronizes ACTIVE flags across all categories - **Dependencies:** Category data access - Function: debugIncomeBudgetStatus() - **Purpose:** Debug income budget calculations - **When to Use:** When income budget calculations are incorrect - **Output:** Detailed analysis of income budget status - **Dependencies:** Income budget data access \ud83c\udfdb\ufe0f Legacy Menu The Legacy menu contains advanced developer tools and legacy system functions organized into specialized submenus. Legacy System Cleanup - Function: findLegacyNamedRanges() - **Purpose:** Identify legacy named ranges from old system - **When to Use:** During system cleanup or migration - **Output:** List of legacy named ranges that can be removed - **Dependencies:** Named ranges access - Function: getLegacyCleanupInstructions() - **Purpose:** Get step-by-step cleanup instructions - **When to Use:** When removing legacy system components - **Output:** Detailed instructions for legacy system removal - **Dependencies:** None Cross-Year Detection - Function: testCrossYearDetection() - **Purpose:** Test cross-year duplicate detection system - **When to Use:** When testing or debugging cross-year functionality - **Output:** Test results and diagnostic information - **Dependencies:** Cross-year detection system - Function: quickDiagnoseCrossYearIssue() - **Purpose:** Quick diagnostic for cross-year issues - **When to Use:** When cross-year detection is not working - **Output:** Quick diagnosis of cross-year detection problems - **Dependencies:** Cross-year detection system - Function: showCrossYearDetectionInfo() - **Purpose:** Display cross-year detection information - **When to Use:** When understanding cross-year system status - **Output:** Information about cross-year detection configuration - **Dependencies:** Cross-year detection system - Function: debugArchiveFileDetection() - **Purpose:** Debug archive file detection - **When to Use:** When archive file detection is failing - **Output:** Debug information about archive file detection - **Dependencies:** Archive system access - Function: createMissingNamedRanges() - **Purpose:** Create missing named ranges required by the system - **When to Use:** When functions fail due to missing named ranges - **Output:** Creates BudgetStartDate and other critical named ranges - **Dependencies:** Maintain Budget sheet access Advanced Testing - Function: testIntegrityChecker() - **Purpose:** Test integrity checker functionality - **When to Use:** When testing integrity checker system - **Output:** Test results for integrity checker - **Dependencies:** Integrity checker system access - Function: testCommitmentValidation() - **Purpose:** Test commitment validation system - **When to Use:** When testing commitment validation - **Output:** Test results for commitment validation - **Dependencies:** Commitment system access Debug & Diagnostics - Function: debugTemplateCheck() - **Purpose:** Debug template checking functionality - **When to Use:** When template checking is not working - **Output:** Debug information about template checking - **Dependencies:** Template system access - Function: debugTemplateComprehensive() - **Purpose:** Comprehensive template debugging - **When to Use:** When detailed template debugging is needed - **Output:** Comprehensive debug information about templates - **Dependencies:** Template system access - Function: debugAccounts() - **Purpose:** Debug account mapping functionality - **When to Use:** When account mapping is not working - **Output:** Debug information about account mapping - **Dependencies:** Account mapping system access - Function: debugAnnualBudgetCategories() - **Purpose:** Debug Annual Budget categories - **When to Use:** When Annual Budget categories have issues - **Output:** Debug information about Annual Budget categories - **Dependencies:** Annual Budget access Performance Testing - Function: testSheetAccessPerformance() - **Purpose:** Test sheet access performance and identify bottlenecks - **When to Use:** When investigating performance issues - **Output:** Detailed performance metrics for sheet access operations - **Dependencies:** Access to all system sheets - **Example Output:** ``` Get spreadsheet: 1ms Get Cash Flow sheet: 457ms Get Cash Flow data range: 200ms Get Cash Flow values: 105ms Total Sheet Access Time: 1223ms ``` - Function: testReconciliationDateUpdateDetailed() - **Purpose:** Test reconciliation date update performance - **When to Use:** When reconciliation updates are slow - **Output:** Performance metrics for reconciliation updates - **Dependencies:** Reconciliation system access - Function: testLoanParticipants() - **Purpose:** Test loan participants loading performance - **When to Use:** When loan participant loading is slow - **Output:** Performance metrics for loan participant loading - **Dependencies:** Loan system access - Function: testLoanCategories() - **Purpose:** Test loan category handling performance - **When to Use:** When loan category operations are slow - **Output:** Performance metrics for loan category operations - **Dependencies:** Loan system access \ud83d\udea8 Important Notes Developer Mode Safety Critical Safety Warning: Developer mode bypasses important safety checks and validation. Always disable Developer Mode when not actively developing or testing. Function Dependencies Many developer functions require specific permissions and access levels: Script Properties Access - Required for most configuration functions Sheet Write Access - Required for repair and modification functions Trigger Management - Required for trigger installation/removal System Data Access - Required for diagnostic and testing functions Performance Considerations Large Dataset Impact - Some functions may take several minutes on large datasets Resource Usage - Performance testing functions may consume significant resources Concurrent Usage - Avoid running multiple performance tests simultaneously Troubleshooting If developer functions are not working: Check Developer Mode - Ensure Developer Mode is enabled Verify Permissions - Ensure you have necessary script permissions Check Dependencies - Verify all required system components are available Review Console - Check browser console for error messages Test Individually - Run functions one at a time to isolate issues \ud83d\udcda Related Documentation Menu Reference - Complete menu system overview Troubleshooting Guide - Common issues and solutions EOY Developer Guide - End of Year development System Changelog - System changes and updates","title":"Developer Menu"},{"location":"guides/system/developer-menu/#developer-menu-reference","text":"The Developer menu is only available when Developer Mode is enabled. To enable Developer Mode, go to \u2139\ufe0f Help > Toggle Developer Mode . Developer Mode Warning: Developer mode bypasses critical safety checks and should only be used for development and testing purposes. Always disable Developer Mode for normal budget operations.","title":"Developer Menu Reference"},{"location":"guides/system/developer-menu/#developer-menu-overview","text":"The Developer menu provides access to advanced system tools, debugging utilities, and legacy functions. It's organized into several submenus for easy navigation: Dev Mode - Developer mode controls System Status - System configuration management Triggers - Google Apps Script trigger management Integrity Checker - System validation and repair tools Testing Tools - Development testing utilities Debug Tools - Diagnostic and debugging functions Legacy - Legacy system tools and advanced testing","title":"\ud83d\udee0\ufe0f Developer Menu Overview"},{"location":"guides/system/developer-menu/#dev-mode-controls","text":"- Function: checkDevMode() - **Purpose:** Display current developer mode status - **When to Use:** Verify if developer mode is active - **Output:** Shows current DEV_MODE property value - **Dependencies:** None - Function: enableDevMode() - **Purpose:** Turn on developer mode - **When to Use:** When you need access to developer tools - **Effect:** Enables all developer menu functions - **Dependencies:** Script properties access - Function: disableDevMode() - **Purpose:** Turn off developer mode - **When to Use:** After completing development work - **Effect:** Disables developer menu access - **Dependencies:** Script properties access","title":"\ud83d\udd27 Dev Mode Controls"},{"location":"guides/system/developer-menu/#system-status","text":"- Function: checkMasterStatus() - **Purpose:** Verify if current spreadsheet is the master - **When to Use:** Before performing master-only operations - **Output:** Shows IS_MASTER property and related status - **Dependencies:** Script properties access - Function: setAsMaster() - **Purpose:** Mark current spreadsheet as the master - **When to Use:** When setting up a new master spreadsheet - **Effect:** Sets IS_MASTER property to true - **Dependencies:** Script properties access - **Warning:** Only use on the intended master spreadsheet","title":"\ud83d\udcca System Status"},{"location":"guides/system/developer-menu/#triggers","text":"- Function: installOnEditTrigger() - **Purpose:** Set up automatic edit detection - **When to Use:** When automatic processing is needed - **Effect:** Creates onEdit trigger for automatic processing - **Dependencies:** Trigger creation permissions - Function: removeOnEditTrigger() - **Purpose:** Remove automatic edit detection - **When to Use:** When automatic processing is not needed - **Effect:** Deletes existing onEdit trigger - **Dependencies:** Trigger management permissions","title":"\u2699\ufe0f Triggers"},{"location":"guides/system/developer-menu/#integrity-checker","text":"- Function: runComprehensiveIntegrityCheck() - **Purpose:** Full system validation and health check - **When to Use:** When investigating system issues or before major changes - **Output:** Detailed report of system integrity status - **Dependencies:** Access to all system sheets - **Duration:** May take several minutes for large datasets - Function: quickIntegrityCheck() - **Purpose:** Fast validation check for common issues - **When to Use:** Regular system health monitoring - **Output:** Quick summary of critical issues - **Dependencies:** Basic sheet access - **Duration:** Usually completes in under 30 seconds - Function: fixCorruptedFormulas() - **Purpose:** Repair broken or corrupted formulas - **When to Use:** When formulas are not calculating correctly - **Effect:** Attempts to repair identified formula issues - **Dependencies:** Write access to sheets with formulas - **Warning:** Creates backup before making changes","title":"\ud83d\udee1\ufe0f Integrity Checker"},{"location":"guides/system/developer-menu/#testing-tools","text":"- Function: resetMonthStatuses() - **Purpose:** Reset month processing statuses - **When to Use:** When month statuses are corrupted or incorrect - **Effect:** Resets all month status flags to default state - **Dependencies:** Write access to month status ranges - **Warning:** May affect month processing workflow - Function: validateScriptProperties() - **Purpose:** Check script properties for consistency - **When to Use:** When system behavior is unexpected - **Output:** Report of script properties and their values - **Dependencies:** Script properties access","title":"\ud83e\uddea Testing Tools"},{"location":"guides/system/developer-menu/#debug-tools","text":"- Function: verifyNamedRanges() - **Purpose:** Check spreadsheet named ranges - **When to Use:** When named ranges are not working correctly - **Output:** Complete list of all named ranges and their status - **Dependencies:** Named ranges access - Function: viewStoredMappings() - **Purpose:** Check stored bank configurations - **When to Use:** When import mappings are not working - **Output:** Display of all stored bank import mappings - **Dependencies:** Stored mappings access - Function: showImportHistory() - **Purpose:** View transaction import history - **When to Use:** When investigating import issues - **Output:** List of recent imports with timestamps and details - **Dependencies:** Import history data access - Function: cleanupActiveFlagInconsistencies() - **Purpose:** Manually sync category active status - **When to Use:** When ACTIVE flags are out of sync - **Effect:** Synchronizes ACTIVE flags across all categories - **Dependencies:** Category data access - Function: debugIncomeBudgetStatus() - **Purpose:** Debug income budget calculations - **When to Use:** When income budget calculations are incorrect - **Output:** Detailed analysis of income budget status - **Dependencies:** Income budget data access","title":"\ud83d\udc1b Debug Tools"},{"location":"guides/system/developer-menu/#legacy-menu","text":"The Legacy menu contains advanced developer tools and legacy system functions organized into specialized submenus.","title":"\ud83c\udfdb\ufe0f Legacy Menu"},{"location":"guides/system/developer-menu/#legacy-system-cleanup","text":"- Function: findLegacyNamedRanges() - **Purpose:** Identify legacy named ranges from old system - **When to Use:** During system cleanup or migration - **Output:** List of legacy named ranges that can be removed - **Dependencies:** Named ranges access - Function: getLegacyCleanupInstructions() - **Purpose:** Get step-by-step cleanup instructions - **When to Use:** When removing legacy system components - **Output:** Detailed instructions for legacy system removal - **Dependencies:** None","title":"Legacy System Cleanup"},{"location":"guides/system/developer-menu/#cross-year-detection","text":"- Function: testCrossYearDetection() - **Purpose:** Test cross-year duplicate detection system - **When to Use:** When testing or debugging cross-year functionality - **Output:** Test results and diagnostic information - **Dependencies:** Cross-year detection system - Function: quickDiagnoseCrossYearIssue() - **Purpose:** Quick diagnostic for cross-year issues - **When to Use:** When cross-year detection is not working - **Output:** Quick diagnosis of cross-year detection problems - **Dependencies:** Cross-year detection system - Function: showCrossYearDetectionInfo() - **Purpose:** Display cross-year detection information - **When to Use:** When understanding cross-year system status - **Output:** Information about cross-year detection configuration - **Dependencies:** Cross-year detection system - Function: debugArchiveFileDetection() - **Purpose:** Debug archive file detection - **When to Use:** When archive file detection is failing - **Output:** Debug information about archive file detection - **Dependencies:** Archive system access - Function: createMissingNamedRanges() - **Purpose:** Create missing named ranges required by the system - **When to Use:** When functions fail due to missing named ranges - **Output:** Creates BudgetStartDate and other critical named ranges - **Dependencies:** Maintain Budget sheet access","title":"Cross-Year Detection"},{"location":"guides/system/developer-menu/#advanced-testing","text":"- Function: testIntegrityChecker() - **Purpose:** Test integrity checker functionality - **When to Use:** When testing integrity checker system - **Output:** Test results for integrity checker - **Dependencies:** Integrity checker system access - Function: testCommitmentValidation() - **Purpose:** Test commitment validation system - **When to Use:** When testing commitment validation - **Output:** Test results for commitment validation - **Dependencies:** Commitment system access","title":"Advanced Testing"},{"location":"guides/system/developer-menu/#debug-diagnostics","text":"- Function: debugTemplateCheck() - **Purpose:** Debug template checking functionality - **When to Use:** When template checking is not working - **Output:** Debug information about template checking - **Dependencies:** Template system access - Function: debugTemplateComprehensive() - **Purpose:** Comprehensive template debugging - **When to Use:** When detailed template debugging is needed - **Output:** Comprehensive debug information about templates - **Dependencies:** Template system access - Function: debugAccounts() - **Purpose:** Debug account mapping functionality - **When to Use:** When account mapping is not working - **Output:** Debug information about account mapping - **Dependencies:** Account mapping system access - Function: debugAnnualBudgetCategories() - **Purpose:** Debug Annual Budget categories - **When to Use:** When Annual Budget categories have issues - **Output:** Debug information about Annual Budget categories - **Dependencies:** Annual Budget access","title":"Debug &amp; Diagnostics"},{"location":"guides/system/developer-menu/#performance-testing","text":"- Function: testSheetAccessPerformance() - **Purpose:** Test sheet access performance and identify bottlenecks - **When to Use:** When investigating performance issues - **Output:** Detailed performance metrics for sheet access operations - **Dependencies:** Access to all system sheets - **Example Output:** ``` Get spreadsheet: 1ms Get Cash Flow sheet: 457ms Get Cash Flow data range: 200ms Get Cash Flow values: 105ms Total Sheet Access Time: 1223ms ``` - Function: testReconciliationDateUpdateDetailed() - **Purpose:** Test reconciliation date update performance - **When to Use:** When reconciliation updates are slow - **Output:** Performance metrics for reconciliation updates - **Dependencies:** Reconciliation system access - Function: testLoanParticipants() - **Purpose:** Test loan participants loading performance - **When to Use:** When loan participant loading is slow - **Output:** Performance metrics for loan participant loading - **Dependencies:** Loan system access - Function: testLoanCategories() - **Purpose:** Test loan category handling performance - **When to Use:** When loan category operations are slow - **Output:** Performance metrics for loan category operations - **Dependencies:** Loan system access","title":"Performance Testing"},{"location":"guides/system/developer-menu/#important-notes","text":"","title":"\ud83d\udea8 Important Notes"},{"location":"guides/system/developer-menu/#developer-mode-safety","text":"Critical Safety Warning: Developer mode bypasses important safety checks and validation. Always disable Developer Mode when not actively developing or testing.","title":"Developer Mode Safety"},{"location":"guides/system/developer-menu/#function-dependencies","text":"Many developer functions require specific permissions and access levels: Script Properties Access - Required for most configuration functions Sheet Write Access - Required for repair and modification functions Trigger Management - Required for trigger installation/removal System Data Access - Required for diagnostic and testing functions","title":"Function Dependencies"},{"location":"guides/system/developer-menu/#performance-considerations","text":"Large Dataset Impact - Some functions may take several minutes on large datasets Resource Usage - Performance testing functions may consume significant resources Concurrent Usage - Avoid running multiple performance tests simultaneously","title":"Performance Considerations"},{"location":"guides/system/developer-menu/#troubleshooting","text":"If developer functions are not working: Check Developer Mode - Ensure Developer Mode is enabled Verify Permissions - Ensure you have necessary script permissions Check Dependencies - Verify all required system components are available Review Console - Check browser console for error messages Test Individually - Run functions one at a time to isolate issues","title":"Troubleshooting"},{"location":"guides/system/developer-menu/#related-documentation","text":"Menu Reference - Complete menu system overview Troubleshooting Guide - Common issues and solutions EOY Developer Guide - End of Year development System Changelog - System changes and updates","title":"\ud83d\udcda Related Documentation"},{"location":"guides/system/version/","text":"Version Information Current Version Version: 3.0.0 Release Date: January 4, 2025 Status: Production Release Release Type: Major Version What's New in 3.0.0 (Production Release) \ud83c\udf89 Major System Enhancement ACTIVE Flag System - Robust synchronization and automatic management Enhanced Data Integrity - Comprehensive safety checks and validations Improved User Workflows - Better guidance and safety warnings Complete Documentation - Fully synchronized with current system Major Features ACTIVE Flag Synchronization - \"Distribution is the Gatekeeper\" approach Enhanced Deletion Safety - Prevents deletion of items with reconciled transactions Budget Distribution Validation - Balance checking and zero-budget prevention Comprehensive Safety Checks - Proper column mappings and validations Data Integrity Improvements Manual Deletion Prevention - Clear warnings and proper workflow guidance Balance Consistency - Validates budget balance before distribution ACTIVE Flag Management - Automatic synchronization after distribution Enhanced Error Handling - Better validation and user feedback User Experience Updated Documentation - Complete synchronization with current system Enhanced Workflow Guides - Current system information and safety warnings Better Menu Structure - Updated menu references and functions Improved Safety - Clear warnings about manual deletion issues System Requirements Google Apps Script Environment Google Sheets - Latest version Google Apps Script - Current runtime Browser Support - Modern browsers (Chrome, Firefox, Safari, Edge) Spreadsheet Requirements Named Ranges - Properly configured named ranges Sheet Structure - Required sheets present and accessible Permissions - Script execution permissions granted Version History 3.0.0 (Current - Production Release) ACTIVE Flag System Enhancement - Robust synchronization and management Enhanced Deletion Safety - Comprehensive safety checks and validations Budget Distribution Validation - Balance checking and zero-budget prevention Documentation Overhaul - Complete synchronization with current system Manual Workflow Guide Update - Current system information and safety warnings 2.0.0 (Previous - Production Release) Production Milestone - Complete system ready for production EOY Process Redesign - Simplified 4-step process Menu System Update - New emoji-based menu structure Performance Optimization - Faster loading and processing Documentation Overhaul - Comprehensive user guides 1.0.36 (Previous) Development Version - Pre-production development Core Functionality - Basic budget system features Testing Phase - System validation and testing Update Process Automatic Updates Google Apps Script - Updates automatically when deployed Spreadsheet Structure - Manual updates may be required Documentation - Updated via Mintlify deployment Manual Updates Check Version - Click \u2139\ufe0f Help > About (Version Info) Review Changes - Read update notes Test Functionality - Verify key features work Update Documentation - Review new guides Feature Status Core Features - Bank transaction import - Manual entry support - Duplicate detection - Column mapping - Side-by-side dashboard - Auto-matching - Split transactions - Bulk operations - Category hierarchy - Status tracking - Bulk operations - Import templates - End of month process - Status tracking - Format management - Year transitions Advanced Features - 4-step setup process - Automatic archiving - Balance verification - Year transitions - Performance diagnostics - Debug tools - Testing capabilities - System monitoring Production Readiness \u2705 Production Checklist [x] Core Functionality - All essential features working [x] Error Handling - Comprehensive error management [x] Documentation - Complete user guides [x] Testing - System thoroughly tested [x] Performance - Optimized for production use [x] Security - Proper authorization handling [x] Backup - Data protection measures [x] Support - Troubleshooting guides available Production Support User Documentation - Comprehensive guides for all features Troubleshooting - Common issues and solutions Performance Monitoring - Built-in diagnostics Error Recovery - Graceful error handling Known Issues Current Limitations Large Datasets - Performance may slow with 1000+ transactions Complex Splits - Very complex split transactions may need manual handling Browser Compatibility - Some features may vary across browsers Planned Improvements Pagination - For large transaction datasets Advanced Analytics - Enhanced reporting capabilities Mobile Support - Better mobile device compatibility API Integration - Direct bank API connections Support Information Getting Help User Manual - Comprehensive documentation Troubleshooting Guide - Common issues and solutions Developer Mode - Advanced debugging tools Performance Diagnostics - System health monitoring Contact Information Documentation - Available at docs.budget-app.com Issues - Report via documentation feedback Feature Requests - Submit through documentation Migration Notes From Previous Versions Menu Changes - New emoji-based menu structure EOY Process - Simplified 4-step workflow Category System - Enhanced status tracking Performance - Improved loading times Data Compatibility Backward Compatible - Existing data preserved Automatic Migration - No manual migration required Feature Flags - Gradual feature rollout This is the first production release (2.0.0) marking the completion of the budget system development phase.","title":"Version"},{"location":"guides/system/version/#version-information","text":"","title":"Version Information"},{"location":"guides/system/version/#current-version","text":"Version: 3.0.0 Release Date: January 4, 2025 Status: Production Release Release Type: Major Version","title":"Current Version"},{"location":"guides/system/version/#whats-new-in-300-production-release","text":"","title":"What's New in 3.0.0 (Production Release)"},{"location":"guides/system/version/#major-system-enhancement","text":"ACTIVE Flag System - Robust synchronization and automatic management Enhanced Data Integrity - Comprehensive safety checks and validations Improved User Workflows - Better guidance and safety warnings Complete Documentation - Fully synchronized with current system","title":"\ud83c\udf89 Major System Enhancement"},{"location":"guides/system/version/#major-features","text":"ACTIVE Flag Synchronization - \"Distribution is the Gatekeeper\" approach Enhanced Deletion Safety - Prevents deletion of items with reconciled transactions Budget Distribution Validation - Balance checking and zero-budget prevention Comprehensive Safety Checks - Proper column mappings and validations","title":"Major Features"},{"location":"guides/system/version/#data-integrity-improvements","text":"Manual Deletion Prevention - Clear warnings and proper workflow guidance Balance Consistency - Validates budget balance before distribution ACTIVE Flag Management - Automatic synchronization after distribution Enhanced Error Handling - Better validation and user feedback","title":"Data Integrity Improvements"},{"location":"guides/system/version/#user-experience","text":"Updated Documentation - Complete synchronization with current system Enhanced Workflow Guides - Current system information and safety warnings Better Menu Structure - Updated menu references and functions Improved Safety - Clear warnings about manual deletion issues","title":"User Experience"},{"location":"guides/system/version/#system-requirements","text":"","title":"System Requirements"},{"location":"guides/system/version/#google-apps-script-environment","text":"Google Sheets - Latest version Google Apps Script - Current runtime Browser Support - Modern browsers (Chrome, Firefox, Safari, Edge)","title":"Google Apps Script Environment"},{"location":"guides/system/version/#spreadsheet-requirements","text":"Named Ranges - Properly configured named ranges Sheet Structure - Required sheets present and accessible Permissions - Script execution permissions granted","title":"Spreadsheet Requirements"},{"location":"guides/system/version/#version-history","text":"","title":"Version History"},{"location":"guides/system/version/#300-current-production-release","text":"ACTIVE Flag System Enhancement - Robust synchronization and management Enhanced Deletion Safety - Comprehensive safety checks and validations Budget Distribution Validation - Balance checking and zero-budget prevention Documentation Overhaul - Complete synchronization with current system Manual Workflow Guide Update - Current system information and safety warnings","title":"3.0.0 (Current - Production Release)"},{"location":"guides/system/version/#200-previous-production-release","text":"Production Milestone - Complete system ready for production EOY Process Redesign - Simplified 4-step process Menu System Update - New emoji-based menu structure Performance Optimization - Faster loading and processing Documentation Overhaul - Comprehensive user guides","title":"2.0.0 (Previous - Production Release)"},{"location":"guides/system/version/#1036-previous","text":"Development Version - Pre-production development Core Functionality - Basic budget system features Testing Phase - System validation and testing","title":"1.0.36 (Previous)"},{"location":"guides/system/version/#update-process","text":"","title":"Update Process"},{"location":"guides/system/version/#automatic-updates","text":"Google Apps Script - Updates automatically when deployed Spreadsheet Structure - Manual updates may be required Documentation - Updated via Mintlify deployment","title":"Automatic Updates"},{"location":"guides/system/version/#manual-updates","text":"Check Version - Click \u2139\ufe0f Help > About (Version Info) Review Changes - Read update notes Test Functionality - Verify key features work Update Documentation - Review new guides","title":"Manual Updates"},{"location":"guides/system/version/#feature-status","text":"","title":"Feature Status"},{"location":"guides/system/version/#core-features","text":"- Bank transaction import - Manual entry support - Duplicate detection - Column mapping - Side-by-side dashboard - Auto-matching - Split transactions - Bulk operations - Category hierarchy - Status tracking - Bulk operations - Import templates - End of month process - Status tracking - Format management - Year transitions","title":"Core Features"},{"location":"guides/system/version/#advanced-features","text":"- 4-step setup process - Automatic archiving - Balance verification - Year transitions - Performance diagnostics - Debug tools - Testing capabilities - System monitoring","title":"Advanced Features"},{"location":"guides/system/version/#production-readiness","text":"","title":"Production Readiness"},{"location":"guides/system/version/#production-checklist","text":"[x] Core Functionality - All essential features working [x] Error Handling - Comprehensive error management [x] Documentation - Complete user guides [x] Testing - System thoroughly tested [x] Performance - Optimized for production use [x] Security - Proper authorization handling [x] Backup - Data protection measures [x] Support - Troubleshooting guides available","title":"\u2705 Production Checklist"},{"location":"guides/system/version/#production-support","text":"User Documentation - Comprehensive guides for all features Troubleshooting - Common issues and solutions Performance Monitoring - Built-in diagnostics Error Recovery - Graceful error handling","title":"Production Support"},{"location":"guides/system/version/#known-issues","text":"","title":"Known Issues"},{"location":"guides/system/version/#current-limitations","text":"Large Datasets - Performance may slow with 1000+ transactions Complex Splits - Very complex split transactions may need manual handling Browser Compatibility - Some features may vary across browsers","title":"Current Limitations"},{"location":"guides/system/version/#planned-improvements","text":"Pagination - For large transaction datasets Advanced Analytics - Enhanced reporting capabilities Mobile Support - Better mobile device compatibility API Integration - Direct bank API connections","title":"Planned Improvements"},{"location":"guides/system/version/#support-information","text":"","title":"Support Information"},{"location":"guides/system/version/#getting-help","text":"User Manual - Comprehensive documentation Troubleshooting Guide - Common issues and solutions Developer Mode - Advanced debugging tools Performance Diagnostics - System health monitoring","title":"Getting Help"},{"location":"guides/system/version/#contact-information","text":"Documentation - Available at docs.budget-app.com Issues - Report via documentation feedback Feature Requests - Submit through documentation","title":"Contact Information"},{"location":"guides/system/version/#migration-notes","text":"","title":"Migration Notes"},{"location":"guides/system/version/#from-previous-versions","text":"Menu Changes - New emoji-based menu structure EOY Process - Simplified 4-step workflow Category System - Enhanced status tracking Performance - Improved loading times","title":"From Previous Versions"},{"location":"guides/system/version/#data-compatibility","text":"Backward Compatible - Existing data preserved Automatic Migration - No manual migration required Feature Flags - Gradual feature rollout This is the first production release (2.0.0) marking the completion of the budget system development phase.","title":"Data Compatibility"},{"location":"guides/troubleshooting/common-issues/","text":"Common Issues & Troubleshooting This guide covers the most common issues you might encounter with the budget system and how to resolve them. Updated to reflect the current system implementation. End of Year Process Issues \u274c \"Balance Check Failed - EOY Process Blocked\" Problem: The system displays a blocking error message preventing you from starting the End of Year process. Error Message: \ud83d\udea8 Balance Check Failed - EOY Process Blocked Critical balance issues found: \u2022 Banks sheet is not balanced (X.XX) \ud83d\udd34 CRITICAL: The End of Year process copies current bank balances to become opening balances for the new fiscal year. \u274c EOY process cannot proceed until all balances are zero. \ud83d\udca1 Tip: Use 'Reconciliation Dashboard' to fix balance issues. Why This Happens: - The system detected that one or more of your balance sheets are not at zero - Banks sheet (named range: banksBalance ) is not balanced - Annual Budget sheet (named range: 'Annual Budget'!budgetBalance ) is not balanced - Maintain Budget sheet (named range: 'Maintain Budget'!maintainBudgetBalance ) is not balanced Solution: 1. First: Update Bank Balances (Critical for EOY): - Go to Banks sheet and update ALL bank account balances - Ensure balances are accurate as at end of financial year (June 30) - Important: Banks often apply monthly interest as a final transaction - Download final statements and enter any end-of-year transactions - Bank balances MUST reflect the true position at fiscal year end Second: Use Reconciliation Dashboard: If bank balances are current but system still unbalanced, the issue is Cash Flow transactions Go to Budget \u2192 Reconciliation Dashboard Missing transactions: Import any transactions not yet in the system Extra transactions: Remove duplicate or incorrect entries Unreconciled transactions: Match transactions to budget categories Work through all unreconciled items until dashboard is clear Verify All Balance Cells: Banks sheet ( banksBalance ): Should show $0.00 when bank balances match Cash Flow Annual Budget sheet ( 'Annual Budget'!budgetBalance ): Should show $0.00 when budget is balanced Maintain Budget sheet ( 'Maintain Budget'!maintainBudgetBalance ): Should show $0.00 when income equals expenses Retry EOY Process: Once all three balance cells show $0.00, retry the EOY process The system will allow you to proceed Why No Override: Unlike End of Month processing, EOY has no \"proceed anyway\" option because incorrect bank balances would be copied to your new fiscal year, corrupting your entire budget foundation. \u274c \"Process Not Available\" (Wrong Month) Problem: EOY menu option is grayed out or shows error message. Error Message: Process Not Available The 'Start End of Year Process' is only available in June, the final month of the fiscal year. Solution: - Wait until June: EOY process is only available during the final fiscal month - Check System Month: Ensure your system month is set to June (6) - Complete Monthly Processing: Finish all End of Month processes through May first \u274c Authorization Failures Problem: Google shows scary warnings during script authorization. What You'll See: - \"Google hasn't verified this app\" - \"The app is requesting access to sensitive info\" - \"Go to Budget App Scripts (unsafe)\" Solution: 1. Don't Panic - This is Google's standard warning for ALL custom scripts 2. Click \"Advanced\" (bottom left of warning dialog) 3. Click \"Go to Budget App Scripts (unsafe)\" - This is safe to do 4. Check \"Select all\" to grant required permissions 5. Click \"Allow\" These warnings are normal! Google shows these warnings for any custom spreadsheet script that isn't published in their official store. Your budget system is completely safe. End of Month Process Issues \u26a0\ufe0f \"Balance Check Failed\" (End of Month) Problem: System warns about balance issues during End of Month processing. Key Difference: End of Month processing allows you to \"proceed anyway\" because monthly imbalances can be corrected later. Solution Options: 1. Fix Balances First (Recommended): - Use Reconciliation Dashboard to resolve issues - Ensures clean monthly processing Proceed Anyway: Click \"Yes\" to continue despite warnings Fix balance issues in subsequent reconciliation Monthly processing is more forgiving than EOY Category Management Issues \u26a0\ufe0f ACTIVE Flag Inconsistencies Problem: Categories show as INACTIVE when they should be ACTIVE, or vice versa. Why This Happens: - Manual changes to the LookUps sheet - Items removed from budget but not properly cleaned up - System synchronization issues Solution: 1. Use Developer Menu (if available): - Go to \ud83d\udee0\ufe0f Developer > Debug Tools > \ud83d\udd04 Re-sync ACTIVE Flags - This will synchronize all category statuses Manual Check: Verify items exist in both Maintain Budget and Annual Budget sheets Ensure budget amounts are greater than zero Check that \"Distributed\" checkbox is checked Prevention: Always use menu functions for category management Don't manually edit the LookUps sheet Use \"Delete Category/Subcategory\" from Maintain Budget menu \u274c Manual Deletion Issues Problem: Balance inconsistencies after manually deleting rows from sheets. Why This Happens: - Manual deletion from Annual Budget or Maintain Budget sheets - Bypasses safety checks and cleanup procedures - Creates inconsistencies between sheets Symptoms: - Maintain Budget shows balanced (0.00) but Annual Budget shows unbalanced - Items exist in one sheet but not the other - ACTIVE flags don't match budget status Solution: 1. Restore the Deleted Item: - Manually add the item back to the appropriate sheet - Use the same category/subcategory name Use Proper Deletion Process: Go to \ud83c\udfe6 Budget > Maintain Budget > \ud83d\uddd1\ufe0f Delete Category/Subcategory This ensures proper cleanup across all sheets Prevention: Never manually delete rows from Annual Budget or Maintain Budget sheets Always use the menu functions for category management The system provides safety checks and proper cleanup Critical: Manual deletion from sheets can cause serious balance inconsistencies. Always use the provided menu functions. Import and Reconciliation Issues \u26a0\ufe0f Cross-Year/Month Duplicate Detection Issues Problem: Transactions appear duplicated across months/years, or cross-year detection doesn't trigger. Root Cause: Banks advance transaction processing dates by 2-7 days, moving transactions from one period to another. Why Cross-Year Detection Fails: - 7-day time window exceeded: Detection only works within 7 days of fiscal year start - Too many existing transactions: System assumes it's not the \"first\" import anymore - Delayed reconciliation: August imports are too late to catch June\u2192July transaction movements Impact: - Balance reconciliation fails: Historical bank balances become incorrect - Manual corrections required: Must visually compare end/start of periods - Zero balance disrupted: Cannot achieve accurate zero balance retrospectively Prevention (CRITICAL): 1. Complete EOY process immediately after June 30 2. Import July transactions within 7 days of fiscal year start 3. Reconcile monthly within 1 week of month end 4. Update bank balances immediately before month/year-end processing Recovery Solutions: 1. Visual comparison: Compare last 7 days of previous period with first 7 days of current period 2. Look for identical amounts and descriptions between periods 3. Manually adjust historical bank balances to restore zero balance 4. Use calculated \"must have been\" balances rather than relying on historical records There is no automated fix for delayed reconciliation - bank date changes invalidate historical data integrity. Prevention through timely processing is the only reliable solution. \u274c Bank Import Failures Problem: Cannot import bank transactions or import maps incorrectly. Common Causes: - Changed bank file format - Missing column mappings - Incorrect file type (CSV vs PDF) Solutions: 1. Check File Format: - Ensure using correct file type for your bank - Most banks require CSV format - Some banks only provide PDF (requires manual entry) Update Column Mappings: Go to import settings Verify column mappings match your bank's format Update mappings if bank changed their export format Clear Previous Mappings: Use \"Clear Stored Mappings\" in debug menu Re-configure mappings from scratch \u274c Reconciliation Dashboard Issues Problem: Transactions not appearing or reconciliation not working. Solutions: 1. Refresh Data: - Close and reopen Reconciliation Dashboard - Reload spreadsheet if needed Check Transaction Dates: Ensure transactions are in correct date range Verify date format is correct Verify Categories: Ensure budget categories exist Check for typos in category names Performance Issues \ud83d\udc0c Slow Processing Problem: EOY or EOM processes take a long time or seem stuck. Solutions: 1. Be Patient: - EOY process involves copying large amounts of data - Large spreadsheets take longer to process Check Script Execution: Look for \"Running script\" indicator Don't close browser during processing Restart if Stuck: If truly stuck (no progress for 10+ minutes) Refresh browser and try again Process is designed to be resumable Developer Mode \ud83d\udd27 Testing and Development Problem: Need to test processes without perfect balance or access developer tools. Solution: - Enable DEV_MODE using the Help menu - Balance checks are bypassed with console logging - Allows testing of process logic without balance setup - Enables access to Developer menu tools How to Enable: 1. Method 1 (Recommended): Use the Help menu - Go to \u2139\ufe0f Help > Toggle Developer Mode - This enables/disables developer mode Method 2 (Manual): Script properties Go to Extensions \u2192 Apps Script Go to Settings \u2192 Script Properties Add property: DEV_MODE = true Save and refresh spreadsheet Developer Tools Available: - Integrity Checker: Validate system integrity - Debug Tools: Diagnostic utilities - Trigger Management: Manage automatic triggers - System Status: Check configuration Production Use: Always disable DEV_MODE for normal budget operations. It bypasses critical safety checks. Getting Help When to Contact Support If you encounter issues not covered here: Document the Problem: Screenshot error messages Note what you were trying to do Record any console errors (F12 in browser) Check Recent Changes: Did you modify the spreadsheet structure? Were there recent Google Sheets updates? Did you change any formulas? Try Basic Troubleshooting: Refresh the browser Close and reopen the spreadsheet Clear browser cache if needed Emergency Recovery If Your Budget System Breaks: Don't Panic - Your data is preserved Use Archived Copies - Previous versions are automatically saved Check Version History - Google Sheets maintains automatic backups Contact Support - With specific error details The budget system is designed with multiple safety mechanisms. In most cases, issues can be resolved without data loss.","title":"Common Issues"},{"location":"guides/troubleshooting/common-issues/#common-issues-troubleshooting","text":"This guide covers the most common issues you might encounter with the budget system and how to resolve them. Updated to reflect the current system implementation.","title":"Common Issues &amp; Troubleshooting"},{"location":"guides/troubleshooting/common-issues/#end-of-year-process-issues","text":"","title":"End of Year Process Issues"},{"location":"guides/troubleshooting/common-issues/#balance-check-failed-eoy-process-blocked","text":"Problem: The system displays a blocking error message preventing you from starting the End of Year process. Error Message: \ud83d\udea8 Balance Check Failed - EOY Process Blocked Critical balance issues found: \u2022 Banks sheet is not balanced (X.XX) \ud83d\udd34 CRITICAL: The End of Year process copies current bank balances to become opening balances for the new fiscal year. \u274c EOY process cannot proceed until all balances are zero. \ud83d\udca1 Tip: Use 'Reconciliation Dashboard' to fix balance issues. Why This Happens: - The system detected that one or more of your balance sheets are not at zero - Banks sheet (named range: banksBalance ) is not balanced - Annual Budget sheet (named range: 'Annual Budget'!budgetBalance ) is not balanced - Maintain Budget sheet (named range: 'Maintain Budget'!maintainBudgetBalance ) is not balanced Solution: 1. First: Update Bank Balances (Critical for EOY): - Go to Banks sheet and update ALL bank account balances - Ensure balances are accurate as at end of financial year (June 30) - Important: Banks often apply monthly interest as a final transaction - Download final statements and enter any end-of-year transactions - Bank balances MUST reflect the true position at fiscal year end Second: Use Reconciliation Dashboard: If bank balances are current but system still unbalanced, the issue is Cash Flow transactions Go to Budget \u2192 Reconciliation Dashboard Missing transactions: Import any transactions not yet in the system Extra transactions: Remove duplicate or incorrect entries Unreconciled transactions: Match transactions to budget categories Work through all unreconciled items until dashboard is clear Verify All Balance Cells: Banks sheet ( banksBalance ): Should show $0.00 when bank balances match Cash Flow Annual Budget sheet ( 'Annual Budget'!budgetBalance ): Should show $0.00 when budget is balanced Maintain Budget sheet ( 'Maintain Budget'!maintainBudgetBalance ): Should show $0.00 when income equals expenses Retry EOY Process: Once all three balance cells show $0.00, retry the EOY process The system will allow you to proceed Why No Override: Unlike End of Month processing, EOY has no \"proceed anyway\" option because incorrect bank balances would be copied to your new fiscal year, corrupting your entire budget foundation.","title":"\u274c \"Balance Check Failed - EOY Process Blocked\""},{"location":"guides/troubleshooting/common-issues/#process-not-available-wrong-month","text":"Problem: EOY menu option is grayed out or shows error message. Error Message: Process Not Available The 'Start End of Year Process' is only available in June, the final month of the fiscal year. Solution: - Wait until June: EOY process is only available during the final fiscal month - Check System Month: Ensure your system month is set to June (6) - Complete Monthly Processing: Finish all End of Month processes through May first","title":"\u274c \"Process Not Available\" (Wrong Month)"},{"location":"guides/troubleshooting/common-issues/#authorization-failures","text":"Problem: Google shows scary warnings during script authorization. What You'll See: - \"Google hasn't verified this app\" - \"The app is requesting access to sensitive info\" - \"Go to Budget App Scripts (unsafe)\" Solution: 1. Don't Panic - This is Google's standard warning for ALL custom scripts 2. Click \"Advanced\" (bottom left of warning dialog) 3. Click \"Go to Budget App Scripts (unsafe)\" - This is safe to do 4. Check \"Select all\" to grant required permissions 5. Click \"Allow\" These warnings are normal! Google shows these warnings for any custom spreadsheet script that isn't published in their official store. Your budget system is completely safe.","title":"\u274c Authorization Failures"},{"location":"guides/troubleshooting/common-issues/#end-of-month-process-issues","text":"","title":"End of Month Process Issues"},{"location":"guides/troubleshooting/common-issues/#balance-check-failed-end-of-month","text":"Problem: System warns about balance issues during End of Month processing. Key Difference: End of Month processing allows you to \"proceed anyway\" because monthly imbalances can be corrected later. Solution Options: 1. Fix Balances First (Recommended): - Use Reconciliation Dashboard to resolve issues - Ensures clean monthly processing Proceed Anyway: Click \"Yes\" to continue despite warnings Fix balance issues in subsequent reconciliation Monthly processing is more forgiving than EOY","title":"\u26a0\ufe0f \"Balance Check Failed\" (End of Month)"},{"location":"guides/troubleshooting/common-issues/#category-management-issues","text":"","title":"Category Management Issues"},{"location":"guides/troubleshooting/common-issues/#active-flag-inconsistencies","text":"Problem: Categories show as INACTIVE when they should be ACTIVE, or vice versa. Why This Happens: - Manual changes to the LookUps sheet - Items removed from budget but not properly cleaned up - System synchronization issues Solution: 1. Use Developer Menu (if available): - Go to \ud83d\udee0\ufe0f Developer > Debug Tools > \ud83d\udd04 Re-sync ACTIVE Flags - This will synchronize all category statuses Manual Check: Verify items exist in both Maintain Budget and Annual Budget sheets Ensure budget amounts are greater than zero Check that \"Distributed\" checkbox is checked Prevention: Always use menu functions for category management Don't manually edit the LookUps sheet Use \"Delete Category/Subcategory\" from Maintain Budget menu","title":"\u26a0\ufe0f ACTIVE Flag Inconsistencies"},{"location":"guides/troubleshooting/common-issues/#manual-deletion-issues","text":"Problem: Balance inconsistencies after manually deleting rows from sheets. Why This Happens: - Manual deletion from Annual Budget or Maintain Budget sheets - Bypasses safety checks and cleanup procedures - Creates inconsistencies between sheets Symptoms: - Maintain Budget shows balanced (0.00) but Annual Budget shows unbalanced - Items exist in one sheet but not the other - ACTIVE flags don't match budget status Solution: 1. Restore the Deleted Item: - Manually add the item back to the appropriate sheet - Use the same category/subcategory name Use Proper Deletion Process: Go to \ud83c\udfe6 Budget > Maintain Budget > \ud83d\uddd1\ufe0f Delete Category/Subcategory This ensures proper cleanup across all sheets Prevention: Never manually delete rows from Annual Budget or Maintain Budget sheets Always use the menu functions for category management The system provides safety checks and proper cleanup Critical: Manual deletion from sheets can cause serious balance inconsistencies. Always use the provided menu functions.","title":"\u274c Manual Deletion Issues"},{"location":"guides/troubleshooting/common-issues/#import-and-reconciliation-issues","text":"","title":"Import and Reconciliation Issues"},{"location":"guides/troubleshooting/common-issues/#cross-yearmonth-duplicate-detection-issues","text":"Problem: Transactions appear duplicated across months/years, or cross-year detection doesn't trigger. Root Cause: Banks advance transaction processing dates by 2-7 days, moving transactions from one period to another. Why Cross-Year Detection Fails: - 7-day time window exceeded: Detection only works within 7 days of fiscal year start - Too many existing transactions: System assumes it's not the \"first\" import anymore - Delayed reconciliation: August imports are too late to catch June\u2192July transaction movements Impact: - Balance reconciliation fails: Historical bank balances become incorrect - Manual corrections required: Must visually compare end/start of periods - Zero balance disrupted: Cannot achieve accurate zero balance retrospectively Prevention (CRITICAL): 1. Complete EOY process immediately after June 30 2. Import July transactions within 7 days of fiscal year start 3. Reconcile monthly within 1 week of month end 4. Update bank balances immediately before month/year-end processing Recovery Solutions: 1. Visual comparison: Compare last 7 days of previous period with first 7 days of current period 2. Look for identical amounts and descriptions between periods 3. Manually adjust historical bank balances to restore zero balance 4. Use calculated \"must have been\" balances rather than relying on historical records There is no automated fix for delayed reconciliation - bank date changes invalidate historical data integrity. Prevention through timely processing is the only reliable solution.","title":"\u26a0\ufe0f Cross-Year/Month Duplicate Detection Issues"},{"location":"guides/troubleshooting/common-issues/#bank-import-failures","text":"Problem: Cannot import bank transactions or import maps incorrectly. Common Causes: - Changed bank file format - Missing column mappings - Incorrect file type (CSV vs PDF) Solutions: 1. Check File Format: - Ensure using correct file type for your bank - Most banks require CSV format - Some banks only provide PDF (requires manual entry) Update Column Mappings: Go to import settings Verify column mappings match your bank's format Update mappings if bank changed their export format Clear Previous Mappings: Use \"Clear Stored Mappings\" in debug menu Re-configure mappings from scratch","title":"\u274c Bank Import Failures"},{"location":"guides/troubleshooting/common-issues/#reconciliation-dashboard-issues","text":"Problem: Transactions not appearing or reconciliation not working. Solutions: 1. Refresh Data: - Close and reopen Reconciliation Dashboard - Reload spreadsheet if needed Check Transaction Dates: Ensure transactions are in correct date range Verify date format is correct Verify Categories: Ensure budget categories exist Check for typos in category names","title":"\u274c Reconciliation Dashboard Issues"},{"location":"guides/troubleshooting/common-issues/#performance-issues","text":"","title":"Performance Issues"},{"location":"guides/troubleshooting/common-issues/#slow-processing","text":"Problem: EOY or EOM processes take a long time or seem stuck. Solutions: 1. Be Patient: - EOY process involves copying large amounts of data - Large spreadsheets take longer to process Check Script Execution: Look for \"Running script\" indicator Don't close browser during processing Restart if Stuck: If truly stuck (no progress for 10+ minutes) Refresh browser and try again Process is designed to be resumable","title":"\ud83d\udc0c Slow Processing"},{"location":"guides/troubleshooting/common-issues/#developer-mode","text":"","title":"Developer Mode"},{"location":"guides/troubleshooting/common-issues/#testing-and-development","text":"Problem: Need to test processes without perfect balance or access developer tools. Solution: - Enable DEV_MODE using the Help menu - Balance checks are bypassed with console logging - Allows testing of process logic without balance setup - Enables access to Developer menu tools How to Enable: 1. Method 1 (Recommended): Use the Help menu - Go to \u2139\ufe0f Help > Toggle Developer Mode - This enables/disables developer mode Method 2 (Manual): Script properties Go to Extensions \u2192 Apps Script Go to Settings \u2192 Script Properties Add property: DEV_MODE = true Save and refresh spreadsheet Developer Tools Available: - Integrity Checker: Validate system integrity - Debug Tools: Diagnostic utilities - Trigger Management: Manage automatic triggers - System Status: Check configuration Production Use: Always disable DEV_MODE for normal budget operations. It bypasses critical safety checks.","title":"\ud83d\udd27 Testing and Development"},{"location":"guides/troubleshooting/common-issues/#getting-help","text":"","title":"Getting Help"},{"location":"guides/troubleshooting/common-issues/#when-to-contact-support","text":"If you encounter issues not covered here: Document the Problem: Screenshot error messages Note what you were trying to do Record any console errors (F12 in browser) Check Recent Changes: Did you modify the spreadsheet structure? Were there recent Google Sheets updates? Did you change any formulas? Try Basic Troubleshooting: Refresh the browser Close and reopen the spreadsheet Clear browser cache if needed","title":"When to Contact Support"},{"location":"guides/troubleshooting/common-issues/#emergency-recovery","text":"If Your Budget System Breaks: Don't Panic - Your data is preserved Use Archived Copies - Previous versions are automatically saved Check Version History - Google Sheets maintains automatic backups Contact Support - With specific error details The budget system is designed with multiple safety mechanisms. In most cases, issues can be resolved without data loss.","title":"Emergency Recovery"},{"location":"guides/troubleshooting/using-ai-help/","text":"","title":"Using AI Help"},{"location":"guides/user-manual/basic-operations/","text":"Basic Operations These are the fundamental operations you'll perform regularly in the Budget System. Master these for effective budget management. Updated to reflect current system implementation. Importing Transactions 1. Download your bank statement (CSV format preferred) 2. Open the Import Wizard - Click \"\ud83c\udfe6 Budget > Import Bank Transactions\" 3. Select your bank's format - Choose from available templates 4. Map Columns (if needed) - Match bank columns to system fields 5. Review & Import - Check for duplicates and verify amounts 6. Confirm import - System will show import summary Best Practices: - Import weekly to stay current - Always check for duplicates (system has automatic detection) - Verify account mappings before import - Use cross-year duplicate detection for year-end imports Transaction Reconciliation 1. Click \"\ud83c\udfe6 Budget > Reconciliation Dashboard\" 2. Review unreconciled transactions 3. Sort by date if needed 4. Use filters to focus on specific accounts or date ranges For each transaction: - Match to bank record - Verify category/subcategory assignment - Check split transactions - Mark as reconciled when complete - Use bulk reconciliation for multiple items 1. Select transaction to split 2. Enter split amounts 3. Assign categories to each part 4. Verify total matches original amount 5. Save split configuration Always reconcile before running month-end processes. Unreconciled transactions can cause balance issues. Monthly Processing - All transactions categorized and reconciled - Splits balanced correctly - Bank balances verified and current - Budget variances reviewed - Balance indicators checked 1. Verify all transactions reconciled 2. Check balance indicators 3. Run \"\ud83d\udcc5 Period Processing > Run End of Month Process\" 4. Review summary and address any warnings 5. System will hide EOM option after completion Balance Checking: The system will check balances before processing. You can proceed with warnings for monthly processing, but EOY processes require zero balance. Managing Categories Use the proper workflow: 1. Go to \"\ud83c\udfe6 Budget > Maintain Budget > \u2795 Add Category/Subcategory\" 2. Follow the guided workflow 3. System will properly set up the item across all sheets 4. ACTIVE flags will be automatically managed **Important:** Always use the menu function, not manual sheet editing. Critical - Use proper deletion process: 1. Go to \"\ud83c\udfe6 Budget > Maintain Budget > \ud83d\uddd1\ufe0f Delete Category/Subcategory\" 2. System will run safety checks 3. Proper cleanup across all sheets 4. ACTIVE flags updated automatically **Warning:** Never manually delete rows from sheets - this causes balance inconsistencies. ACTIVE Flag System: - Categories are automatically marked ACTIVE when budgeted - Status is synchronized across all sheets - Use \"\ud83d\udd04 Re-sync ACTIVE Flags\" in Developer menu if needed - System prevents deletion of items with reconciled transactions Critical: Always use menu functions for category management. Manual sheet editing can cause serious balance inconsistencies. Budget Distribution 1. Go to Maintain Budget sheet 2. Set budget amount for item 3. Click \"Distribute\" button 4. System validates budget balance 5. ACTIVE flags updated automatically 1. Use \"\u2699\ufe0f Settings > Sheet Settings > Bulk Distribute Items\" 2. System filters items with budget > 0 3. Validates overall budget balance 4. Distributes all eligible items 5. ACTIVE flags synchronized Balance Validation: Distribution requires balanced budget (income = expenses). System will warn if unbalanced but allows override for individual distribution. Next Steps Practice regular imports and reconciliation Use proper category management workflows Understand balance checking requirements Review the Troubleshooting Guide Familiarize yourself with Menu Reference","title":"Operations"},{"location":"guides/user-manual/basic-operations/#basic-operations","text":"These are the fundamental operations you'll perform regularly in the Budget System. Master these for effective budget management. Updated to reflect current system implementation.","title":"Basic Operations"},{"location":"guides/user-manual/basic-operations/#importing-transactions","text":"1. Download your bank statement (CSV format preferred) 2. Open the Import Wizard - Click \"\ud83c\udfe6 Budget > Import Bank Transactions\" 3. Select your bank's format - Choose from available templates 4. Map Columns (if needed) - Match bank columns to system fields 5. Review & Import - Check for duplicates and verify amounts 6. Confirm import - System will show import summary Best Practices: - Import weekly to stay current - Always check for duplicates (system has automatic detection) - Verify account mappings before import - Use cross-year duplicate detection for year-end imports","title":"Importing Transactions"},{"location":"guides/user-manual/basic-operations/#transaction-reconciliation","text":"1. Click \"\ud83c\udfe6 Budget > Reconciliation Dashboard\" 2. Review unreconciled transactions 3. Sort by date if needed 4. Use filters to focus on specific accounts or date ranges For each transaction: - Match to bank record - Verify category/subcategory assignment - Check split transactions - Mark as reconciled when complete - Use bulk reconciliation for multiple items 1. Select transaction to split 2. Enter split amounts 3. Assign categories to each part 4. Verify total matches original amount 5. Save split configuration Always reconcile before running month-end processes. Unreconciled transactions can cause balance issues.","title":"Transaction Reconciliation"},{"location":"guides/user-manual/basic-operations/#monthly-processing","text":"- All transactions categorized and reconciled - Splits balanced correctly - Bank balances verified and current - Budget variances reviewed - Balance indicators checked 1. Verify all transactions reconciled 2. Check balance indicators 3. Run \"\ud83d\udcc5 Period Processing > Run End of Month Process\" 4. Review summary and address any warnings 5. System will hide EOM option after completion Balance Checking: The system will check balances before processing. You can proceed with warnings for monthly processing, but EOY processes require zero balance.","title":"Monthly Processing"},{"location":"guides/user-manual/basic-operations/#managing-categories","text":"Use the proper workflow: 1. Go to \"\ud83c\udfe6 Budget > Maintain Budget > \u2795 Add Category/Subcategory\" 2. Follow the guided workflow 3. System will properly set up the item across all sheets 4. ACTIVE flags will be automatically managed **Important:** Always use the menu function, not manual sheet editing. Critical - Use proper deletion process: 1. Go to \"\ud83c\udfe6 Budget > Maintain Budget > \ud83d\uddd1\ufe0f Delete Category/Subcategory\" 2. System will run safety checks 3. Proper cleanup across all sheets 4. ACTIVE flags updated automatically **Warning:** Never manually delete rows from sheets - this causes balance inconsistencies. ACTIVE Flag System: - Categories are automatically marked ACTIVE when budgeted - Status is synchronized across all sheets - Use \"\ud83d\udd04 Re-sync ACTIVE Flags\" in Developer menu if needed - System prevents deletion of items with reconciled transactions Critical: Always use menu functions for category management. Manual sheet editing can cause serious balance inconsistencies.","title":"Managing Categories"},{"location":"guides/user-manual/basic-operations/#budget-distribution","text":"1. Go to Maintain Budget sheet 2. Set budget amount for item 3. Click \"Distribute\" button 4. System validates budget balance 5. ACTIVE flags updated automatically 1. Use \"\u2699\ufe0f Settings > Sheet Settings > Bulk Distribute Items\" 2. System filters items with budget > 0 3. Validates overall budget balance 4. Distributes all eligible items 5. ACTIVE flags synchronized Balance Validation: Distribution requires balanced budget (income = expenses). System will warn if unbalanced but allows override for individual distribution.","title":"Budget Distribution"},{"location":"guides/user-manual/basic-operations/#next-steps","text":"Practice regular imports and reconciliation Use proper category management workflows Understand balance checking requirements Review the Troubleshooting Guide Familiarize yourself with Menu Reference","title":"Next Steps"},{"location":"guides/user-manual/basic-overview/","text":"Daily Operations This is the basic operations you'll perform regularly in the Budget System. Master these for effective budget management. Workflow 1. Download your bank statements (UBank, NAB, or other banks) 2. Import the bank statements using the Import Wizard 3. Reconcile transactions using the Reconciliation Dashboard 4. Add any missing income or cash expenses 5. Run the end of month process when ready Best Practices - Import weekly to stay current - Always check for duplicates - Verify account mappings before import - Reconcile before month-end Importing Bank Statements Access: \ud83c\udfe6 Budget > Import Bank Transactions ### Method 1: Paste Data 1. **Create new sheet** - Click the + button at the bottom 2. **Copy bank data** - From your bank statement or exported file 3. **Paste into sheet** - Include headers in the paste 4. **Select bank format** - Choose your bank type (NAB, CommBank, etc.) 5. **Review column mapping** - Verify date, amount, description columns 6. **Enter account balance** - Manually enter the statement balance 7. **Set lookback days** - Default 7 days for duplicate detection 8. **Click \"Process Import\"** - Review results and handle duplicates ### Method 2: Manual Entry 1. **Switch to Manual tab** - Click \"Manual Entry\" tab 2. **Add transactions** - Fill in date, amount, description, account, type 3. **Click \"Add Transaction\"** - Add to pending list 4. **Review pending list** - Check all transactions before processing 5. **Click \"Process All\"** - Import all manual transactions ### Duplicate Detection - System automatically checks for duplicates within lookback period - Review potential duplicates before importing - Choose to skip, import selected, or import all Supported Formats: - NAB Credit Card: Date, Amount, Description, Card Number - NAB Bank Account: Date, Amount, Description, Account Number - CommBank: Transaction Date, Debit/Credit Amount, Description, Reference - Other Banks: Flexible format with date, amount, description **Column Mapping:** - System automatically detects common column patterns - Manual adjustment available if needed - Save mappings for future imports Transaction Reconciliation Access: \ud83c\udfe6 Budget > Reconciliation Dashboard ### Opening the Dashboard 1. **Click menu option** - Opens side-by-side transaction view 2. **Review transactions** - Cash Flow (left) vs Bank Records (right) 3. **Check auto-matches** - Green highlighted transactions are auto-matched 4. **Handle unmatched** - Review and categorize unmatched transactions ### Transaction Matching - **Auto-matches:** System matches by amount and date (green highlight) - **Manual matches:** Click \"Find Match\" for unmatched transactions - **Split transactions:** Blue highlighted groups for split transactions - **Bulk reconciliation:** Select multiple transactions for batch processing ### Category Assignment - **Single transactions:** Select category and subcategory - **Split transactions:** Divide amount across multiple categories - **Description editing:** Modify transaction descriptions - **Account verification:** Confirm correct account assignment ### Step-by-Step Process 1. Review auto-matches - Verify green highlighted transactions 2. Reconcile matches - Click \"Reconcile Match\" for verified pairs 3. Handle unmatched - Click \"Add to Cash Flow\" for bank-only transactions 4. Categorize transactions - Assign categories and subcategories 5. Process splits - Handle split transactions with multiple categories 6. Verify balances - Ensure all transactions are accounted for 7. Refresh dashboard - Click refresh to update status ### Split Transactions - **Identify splits:** Look for blue highlighted transaction groups - **Click \"Find Match\"** - Locate corresponding bank transaction - **Divide amount:** Split across multiple categories as needed - **Verify total:** Ensure split amounts equal bank transaction - **Reconcile group:** Click \"Reconcile Match\" for complete split Always reconcile before running month-end processes Monthly Processing - All transactions categorized - Splits balanced correctly - Bank balances verified - Budget variances reviewed - Reconciliation complete 1. Verify all reconciled - Check reconciliation dashboard 2. Run end-of-month - \ud83d\udcc5 Period Processing > Run End of Month Process 3. Confirm month - Verify correct month is being processed 4. Review results - Check copied values and formatting 5. Address warnings - Handle any balance issues Managing Categories - Select from existing options in dropdowns - Use consistent category names - Check subcategory assignments - Verify active/inactive status - Access: \u2699\ufe0f Settings > Sheet Settings > Manage Categories - Add categories: Create new income/expense categories - Edit categories: Modify names and descriptions - Toggle status: Activate/deactivate categories - Add subcategories: Create detailed breakdowns - Keep related items together - Use meaningful, consistent names - Maintain hierarchy (category > subcategory) - Regular cleanup of unused categories Settings and Configuration Manage Import Templates - Configure bank formats - Set account mappings - Save column mappings End of Year Processing - Initialize month statuses (moved to Period Processing > End of Year) - EOY setup and processing workflow - Month tracking system setup Archive Master - Prepare for EOY process - Backup current system - Create new year setup Next Steps Practice regular imports Set up your preferred views Review the Troubleshooting Guide Learn about End of Year Process","title":"Overview"},{"location":"guides/user-manual/basic-overview/#daily-operations","text":"This is the basic operations you'll perform regularly in the Budget System. Master these for effective budget management.","title":"Daily Operations"},{"location":"guides/user-manual/basic-overview/#workflow","text":"1. Download your bank statements (UBank, NAB, or other banks) 2. Import the bank statements using the Import Wizard 3. Reconcile transactions using the Reconciliation Dashboard 4. Add any missing income or cash expenses 5. Run the end of month process when ready Best Practices - Import weekly to stay current - Always check for duplicates - Verify account mappings before import - Reconcile before month-end","title":"Workflow"},{"location":"guides/user-manual/basic-overview/#importing-bank-statements","text":"Access: \ud83c\udfe6 Budget > Import Bank Transactions ### Method 1: Paste Data 1. **Create new sheet** - Click the + button at the bottom 2. **Copy bank data** - From your bank statement or exported file 3. **Paste into sheet** - Include headers in the paste 4. **Select bank format** - Choose your bank type (NAB, CommBank, etc.) 5. **Review column mapping** - Verify date, amount, description columns 6. **Enter account balance** - Manually enter the statement balance 7. **Set lookback days** - Default 7 days for duplicate detection 8. **Click \"Process Import\"** - Review results and handle duplicates ### Method 2: Manual Entry 1. **Switch to Manual tab** - Click \"Manual Entry\" tab 2. **Add transactions** - Fill in date, amount, description, account, type 3. **Click \"Add Transaction\"** - Add to pending list 4. **Review pending list** - Check all transactions before processing 5. **Click \"Process All\"** - Import all manual transactions ### Duplicate Detection - System automatically checks for duplicates within lookback period - Review potential duplicates before importing - Choose to skip, import selected, or import all Supported Formats: - NAB Credit Card: Date, Amount, Description, Card Number - NAB Bank Account: Date, Amount, Description, Account Number - CommBank: Transaction Date, Debit/Credit Amount, Description, Reference - Other Banks: Flexible format with date, amount, description **Column Mapping:** - System automatically detects common column patterns - Manual adjustment available if needed - Save mappings for future imports","title":"Importing Bank Statements"},{"location":"guides/user-manual/basic-overview/#transaction-reconciliation","text":"Access: \ud83c\udfe6 Budget > Reconciliation Dashboard ### Opening the Dashboard 1. **Click menu option** - Opens side-by-side transaction view 2. **Review transactions** - Cash Flow (left) vs Bank Records (right) 3. **Check auto-matches** - Green highlighted transactions are auto-matched 4. **Handle unmatched** - Review and categorize unmatched transactions ### Transaction Matching - **Auto-matches:** System matches by amount and date (green highlight) - **Manual matches:** Click \"Find Match\" for unmatched transactions - **Split transactions:** Blue highlighted groups for split transactions - **Bulk reconciliation:** Select multiple transactions for batch processing ### Category Assignment - **Single transactions:** Select category and subcategory - **Split transactions:** Divide amount across multiple categories - **Description editing:** Modify transaction descriptions - **Account verification:** Confirm correct account assignment ### Step-by-Step Process 1. Review auto-matches - Verify green highlighted transactions 2. Reconcile matches - Click \"Reconcile Match\" for verified pairs 3. Handle unmatched - Click \"Add to Cash Flow\" for bank-only transactions 4. Categorize transactions - Assign categories and subcategories 5. Process splits - Handle split transactions with multiple categories 6. Verify balances - Ensure all transactions are accounted for 7. Refresh dashboard - Click refresh to update status ### Split Transactions - **Identify splits:** Look for blue highlighted transaction groups - **Click \"Find Match\"** - Locate corresponding bank transaction - **Divide amount:** Split across multiple categories as needed - **Verify total:** Ensure split amounts equal bank transaction - **Reconcile group:** Click \"Reconcile Match\" for complete split Always reconcile before running month-end processes","title":"Transaction Reconciliation"},{"location":"guides/user-manual/basic-overview/#monthly-processing","text":"- All transactions categorized - Splits balanced correctly - Bank balances verified - Budget variances reviewed - Reconciliation complete 1. Verify all reconciled - Check reconciliation dashboard 2. Run end-of-month - \ud83d\udcc5 Period Processing > Run End of Month Process 3. Confirm month - Verify correct month is being processed 4. Review results - Check copied values and formatting 5. Address warnings - Handle any balance issues","title":"Monthly Processing"},{"location":"guides/user-manual/basic-overview/#managing-categories","text":"- Select from existing options in dropdowns - Use consistent category names - Check subcategory assignments - Verify active/inactive status - Access: \u2699\ufe0f Settings > Sheet Settings > Manage Categories - Add categories: Create new income/expense categories - Edit categories: Modify names and descriptions - Toggle status: Activate/deactivate categories - Add subcategories: Create detailed breakdowns - Keep related items together - Use meaningful, consistent names - Maintain hierarchy (category > subcategory) - Regular cleanup of unused categories","title":"Managing Categories"},{"location":"guides/user-manual/basic-overview/#settings-and-configuration","text":"Manage Import Templates - Configure bank formats - Set account mappings - Save column mappings End of Year Processing - Initialize month statuses (moved to Period Processing > End of Year) - EOY setup and processing workflow - Month tracking system setup Archive Master - Prepare for EOY process - Backup current system - Create new year setup","title":"Settings and Configuration"},{"location":"guides/user-manual/basic-overview/#next-steps","text":"Practice regular imports Set up your preferred views Review the Troubleshooting Guide Learn about End of Year Process","title":"Next Steps"},{"location":"guides/user-manual/getting-started/","text":"Getting Started with Your Budget System This guide will help you understand the basics of your budget management system. Overview This budget management system helps track expenses, income, and reconcile transactions. Import bank statements and track spending Monitor spending against budget targets Monthly account reconciliation Generate summaries and analysis Access Levels - Import transactions - Reconcile accounts - View reports - Modify budget categories - Run monthly processes - Configure settings Next Steps 1. Review the Menu Reference 2. Learn about Basic Operations 3. Try your first Transaction Import","title":"Starting"},{"location":"guides/user-manual/getting-started/#getting-started-with-your-budget-system","text":"This guide will help you understand the basics of your budget management system.","title":"Getting Started with Your Budget System"},{"location":"guides/user-manual/getting-started/#overview","text":"This budget management system helps track expenses, income, and reconcile transactions. Import bank statements and track spending Monitor spending against budget targets Monthly account reconciliation Generate summaries and analysis","title":"Overview"},{"location":"guides/user-manual/getting-started/#access-levels","text":"- Import transactions - Reconcile accounts - View reports - Modify budget categories - Run monthly processes - Configure settings","title":"Access Levels"},{"location":"guides/user-manual/getting-started/#next-steps","text":"1. Review the Menu Reference 2. Learn about Basic Operations 3. Try your first Transaction Import","title":"Next Steps"},{"location":"guides/user-manual/menu-reference/","text":"Menu Functions Reference All budget functions are organized in the menu bar for easy access. This guide explains each menu and its functions as they currently exist in the system. \ud83c\udfe6 Budget Menu - Access: Click \"\ud83c\udfe6 Budget > Import Bank Transactions\" - Purpose: Import new transactions from bank statements - Features: - Paste data from bank statements - Manual transaction entry - Automatic duplicate detection - Column mapping for different bank formats - Account selection and mapping - Cross-year duplicate detection - Access: Click \"\ud83c\udfe6 Budget > Reconciliation Dashboard\" - Purpose: Match and verify transactions - Features: - Side-by-side transaction comparison - Automatic transaction matching - Split transaction handling - Bulk reconciliation - Category assignment - Performance diagnostics - Access: Click \"\ud83c\udfe6 Budget > Maintain Budget\" - Purpose: Manage budget categories and transactions - Functions: - \ud83d\udccb Maintain Budget Guide: Shows workflow for adding/removing categories - \u2795 Add Category/Subcategory: Add new budget items with proper setup - \ud83d\uddd1\ufe0f Delete Category/Subcategory: Safely remove items with cleanup - \u270f\ufe0f Edit Transaction: Modify existing transactions \ud83d\udcc5 Period Processing Menu - Access: Click \"\ud83d\udcc5 Period Processing > Run End of Month Process\" - Purpose: Close the monthly books and prepare for next month - Requirements: - All transactions reconciled - Categories verified - Balances checked (with option to proceed anyway) - What it does: - Copies Actual values to next month - Updates month formatting - Updates month statuses - Hides EOM option after completion - Validates balance consistency - Access: Click \"\ud83d\udcc5 Period Processing > End of Year\" - Purpose: Complete End of Year setup and processing workflow - Functions: - Start End of Year Process: Begin EOY process (master spreadsheets only) - 1. Run Initial EOY Setup: First setup step - 2. Continue EOY Setup: Second setup step - 3. Finalize EOY Setup: Final setup step - Initialize Month Statuses: Set up month tracking system - Workflow: Start EOY Process \u2192 Steps 1-3 \u2192 Initialize Month Statuses - Note: Only available during June or in new year copies - Features: - Strict balance checking (no override option) - Bank balance validation - Automatic master spreadsheet creation - Guided step-by-step process \u2699\ufe0f Settings Menu - Access: Click \"\u2699\ufe0f Settings > Import Settings\" - Purpose: Configure bank statement import formats - Features: - Manage import templates - Configure bank-specific column mappings - Set duplicate detection rules - Account selection and mapping - Access: Click \"\u2699\ufe0f Settings > Sheet Settings\" - Purpose: Manage budget categories and distribution - Features: - Manage Categories: Add/edit income and expense categories - Bulk Distribute Items: Distribute budget values across months - Sync ACTIVE Flags: Synchronize category active status - Validate ACTIVE Flags: Check category status consistency - Access: Click \"\u2699\ufe0f Settings > Month Management\" - Purpose: Control month processing and status - Features: - Note: Month management functions have been moved to Period Processing > End of Year - Initialize Month Statuses: Now available in Period Processing > End of Year submenu - Access: Click \"\u2699\ufe0f Settings > Advanced Settings\" - Purpose: Master spreadsheet management - Features: - Archive This Master: Archive current master spreadsheet - Note: Only available in master spreadsheets - Critical: Prepares for EOY process \ud83d\udee0\ufe0f Developer Menu (Dev Mode Only) - Access: Click \"\ud83d\udee0\ufe0f Developer > Dev Mode\" - Purpose: Enable/disable development mode - Functions: - Check Dev Mode Status: View current development mode status - Enable Dev Mode: Turn on development features - Disable Dev Mode: Turn off development features - Note: Required for accessing other developer tools - Access: Click \"\ud83d\udee0\ufe0f Developer > System Status\" - Purpose: Check and manage system configuration - Functions: - Check Master Status: Verify master spreadsheet status - Set as Master Spreadsheet: Mark current spreadsheet as master - Access: Click \"\ud83d\udee0\ufe0f Developer > Triggers\" - Purpose: Manage Google Apps Script triggers - Functions: - \ud83d\udd27 Install onEdit Trigger: Set up automatic edit detection - \u274c Remove onEdit Trigger: Remove automatic edit detection - Note: Triggers handle automatic processing - Access: Click \"\ud83d\udee0\ufe0f Developer > Integrity Checker\" - Purpose: Validate system integrity and fix issues - Functions: - Run Comprehensive Check: Full system validation - Quick Integrity Check: Fast validation check - Fix Corrupted Formulas: Repair broken formulas - Access: Click \"\ud83d\udee0\ufe0f Developer > Debug Tools\" - Purpose: Diagnostic and debugging utilities - Functions: - \ud83d\udcca Named Ranges Report: Check spreadsheet named ranges - \ud83d\udc41\ufe0f View Stored Mappings: Check stored bank configurations - \ud83d\udcdc Import History: View transaction import history - \ud83d\udd04 Re-sync ACTIVE Flags: Manually sync category status For detailed information about all Developer menu functions, see the Developer Menu Reference . \u2139\ufe0f Help Menu - Access: Click \"\u2139\ufe0f Help > Online Documentation\" - Purpose: Access comprehensive system documentation - Features: - Complete user manual - Troubleshooting guides - Development documentation - Best practices - Access: Click \"\u2139\ufe0f Help > About (Version Info)\" - Purpose: Check system version and status - Features: - Current version information - System configuration details - Update status - Access: Click \"\u2139\ufe0f Help > Toggle Developer Mode\" - Purpose: Switch between user and developer modes - Note: Enables/disables developer menu access Menu States - All standard menus visible - Full user functionality - Maintain Budget submenu available - Standard workflow processes - Period Processing shows EOY steps - Limited functionality during setup - Guided setup process - Strict balance checking - Minimal menu options - Restore functionality only - Read-only access - No editing capabilities - Additional debug tools - Advanced diagnostics - Trigger management - Integrity checking tools Important Workflow Notes Critical: Always use menu functions for category management. Manual deletion from sheets can cause balance inconsistencies. ACTIVE Flag System: Category active status is automatically managed. Use \"Re-sync ACTIVE Flags\" in Developer menu if needed. Balance Checking: The system validates balances before critical operations. EOY processes require zero balance with no override option. Best Practices Always use \"Delete Category/Subcategory\" from Maintain Budget menu Use \"Add Category/Subcategory\" for proper setup Check balance indicators before running EOY processes Review warning messages carefully Use Developer menu tools for troubleshooting Don't manually delete rows from Annual Budget or Maintain Budget sheets Don't modify sheet structure manually Developer menu only appears when DEV_MODE is enabled","title":"Menu Reference"},{"location":"guides/user-manual/menu-reference/#menu-functions-reference","text":"All budget functions are organized in the menu bar for easy access. This guide explains each menu and its functions as they currently exist in the system.","title":"Menu Functions Reference"},{"location":"guides/user-manual/menu-reference/#budget-menu","text":"- Access: Click \"\ud83c\udfe6 Budget > Import Bank Transactions\" - Purpose: Import new transactions from bank statements - Features: - Paste data from bank statements - Manual transaction entry - Automatic duplicate detection - Column mapping for different bank formats - Account selection and mapping - Cross-year duplicate detection - Access: Click \"\ud83c\udfe6 Budget > Reconciliation Dashboard\" - Purpose: Match and verify transactions - Features: - Side-by-side transaction comparison - Automatic transaction matching - Split transaction handling - Bulk reconciliation - Category assignment - Performance diagnostics - Access: Click \"\ud83c\udfe6 Budget > Maintain Budget\" - Purpose: Manage budget categories and transactions - Functions: - \ud83d\udccb Maintain Budget Guide: Shows workflow for adding/removing categories - \u2795 Add Category/Subcategory: Add new budget items with proper setup - \ud83d\uddd1\ufe0f Delete Category/Subcategory: Safely remove items with cleanup - \u270f\ufe0f Edit Transaction: Modify existing transactions","title":"\ud83c\udfe6 Budget Menu"},{"location":"guides/user-manual/menu-reference/#period-processing-menu","text":"- Access: Click \"\ud83d\udcc5 Period Processing > Run End of Month Process\" - Purpose: Close the monthly books and prepare for next month - Requirements: - All transactions reconciled - Categories verified - Balances checked (with option to proceed anyway) - What it does: - Copies Actual values to next month - Updates month formatting - Updates month statuses - Hides EOM option after completion - Validates balance consistency - Access: Click \"\ud83d\udcc5 Period Processing > End of Year\" - Purpose: Complete End of Year setup and processing workflow - Functions: - Start End of Year Process: Begin EOY process (master spreadsheets only) - 1. Run Initial EOY Setup: First setup step - 2. Continue EOY Setup: Second setup step - 3. Finalize EOY Setup: Final setup step - Initialize Month Statuses: Set up month tracking system - Workflow: Start EOY Process \u2192 Steps 1-3 \u2192 Initialize Month Statuses - Note: Only available during June or in new year copies - Features: - Strict balance checking (no override option) - Bank balance validation - Automatic master spreadsheet creation - Guided step-by-step process","title":"\ud83d\udcc5 Period Processing Menu"},{"location":"guides/user-manual/menu-reference/#settings-menu","text":"- Access: Click \"\u2699\ufe0f Settings > Import Settings\" - Purpose: Configure bank statement import formats - Features: - Manage import templates - Configure bank-specific column mappings - Set duplicate detection rules - Account selection and mapping - Access: Click \"\u2699\ufe0f Settings > Sheet Settings\" - Purpose: Manage budget categories and distribution - Features: - Manage Categories: Add/edit income and expense categories - Bulk Distribute Items: Distribute budget values across months - Sync ACTIVE Flags: Synchronize category active status - Validate ACTIVE Flags: Check category status consistency - Access: Click \"\u2699\ufe0f Settings > Month Management\" - Purpose: Control month processing and status - Features: - Note: Month management functions have been moved to Period Processing > End of Year - Initialize Month Statuses: Now available in Period Processing > End of Year submenu - Access: Click \"\u2699\ufe0f Settings > Advanced Settings\" - Purpose: Master spreadsheet management - Features: - Archive This Master: Archive current master spreadsheet - Note: Only available in master spreadsheets - Critical: Prepares for EOY process","title":"\u2699\ufe0f Settings Menu"},{"location":"guides/user-manual/menu-reference/#developer-menu-dev-mode-only","text":"- Access: Click \"\ud83d\udee0\ufe0f Developer > Dev Mode\" - Purpose: Enable/disable development mode - Functions: - Check Dev Mode Status: View current development mode status - Enable Dev Mode: Turn on development features - Disable Dev Mode: Turn off development features - Note: Required for accessing other developer tools - Access: Click \"\ud83d\udee0\ufe0f Developer > System Status\" - Purpose: Check and manage system configuration - Functions: - Check Master Status: Verify master spreadsheet status - Set as Master Spreadsheet: Mark current spreadsheet as master - Access: Click \"\ud83d\udee0\ufe0f Developer > Triggers\" - Purpose: Manage Google Apps Script triggers - Functions: - \ud83d\udd27 Install onEdit Trigger: Set up automatic edit detection - \u274c Remove onEdit Trigger: Remove automatic edit detection - Note: Triggers handle automatic processing - Access: Click \"\ud83d\udee0\ufe0f Developer > Integrity Checker\" - Purpose: Validate system integrity and fix issues - Functions: - Run Comprehensive Check: Full system validation - Quick Integrity Check: Fast validation check - Fix Corrupted Formulas: Repair broken formulas - Access: Click \"\ud83d\udee0\ufe0f Developer > Debug Tools\" - Purpose: Diagnostic and debugging utilities - Functions: - \ud83d\udcca Named Ranges Report: Check spreadsheet named ranges - \ud83d\udc41\ufe0f View Stored Mappings: Check stored bank configurations - \ud83d\udcdc Import History: View transaction import history - \ud83d\udd04 Re-sync ACTIVE Flags: Manually sync category status For detailed information about all Developer menu functions, see the Developer Menu Reference .","title":"\ud83d\udee0\ufe0f Developer Menu (Dev Mode Only)"},{"location":"guides/user-manual/menu-reference/#i-help-menu","text":"- Access: Click \"\u2139\ufe0f Help > Online Documentation\" - Purpose: Access comprehensive system documentation - Features: - Complete user manual - Troubleshooting guides - Development documentation - Best practices - Access: Click \"\u2139\ufe0f Help > About (Version Info)\" - Purpose: Check system version and status - Features: - Current version information - System configuration details - Update status - Access: Click \"\u2139\ufe0f Help > Toggle Developer Mode\" - Purpose: Switch between user and developer modes - Note: Enables/disables developer menu access","title":"\u2139\ufe0f Help Menu"},{"location":"guides/user-manual/menu-reference/#menu-states","text":"- All standard menus visible - Full user functionality - Maintain Budget submenu available - Standard workflow processes - Period Processing shows EOY steps - Limited functionality during setup - Guided setup process - Strict balance checking - Minimal menu options - Restore functionality only - Read-only access - No editing capabilities - Additional debug tools - Advanced diagnostics - Trigger management - Integrity checking tools","title":"Menu States"},{"location":"guides/user-manual/menu-reference/#important-workflow-notes","text":"Critical: Always use menu functions for category management. Manual deletion from sheets can cause balance inconsistencies. ACTIVE Flag System: Category active status is automatically managed. Use \"Re-sync ACTIVE Flags\" in Developer menu if needed. Balance Checking: The system validates balances before critical operations. EOY processes require zero balance with no override option.","title":"Important Workflow Notes"},{"location":"guides/user-manual/menu-reference/#best-practices","text":"Always use \"Delete Category/Subcategory\" from Maintain Budget menu Use \"Add Category/Subcategory\" for proper setup Check balance indicators before running EOY processes Review warning messages carefully Use Developer menu tools for troubleshooting Don't manually delete rows from Annual Budget or Maintain Budget sheets Don't modify sheet structure manually Developer menu only appears when DEV_MODE is enabled","title":"Best Practices"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/","text":"EOY Process Developer Guide This guide contains technical information for developers who are maintaining or enhancing the End of Year (EOY) process. End users should refer to the End of Year Process Overview and EOY Budget Setup guides instead. Current Implementation Overview The EOY process has been significantly improved from the original design and now features: Key Architectural Features Month-Restricted Access - Process only available in June (final fiscal month) State-Driven Menu System - Menus adapt based on EOY completion status Three-Step Progressive Workflow - Clear progression through setup phases Automated Master Archiving - Previous master automatically archived on completion Comprehensive Verification - Multiple validation checkpoints throughout process User Choice Dialogs - Commitment validation with Fix Now vs Ignore options Draggable Warning Dialogs - Improved user experience for all warning dialogs Core Functions and Files The EOY implementation is primarily contained in src/utility/yearEndBudget.js : Main Entry Points: showYearEndHelp() - Initial help dialog in master spreadsheet setupNewYearBudget() - Step 1: Initial EOY setup continueEOYSetup() - Step 2: Continue configuration and budget update finalizeEOYSetup() - Step 3: Finalization and master archiving Supporting Functions: exportPropertiesToSheet() / importPropertiesFromSheet() - Property management clearTransactionSheets() - Clean Cash Flow and Bank Records sheets copyBankBalancesToOpeningPositions() - Transfer bank balances updateMonthlyHeaders() - Update fiscal year headers across sheets archiveLegacyMaster() - Automatic master archiving validateCommitments() - Check for outstanding commitments checkAllBalances() - Comprehensive balance validation Development and Testing Workflow Critical Development Process When developing and testing the EOY process, you must follow this workflow to ensure you're testing the latest code: Development Phase: Make all script changes in the MASTER spreadsheet Test individual functions using Apps Script editor Push changes using clasp push to update MASTER's script project Testing Phase: Always delete existing test copies before creating new ones Make a fresh copy of MASTER for each test cycle Each copy gets its own Apps Script project with the current code Test the complete EOY process in the fresh copy Issue Resolution: Document any issues found during testing Make fixes in the MASTER spreadsheet Push changes to MASTER using clasp push Delete test copy and create a new one for retesting Critical: Never use old test copies. Each copy has its own script project, and using an old copy will test outdated code, leading to false results and wasted development time. Month Restriction Testing The EOY process includes month validation that restricts access to June only: // In setupNewYearBudget() and showYearEndHelp() const currentMonth = getCurrentMonth(); if (currentMonth && currentMonth.month !== 6) { // Block access with user-friendly message ui.alert(\"Process Not Available\", \"The 'Start End of Year Process' is only available in June...\"); return; } Testing Considerations: - Production: Process only works in June - Development: You may need to temporarily bypass month checking for testing - Test Mode: Use testMode parameters in functions where available State Management and Menu System EOY State Tracking The system uses script properties to track EOY progress: // Key properties for state management - IS_MASTER: \"true\"/\"false\" - Whether spreadsheet is the active master - EOY_SETUP_COMPLETE: \"true\"/\"false\" - Whether EOY setup is finished - EOY_READY_FOR_EOM: \"true\"/\"false\" - Intermediate state during setup - CURRENT_SPREADSHEET_ID: \"{id}\" - Current spreadsheet identifier - MASTER_SPREADSHEET_ID: \"{id}\" - ID of the master spreadsheet Menu State Logic The menu system in onOpen.js adapts based on these states: // In createBasicMenus() if (!isMaster && !eoySetupComplete && !eoyReadyForEom) { // Fresh copy - show only EOY setup options periodMenu.addSubMenu( ui.createMenu(\"End of Year Setup\") .addItem(\"1. Run Initial EOY Setup\", \"setupNewYearBudget\") .addItem(\"2. Continue EOY Setup\", \"continueEOYSetup\") .addItem(\"3. Finalize EOY Setup\", \"finalizeEOYSetup\") ); } State Transitions Fresh Copy Creation: IS_MASTER = false (imported from master) EOY_SETUP_COMPLETE = false EOY_READY_FOR_EOM = false Menu shows only EOY setup options After Initial Setup: Properties updated to reflect progress Menu options remain EOY-focused After Finalization: IS_MASTER = true EOY_SETUP_COMPLETE = true Menu shows normal operational options Technical Implementation Details Commitment Validation System The EOY process now includes a sophisticated commitment validation system that provides user choice rather than blocking: // In endOfMonthProcessing() - commitment validation if (!isDev && !eoyReadyForEom) { const commitmentCheck = validateCommitments(); if (!commitmentCheck.isValid) { // Show user choice dialog instead of blocking const userChoice = ui.alert( \"\u26a0\ufe0f Outstanding Commitments Warning\", `The following commitments have not been met for ${monthNames[currentMonth]} ${currentYear}:\\n\\n` + commitmentCheck.issues.join(\"\\n\") + \"\\n\\n\u26a0\ufe0f WARNING: These commitments are outstanding.\\n\\n\" + \"Choose your action:\\n\" + \"\u2022 NO = Fix Now: Address commitments before EOM processing\\n\" + \"\u2022 YES = Ignore: Proceed with EOM despite outstanding commitments\", ui.ButtonSet.YES_NO ); if (userChoice === ui.Button.NO) { // User chose to fix commitments - block EOM return; } // User chose to ignore - continue with EOM } } Key Features: - Non-blocking Design: Users can choose to proceed despite outstanding commitments - Clear User Interface: Intuitive button mapping (NO = Fix Now, YES = Ignore) - Month/Year Display: Shows correct month and year from script properties - Detailed Issue Reporting: Lists specific commitment problems for user review Improved Dialog System All warning dialogs in the EOY process now use a draggable, user-friendly interface: // Example of draggable dialog implementation function showEOYSetupIncompleteDialog(issues) { const htmlOutput = HtmlService.createHtmlOutput(` <div style=\"font-family: Arial, sans-serif; padding: 20px;\"> <h3>\u26a0\ufe0f EOY Setup Incomplete</h3> <p>The following issues must be resolved before finalization:</p> <ul>${issues.map(issue => `<li>${issue}</li>`).join('')}</ul> <p>Please address these issues and try again.</p> </div> `) .setWidth(500) .setHeight(300); SpreadsheetApp.getUi().showModelessDialog(htmlOutput, \"EOY Setup Incomplete\"); } Benefits: - Better User Experience: Dialogs can be moved and don't block the interface - Consistent Design: All dialogs follow the same visual pattern - Improved Readability: Better formatting and layout for complex information - Non-intrusive: Users can continue working while reviewing dialog content Property Export/Import System The property management system ensures continuity between master and copy: // Export from master to hidden sheet function exportPropertiesToSheet() { const ss = SpreadsheetApp.getActiveSpreadsheet(); let sheet = ss.getSheetByName(\"_Properties\"); if (!sheet) { sheet = ss.insertSheet(\"_Properties\"); sheet.hideSheet(); } const props = PropertiesService.getScriptProperties().getProperties(); // Write properties to sheet for copying } // Import from hidden sheet in new copy function importPropertiesFromSheet() { const ss = SpreadsheetApp.getActiveSpreadsheet(); const sheet = ss.getSheetByName(\"_Properties\"); if (sheet) { // Read properties from sheet and set in new copy // Adjust IS_MASTER to false for new copy } } Verification System Multiple verification points ensure system integrity: Sheet Structure Verification ( validateSheets() ) Verifies all required sheets exist Checks sheet naming conventions Validates critical named ranges Budget Formula Verification ( verifyBudgetSetup() ) Checks Annual Budget formulas Validates Maintain Budget structure Ensures proper formula references Balance Verification (in finalizeEOYSetup() ) Banks sheet: Cell C30 = 0 Annual Budget: Cell B106 = 0 Maintain Budget: Cell E120 = 0 Automatic Master Archiving The archiving system provides automatic legacy master management: function archiveLegacyMaster(spreadsheetId, testMode = false) { try { const targetSS = SpreadsheetApp.openById(spreadsheetId); const fiscalYear = getFiscalYearFromSpreadsheet(targetSS); if (testMode) { // Create test copy for verification return targetSS.copy(`${targetSS.getName()}_ARCHIVED_TEST`); } // Rename with archived suffix const newName = `${targetSS.getName()}_ARCHIVED_FY${fiscalYear}`; targetSS.rename(newName); // Add hidden archive metadata sheet const archiveSheet = targetSS.insertSheet(\"_Archive\"); archiveSheet.hideSheet(); // Set archive metadata archiveSheet.getRange(\"A1\").setValue(\"ARCHIVED_DATE\"); archiveSheet.getRange(\"B1\").setValue(new Date()); archiveSheet.getRange(\"A2\").setValue(\"FORMER_MASTER\"); archiveSheet.getRange(\"B2\").setValue(true); } catch (error) { console.error(\"Error archiving legacy master:\", error); throw error; } } Known Technical Limitations Script Property Isolation Issue: Google Apps Script security model prevents modifying script properties of other spreadsheets. Impact: Archived masters retain IS_MASTER = true in their script properties. Mitigation Strategies: 1. Renamed Title - Archived spreadsheets have clear \"_ARCHIVED_FY{year}\" suffix 2. Archive Metadata - Hidden \"_Archive\" sheet marks archival status 3. User Documentation - Clear guidance to avoid using archived spreadsheets Google Authorization User Experience Issue: Google shows intimidating \"unsafe\" warnings for all custom spreadsheet scripts. Impact: Users may be reluctant to continue authorization due to scary warning language. User Experience Challenges: - \"Google hasn't verified this app\" warning appears threatening - \"Go to Budget App Scripts (unsafe)\" button seems dangerous - Users may abandon the process thinking something is wrong Mitigation Strategies: 1. Clear Documentation - Detailed explanation that warnings are normal 2. Step-by-Step Instructions - Specific guidance through each authorization step 3. Reassurance - Explicit statements that the process is safe and expected Testing and Quality Assurance Comprehensive Testing Checklist Before Testing Session [ ] All changes pushed to MASTER spreadsheet [ ] Old test copies deleted [ ] Fresh copy created from MASTER [ ] Test environment prepared During Testing - Step 1 (Initial Setup) [ ] Month restriction working (if testing in non-June month) [ ] Help dialog displays correctly with documentation links [ ] Property export completes successfully [ ] New copy creation process works [ ] Menu system shows only EOY options in new copy During Testing - Step 2 (Configuration) [ ] Authorization process works smoothly [ ] Verification checks pass for valid setup [ ] Configuration dialog accepts valid inputs [ ] Manual budget update process functions [ ] Budget balance validation works [ ] Continue setup processes correctly During Testing - Step 3 (Finalization) [ ] Final verification checks function properly [ ] Master archiving completes without errors [ ] New copy marked as master successfully [ ] Menu system updates to normal operational mode [ ] All transaction sheets properly cleared [ ] Commitment validation dialogs work correctly [ ] User choice options (Fix Now vs Ignore) function properly Post-Testing Verification [ ] Master functionality works in new spreadsheet [ ] Archived master properly renamed and marked [ ] Historical data preserved in archived master [ ] No script errors in new master [ ] Documentation links work correctly Testing Functions Several helper functions support testing: // Test archiving without affecting production function testArchiveMaster() { const currentId = SpreadsheetApp.getActiveSpreadsheet().getId(); return archiveLegacyMaster(currentId, true); // testMode = true } // Test EOY process with safety checks function testEOYProcess() { console.log(\"Starting EOY test process...\"); return setupNewYearBudget(true); // testMode = true } // Safe refresh function for testing function runRefreshSafely() { try { SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Annual Budget\"); // Additional safety checks } catch (error) { console.error(\"Refresh safety check failed:\", error); } } Performance Considerations Optimization Strategies Minimal Sheet Operations: Batch range operations where possible Avoid excessive individual cell operations Use getValues()/setValues() for bulk operations Property Management: Cache frequently accessed properties Minimize property service calls Use batch property operations Verification Efficiency: Combine multiple checks into single functions Early exit on validation failures Provide specific error messages for quick resolution Resource Management // Example of efficient batch operations function updateMonthlyHeaders() { const sheet = SpreadsheetApp.getActiveSpreadsheet() .getSheetByName(\"Annual Budget\"); // Get all headers in one operation const headerRange = sheet.getRange(1, 1, 1, sheet.getLastColumn()); const headers = headerRange.getValues()[0]; // Process headers in memory const updatedHeaders = headers.map(header => { // Update logic here return processHeader(header); }); // Write all headers back in one operation headerRange.setValues([updatedHeaders]); } Future Enhancement Opportunities Planned Improvements Enhanced Pre-EOY Validation: Automatic verification of balance requirements Account reconciliation status checking Data integrity validation before process start Improved Error Recovery: Process checkpoint system for resuming interrupted operations Better error messages with specific resolution steps Automatic retry mechanisms for transient failures Advanced State Management: More granular progress tracking Session persistence across browser refreshes Better handling of concurrent user access Technical Debt Reduction Script Property Limitation Resolution: Research Google Workspace APIs for property management Implement alternative master tracking systems Develop more robust archiving mechanisms Code Organization: Modularize large functions for better maintainability Implement consistent error handling patterns Add comprehensive inline documentation Testing Infrastructure: Automated testing framework for EOY process Mock data generation for consistent testing Performance benchmarking tools Security and Access Considerations Permission Requirements The EOY process requires specific permissions: - Script execution in both master and new copy - Spreadsheet access for reading/writing operations - File creation for making copies - Property management for state tracking Security Best Practices Property Validation: Validate all imported properties Sanitize user inputs in configuration dialogs Check property values before using in operations Error Information Exposure: Avoid exposing sensitive system information in error messages Log detailed errors for developers without showing to users Provide user-friendly error messages with actionable guidance State Consistency: Verify state transitions are atomic where possible Implement rollback mechanisms for critical operations Validate system state before proceeding with operations This developer guide provides the technical foundation for maintaining and enhancing the EOY process. For implementation details of specific functions, refer to the source code in src/utility/yearEndBudget.js and related files.","title":"Developer Guide"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#eoy-process-developer-guide","text":"This guide contains technical information for developers who are maintaining or enhancing the End of Year (EOY) process. End users should refer to the End of Year Process Overview and EOY Budget Setup guides instead.","title":"EOY Process Developer Guide"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#current-implementation-overview","text":"The EOY process has been significantly improved from the original design and now features:","title":"Current Implementation Overview"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#key-architectural-features","text":"Month-Restricted Access - Process only available in June (final fiscal month) State-Driven Menu System - Menus adapt based on EOY completion status Three-Step Progressive Workflow - Clear progression through setup phases Automated Master Archiving - Previous master automatically archived on completion Comprehensive Verification - Multiple validation checkpoints throughout process User Choice Dialogs - Commitment validation with Fix Now vs Ignore options Draggable Warning Dialogs - Improved user experience for all warning dialogs","title":"Key Architectural Features"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#core-functions-and-files","text":"The EOY implementation is primarily contained in src/utility/yearEndBudget.js : Main Entry Points: showYearEndHelp() - Initial help dialog in master spreadsheet setupNewYearBudget() - Step 1: Initial EOY setup continueEOYSetup() - Step 2: Continue configuration and budget update finalizeEOYSetup() - Step 3: Finalization and master archiving Supporting Functions: exportPropertiesToSheet() / importPropertiesFromSheet() - Property management clearTransactionSheets() - Clean Cash Flow and Bank Records sheets copyBankBalancesToOpeningPositions() - Transfer bank balances updateMonthlyHeaders() - Update fiscal year headers across sheets archiveLegacyMaster() - Automatic master archiving validateCommitments() - Check for outstanding commitments checkAllBalances() - Comprehensive balance validation","title":"Core Functions and Files"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#development-and-testing-workflow","text":"","title":"Development and Testing Workflow"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#critical-development-process","text":"When developing and testing the EOY process, you must follow this workflow to ensure you're testing the latest code: Development Phase: Make all script changes in the MASTER spreadsheet Test individual functions using Apps Script editor Push changes using clasp push to update MASTER's script project Testing Phase: Always delete existing test copies before creating new ones Make a fresh copy of MASTER for each test cycle Each copy gets its own Apps Script project with the current code Test the complete EOY process in the fresh copy Issue Resolution: Document any issues found during testing Make fixes in the MASTER spreadsheet Push changes to MASTER using clasp push Delete test copy and create a new one for retesting Critical: Never use old test copies. Each copy has its own script project, and using an old copy will test outdated code, leading to false results and wasted development time.","title":"Critical Development Process"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#month-restriction-testing","text":"The EOY process includes month validation that restricts access to June only: // In setupNewYearBudget() and showYearEndHelp() const currentMonth = getCurrentMonth(); if (currentMonth && currentMonth.month !== 6) { // Block access with user-friendly message ui.alert(\"Process Not Available\", \"The 'Start End of Year Process' is only available in June...\"); return; } Testing Considerations: - Production: Process only works in June - Development: You may need to temporarily bypass month checking for testing - Test Mode: Use testMode parameters in functions where available","title":"Month Restriction Testing"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#state-management-and-menu-system","text":"","title":"State Management and Menu System"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#eoy-state-tracking","text":"The system uses script properties to track EOY progress: // Key properties for state management - IS_MASTER: \"true\"/\"false\" - Whether spreadsheet is the active master - EOY_SETUP_COMPLETE: \"true\"/\"false\" - Whether EOY setup is finished - EOY_READY_FOR_EOM: \"true\"/\"false\" - Intermediate state during setup - CURRENT_SPREADSHEET_ID: \"{id}\" - Current spreadsheet identifier - MASTER_SPREADSHEET_ID: \"{id}\" - ID of the master spreadsheet","title":"EOY State Tracking"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#menu-state-logic","text":"The menu system in onOpen.js adapts based on these states: // In createBasicMenus() if (!isMaster && !eoySetupComplete && !eoyReadyForEom) { // Fresh copy - show only EOY setup options periodMenu.addSubMenu( ui.createMenu(\"End of Year Setup\") .addItem(\"1. Run Initial EOY Setup\", \"setupNewYearBudget\") .addItem(\"2. Continue EOY Setup\", \"continueEOYSetup\") .addItem(\"3. Finalize EOY Setup\", \"finalizeEOYSetup\") ); }","title":"Menu State Logic"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#state-transitions","text":"Fresh Copy Creation: IS_MASTER = false (imported from master) EOY_SETUP_COMPLETE = false EOY_READY_FOR_EOM = false Menu shows only EOY setup options After Initial Setup: Properties updated to reflect progress Menu options remain EOY-focused After Finalization: IS_MASTER = true EOY_SETUP_COMPLETE = true Menu shows normal operational options","title":"State Transitions"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#technical-implementation-details","text":"","title":"Technical Implementation Details"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#commitment-validation-system","text":"The EOY process now includes a sophisticated commitment validation system that provides user choice rather than blocking: // In endOfMonthProcessing() - commitment validation if (!isDev && !eoyReadyForEom) { const commitmentCheck = validateCommitments(); if (!commitmentCheck.isValid) { // Show user choice dialog instead of blocking const userChoice = ui.alert( \"\u26a0\ufe0f Outstanding Commitments Warning\", `The following commitments have not been met for ${monthNames[currentMonth]} ${currentYear}:\\n\\n` + commitmentCheck.issues.join(\"\\n\") + \"\\n\\n\u26a0\ufe0f WARNING: These commitments are outstanding.\\n\\n\" + \"Choose your action:\\n\" + \"\u2022 NO = Fix Now: Address commitments before EOM processing\\n\" + \"\u2022 YES = Ignore: Proceed with EOM despite outstanding commitments\", ui.ButtonSet.YES_NO ); if (userChoice === ui.Button.NO) { // User chose to fix commitments - block EOM return; } // User chose to ignore - continue with EOM } } Key Features: - Non-blocking Design: Users can choose to proceed despite outstanding commitments - Clear User Interface: Intuitive button mapping (NO = Fix Now, YES = Ignore) - Month/Year Display: Shows correct month and year from script properties - Detailed Issue Reporting: Lists specific commitment problems for user review","title":"Commitment Validation System"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#improved-dialog-system","text":"All warning dialogs in the EOY process now use a draggable, user-friendly interface: // Example of draggable dialog implementation function showEOYSetupIncompleteDialog(issues) { const htmlOutput = HtmlService.createHtmlOutput(` <div style=\"font-family: Arial, sans-serif; padding: 20px;\"> <h3>\u26a0\ufe0f EOY Setup Incomplete</h3> <p>The following issues must be resolved before finalization:</p> <ul>${issues.map(issue => `<li>${issue}</li>`).join('')}</ul> <p>Please address these issues and try again.</p> </div> `) .setWidth(500) .setHeight(300); SpreadsheetApp.getUi().showModelessDialog(htmlOutput, \"EOY Setup Incomplete\"); } Benefits: - Better User Experience: Dialogs can be moved and don't block the interface - Consistent Design: All dialogs follow the same visual pattern - Improved Readability: Better formatting and layout for complex information - Non-intrusive: Users can continue working while reviewing dialog content","title":"Improved Dialog System"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#property-exportimport-system","text":"The property management system ensures continuity between master and copy: // Export from master to hidden sheet function exportPropertiesToSheet() { const ss = SpreadsheetApp.getActiveSpreadsheet(); let sheet = ss.getSheetByName(\"_Properties\"); if (!sheet) { sheet = ss.insertSheet(\"_Properties\"); sheet.hideSheet(); } const props = PropertiesService.getScriptProperties().getProperties(); // Write properties to sheet for copying } // Import from hidden sheet in new copy function importPropertiesFromSheet() { const ss = SpreadsheetApp.getActiveSpreadsheet(); const sheet = ss.getSheetByName(\"_Properties\"); if (sheet) { // Read properties from sheet and set in new copy // Adjust IS_MASTER to false for new copy } }","title":"Property Export/Import System"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#verification-system","text":"Multiple verification points ensure system integrity: Sheet Structure Verification ( validateSheets() ) Verifies all required sheets exist Checks sheet naming conventions Validates critical named ranges Budget Formula Verification ( verifyBudgetSetup() ) Checks Annual Budget formulas Validates Maintain Budget structure Ensures proper formula references Balance Verification (in finalizeEOYSetup() ) Banks sheet: Cell C30 = 0 Annual Budget: Cell B106 = 0 Maintain Budget: Cell E120 = 0","title":"Verification System"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#automatic-master-archiving","text":"The archiving system provides automatic legacy master management: function archiveLegacyMaster(spreadsheetId, testMode = false) { try { const targetSS = SpreadsheetApp.openById(spreadsheetId); const fiscalYear = getFiscalYearFromSpreadsheet(targetSS); if (testMode) { // Create test copy for verification return targetSS.copy(`${targetSS.getName()}_ARCHIVED_TEST`); } // Rename with archived suffix const newName = `${targetSS.getName()}_ARCHIVED_FY${fiscalYear}`; targetSS.rename(newName); // Add hidden archive metadata sheet const archiveSheet = targetSS.insertSheet(\"_Archive\"); archiveSheet.hideSheet(); // Set archive metadata archiveSheet.getRange(\"A1\").setValue(\"ARCHIVED_DATE\"); archiveSheet.getRange(\"B1\").setValue(new Date()); archiveSheet.getRange(\"A2\").setValue(\"FORMER_MASTER\"); archiveSheet.getRange(\"B2\").setValue(true); } catch (error) { console.error(\"Error archiving legacy master:\", error); throw error; } }","title":"Automatic Master Archiving"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#known-technical-limitations","text":"","title":"Known Technical Limitations"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#script-property-isolation","text":"Issue: Google Apps Script security model prevents modifying script properties of other spreadsheets. Impact: Archived masters retain IS_MASTER = true in their script properties. Mitigation Strategies: 1. Renamed Title - Archived spreadsheets have clear \"_ARCHIVED_FY{year}\" suffix 2. Archive Metadata - Hidden \"_Archive\" sheet marks archival status 3. User Documentation - Clear guidance to avoid using archived spreadsheets","title":"Script Property Isolation"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#google-authorization-user-experience","text":"Issue: Google shows intimidating \"unsafe\" warnings for all custom spreadsheet scripts. Impact: Users may be reluctant to continue authorization due to scary warning language. User Experience Challenges: - \"Google hasn't verified this app\" warning appears threatening - \"Go to Budget App Scripts (unsafe)\" button seems dangerous - Users may abandon the process thinking something is wrong Mitigation Strategies: 1. Clear Documentation - Detailed explanation that warnings are normal 2. Step-by-Step Instructions - Specific guidance through each authorization step 3. Reassurance - Explicit statements that the process is safe and expected","title":"Google Authorization User Experience"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#testing-and-quality-assurance","text":"","title":"Testing and Quality Assurance"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#comprehensive-testing-checklist","text":"","title":"Comprehensive Testing Checklist"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#before-testing-session","text":"[ ] All changes pushed to MASTER spreadsheet [ ] Old test copies deleted [ ] Fresh copy created from MASTER [ ] Test environment prepared","title":"Before Testing Session"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#during-testing-step-1-initial-setup","text":"[ ] Month restriction working (if testing in non-June month) [ ] Help dialog displays correctly with documentation links [ ] Property export completes successfully [ ] New copy creation process works [ ] Menu system shows only EOY options in new copy","title":"During Testing - Step 1 (Initial Setup)"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#during-testing-step-2-configuration","text":"[ ] Authorization process works smoothly [ ] Verification checks pass for valid setup [ ] Configuration dialog accepts valid inputs [ ] Manual budget update process functions [ ] Budget balance validation works [ ] Continue setup processes correctly","title":"During Testing - Step 2 (Configuration)"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#during-testing-step-3-finalization","text":"[ ] Final verification checks function properly [ ] Master archiving completes without errors [ ] New copy marked as master successfully [ ] Menu system updates to normal operational mode [ ] All transaction sheets properly cleared [ ] Commitment validation dialogs work correctly [ ] User choice options (Fix Now vs Ignore) function properly","title":"During Testing - Step 3 (Finalization)"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#post-testing-verification","text":"[ ] Master functionality works in new spreadsheet [ ] Archived master properly renamed and marked [ ] Historical data preserved in archived master [ ] No script errors in new master [ ] Documentation links work correctly","title":"Post-Testing Verification"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#testing-functions","text":"Several helper functions support testing: // Test archiving without affecting production function testArchiveMaster() { const currentId = SpreadsheetApp.getActiveSpreadsheet().getId(); return archiveLegacyMaster(currentId, true); // testMode = true } // Test EOY process with safety checks function testEOYProcess() { console.log(\"Starting EOY test process...\"); return setupNewYearBudget(true); // testMode = true } // Safe refresh function for testing function runRefreshSafely() { try { SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Annual Budget\"); // Additional safety checks } catch (error) { console.error(\"Refresh safety check failed:\", error); } }","title":"Testing Functions"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#performance-considerations","text":"","title":"Performance Considerations"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#optimization-strategies","text":"Minimal Sheet Operations: Batch range operations where possible Avoid excessive individual cell operations Use getValues()/setValues() for bulk operations Property Management: Cache frequently accessed properties Minimize property service calls Use batch property operations Verification Efficiency: Combine multiple checks into single functions Early exit on validation failures Provide specific error messages for quick resolution","title":"Optimization Strategies"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#resource-management","text":"// Example of efficient batch operations function updateMonthlyHeaders() { const sheet = SpreadsheetApp.getActiveSpreadsheet() .getSheetByName(\"Annual Budget\"); // Get all headers in one operation const headerRange = sheet.getRange(1, 1, 1, sheet.getLastColumn()); const headers = headerRange.getValues()[0]; // Process headers in memory const updatedHeaders = headers.map(header => { // Update logic here return processHeader(header); }); // Write all headers back in one operation headerRange.setValues([updatedHeaders]); }","title":"Resource Management"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#future-enhancement-opportunities","text":"","title":"Future Enhancement Opportunities"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#planned-improvements","text":"Enhanced Pre-EOY Validation: Automatic verification of balance requirements Account reconciliation status checking Data integrity validation before process start Improved Error Recovery: Process checkpoint system for resuming interrupted operations Better error messages with specific resolution steps Automatic retry mechanisms for transient failures Advanced State Management: More granular progress tracking Session persistence across browser refreshes Better handling of concurrent user access","title":"Planned Improvements"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#technical-debt-reduction","text":"Script Property Limitation Resolution: Research Google Workspace APIs for property management Implement alternative master tracking systems Develop more robust archiving mechanisms Code Organization: Modularize large functions for better maintainability Implement consistent error handling patterns Add comprehensive inline documentation Testing Infrastructure: Automated testing framework for EOY process Mock data generation for consistent testing Performance benchmarking tools","title":"Technical Debt Reduction"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#security-and-access-considerations","text":"","title":"Security and Access Considerations"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#permission-requirements","text":"The EOY process requires specific permissions: - Script execution in both master and new copy - Spreadsheet access for reading/writing operations - File creation for making copies - Property management for state tracking","title":"Permission Requirements"},{"location":"guides/yearly-tasks/end-of-year/developer-guide/#security-best-practices","text":"Property Validation: Validate all imported properties Sanitize user inputs in configuration dialogs Check property values before using in operations Error Information Exposure: Avoid exposing sensitive system information in error messages Log detailed errors for developers without showing to users Provide user-friendly error messages with actionable guidance State Consistency: Verify state transitions are atomic where possible Implement rollback mechanisms for critical operations Validate system state before proceeding with operations This developer guide provides the technical foundation for maintaining and enhancing the EOY process. For implementation details of specific functions, refer to the source code in src/utility/yearEndBudget.js and related files.","title":"Security Best Practices"},{"location":"guides/yearly-tasks/end-of-year/overview/","text":"End of Year Process Overview The End of Year (EOY) process helps you transition from one financial year to the next while maintaining your budget history and setting up a fresh budget for the new year. When to Use The EOY process should be initiated when: You're in June (the final month of the fiscal year) All transactions for the current year have been reconciled You're ready to start planning for the next financial year (July-June) \u23f0 CRITICAL TIMING: Complete the EOY process immediately after your fiscal year ends (June 30). Then import July transactions within 7 days to enable cross-year duplicate detection. Why This Matters: Banks often advance transaction processing dates by 2-7 days, moving late June transactions into July. Delayed reconciliation prevents the system from catching these duplicates automatically. Important: The EOY process can only be started during June. If you try to access it in other months, the system will display a restriction message and block the process. Process Summary The EOY process consists of four main steps with clear menu-driven progression: 1. Start EOY Process (in Master Spreadsheet) Menu Item: \"Start End of Year Process\" Export critical properties to ensure smooth transition Create a copy of your current budget spreadsheet The master spreadsheet remains unchanged during this phase 2. Initial Setup (in New Copy) Menu Item: \"1. Run Initial EOY Setup\" Authorize scripts in the new copy Configure new year settings (dates, payment schedules) Manual budget update - Review and update all income and expense amounts 3. Continue Setup (in New Copy) Menu Item: \"2. Continue EOY Setup\" - Copy bank balances and clear transaction sheets Menu Item: \"Run End of Month Process\" - Complete final month processing for fiscal year Commitment Validation - System checks for outstanding commitments with user choice (Fix Now vs Ignore) 4. Finalization (in New Copy) Menu Item: \"3. Finalize EOY Setup\" Verify all completion criteria are met Register the new copy as the active master spreadsheet Archive the previous master with \"_ARCHIVED_FY{year}\" suffix State-Driven Menu System The EOY process uses an intelligent menu system that adapts based on your progress: In Master Spreadsheet (June only) Period Processing \u2192 Start End of Year Process - Begin the EOY workflow In Fresh Copy (Before Setup) Period Processing shows only EOY Setup options: 1. Run Initial EOY Setup - Start configuration 2. Continue EOY Setup - Available after initial setup 3. Finalize EOY Setup - Available after continuation In Fresh Copy (After Setup Complete) Period Processing shows normal menu: Run End of Month Process - Normal monthly operations Start End of Year Process - For next year's EOY The menu system automatically adapts based on your EOY completion status, ensuring you always see the appropriate options for your current stage. Pre-EOY Requirements Before beginning the EOY process, ensure these conditions are met: 1. Month Restriction Must be June (final fiscal month) System automatically validates this requirement 2. Account Reconciliation LastReconciliationDate should be at or near June 30 All transactions properly categorized and reconciled 3. Balanced Sheets (CRITICAL - Strictly Enforced) Banks sheet: Zero balance in cell C30 Annual Budget sheet: Zero balance in cell B106 Maintain Budget sheet: Zero balance in cell E120 \ud83d\udea8 CRITICAL REQUIREMENT: The system now strictly enforces balance checking and will block the EOY process if any sheet is unbalanced. Why This Matters: The EOY process copies current bank balances to become opening balances for the new fiscal year. If these are incorrect, your entire new year will start with wrong foundation data. \u274c No Override Available: Unlike End of Month processing, there is no \"proceed anyway\" option for EOY to prevent catastrophic data issues. \ud83d\udca1 Solution: 1. First - Update ALL bank balances to be accurate as at June 30 (banks often apply monthly interest as final transaction) 2. Second - Use 'Reconciliation Dashboard' to resolve any Cash Flow transaction issues (missing, extra, or unreconciled transactions) 4. Commitment Validation (User Choice) System checks for outstanding commitments during End of Month processing User Choice Dialog: Choose between \"Fix Now\" (NO) or \"Ignore\" (YES) Fix Now (NO): Address commitments before proceeding with EOM Ignore (YES): Proceed with EOM despite outstanding commitments Automated Master Archiving One of the key improvements in the current EOY process is automatic archiving of your previous master spreadsheet: What Happens Automatically When you complete \"3. Finalize EOY Setup\": New copy becomes the master - Marked with IS_MASTER = true Previous master is automatically renamed - Gets \"_ARCHIVED_FY{year}\" suffix Archive metadata is added - Hidden \"_Archive\" sheet with archival information Clear separation - No confusion about which spreadsheet to use Benefits No manual archiving required - System handles it automatically Clear naming convention - Archived spreadsheets are easily identifiable Preserved history - All previous data remains intact and accessible Reduced errors - No risk of accidentally using the wrong spreadsheet Authorization Process When working with a new copy, you'll need to authorize the scripts. Don't worry - this is normal and safe: Initial Prompt - \"Authorization Required\" dialog appears Google Authorization - Select your account Security Warning - Google will show a warning that looks scary but is normal: You'll see \"Google hasn't verified this app\" You'll see \"The app is requesting access to sensitive info\" This is expected - Google shows this for all custom spreadsheet scripts Continue Despite Warning: Click \"Advanced\" (bottom left of the dialog) Click \"Go to Budget App Scripts (unsafe)\" - this is safe, just Google's standard warning Check \"Select all\" to grant required permissions Click \"Allow\" Verification - System automatically validates setup About the \"Unsafe\" Warning: Google shows this warning for ALL custom spreadsheet scripts, not because there's actually a problem. The budget system is safe to authorize - it only accesses your budget spreadsheet data and nothing else. If authorization fails, refresh the page and try again. The system includes retry logic for common authorization issues. Getting Started From Master Spreadsheet (June only) Navigate to Period Processing \u2192 Start End of Year Process Follow the guided instructions in the help dialog Export properties when prompted Create a copy of your spreadsheet From New Copy Open the new copy Navigate to Period Processing \u2192 1. Run Initial EOY Setup Complete authorization when prompted - Google will show scary warnings but this is normal and safe Follow the four-step process through to finalization Documentation and Support Step-by-step instructions: EOY Budget Setup Technical details: Developer Guide Troubleshooting: Common Issues The complete documentation is accessible at any time during the EOY process through menu links and help dialogs. You don't need to complete the process in one session - you can refer back to the documentation as needed.","title":"Overview"},{"location":"guides/yearly-tasks/end-of-year/overview/#end-of-year-process-overview","text":"The End of Year (EOY) process helps you transition from one financial year to the next while maintaining your budget history and setting up a fresh budget for the new year.","title":"End of Year Process Overview"},{"location":"guides/yearly-tasks/end-of-year/overview/#when-to-use","text":"The EOY process should be initiated when: You're in June (the final month of the fiscal year) All transactions for the current year have been reconciled You're ready to start planning for the next financial year (July-June) \u23f0 CRITICAL TIMING: Complete the EOY process immediately after your fiscal year ends (June 30). Then import July transactions within 7 days to enable cross-year duplicate detection. Why This Matters: Banks often advance transaction processing dates by 2-7 days, moving late June transactions into July. Delayed reconciliation prevents the system from catching these duplicates automatically. Important: The EOY process can only be started during June. If you try to access it in other months, the system will display a restriction message and block the process.","title":"When to Use"},{"location":"guides/yearly-tasks/end-of-year/overview/#process-summary","text":"The EOY process consists of four main steps with clear menu-driven progression:","title":"Process Summary"},{"location":"guides/yearly-tasks/end-of-year/overview/#1-start-eoy-process-in-master-spreadsheet","text":"Menu Item: \"Start End of Year Process\" Export critical properties to ensure smooth transition Create a copy of your current budget spreadsheet The master spreadsheet remains unchanged during this phase","title":"1. Start EOY Process (in Master Spreadsheet)"},{"location":"guides/yearly-tasks/end-of-year/overview/#2-initial-setup-in-new-copy","text":"Menu Item: \"1. Run Initial EOY Setup\" Authorize scripts in the new copy Configure new year settings (dates, payment schedules) Manual budget update - Review and update all income and expense amounts","title":"2. Initial Setup (in New Copy)"},{"location":"guides/yearly-tasks/end-of-year/overview/#3-continue-setup-in-new-copy","text":"Menu Item: \"2. Continue EOY Setup\" - Copy bank balances and clear transaction sheets Menu Item: \"Run End of Month Process\" - Complete final month processing for fiscal year Commitment Validation - System checks for outstanding commitments with user choice (Fix Now vs Ignore)","title":"3. Continue Setup (in New Copy)"},{"location":"guides/yearly-tasks/end-of-year/overview/#4-finalization-in-new-copy","text":"Menu Item: \"3. Finalize EOY Setup\" Verify all completion criteria are met Register the new copy as the active master spreadsheet Archive the previous master with \"_ARCHIVED_FY{year}\" suffix","title":"4. Finalization (in New Copy)"},{"location":"guides/yearly-tasks/end-of-year/overview/#state-driven-menu-system","text":"The EOY process uses an intelligent menu system that adapts based on your progress:","title":"State-Driven Menu System"},{"location":"guides/yearly-tasks/end-of-year/overview/#in-master-spreadsheet-june-only","text":"Period Processing \u2192 Start End of Year Process - Begin the EOY workflow","title":"In Master Spreadsheet (June only)"},{"location":"guides/yearly-tasks/end-of-year/overview/#in-fresh-copy-before-setup","text":"Period Processing shows only EOY Setup options: 1. Run Initial EOY Setup - Start configuration 2. Continue EOY Setup - Available after initial setup 3. Finalize EOY Setup - Available after continuation","title":"In Fresh Copy (Before Setup)"},{"location":"guides/yearly-tasks/end-of-year/overview/#in-fresh-copy-after-setup-complete","text":"Period Processing shows normal menu: Run End of Month Process - Normal monthly operations Start End of Year Process - For next year's EOY The menu system automatically adapts based on your EOY completion status, ensuring you always see the appropriate options for your current stage.","title":"In Fresh Copy (After Setup Complete)"},{"location":"guides/yearly-tasks/end-of-year/overview/#pre-eoy-requirements","text":"Before beginning the EOY process, ensure these conditions are met:","title":"Pre-EOY Requirements"},{"location":"guides/yearly-tasks/end-of-year/overview/#1-month-restriction","text":"Must be June (final fiscal month) System automatically validates this requirement","title":"1. Month Restriction"},{"location":"guides/yearly-tasks/end-of-year/overview/#2-account-reconciliation","text":"LastReconciliationDate should be at or near June 30 All transactions properly categorized and reconciled","title":"2. Account Reconciliation"},{"location":"guides/yearly-tasks/end-of-year/overview/#3-balanced-sheets-critical-strictly-enforced","text":"Banks sheet: Zero balance in cell C30 Annual Budget sheet: Zero balance in cell B106 Maintain Budget sheet: Zero balance in cell E120 \ud83d\udea8 CRITICAL REQUIREMENT: The system now strictly enforces balance checking and will block the EOY process if any sheet is unbalanced. Why This Matters: The EOY process copies current bank balances to become opening balances for the new fiscal year. If these are incorrect, your entire new year will start with wrong foundation data. \u274c No Override Available: Unlike End of Month processing, there is no \"proceed anyway\" option for EOY to prevent catastrophic data issues. \ud83d\udca1 Solution: 1. First - Update ALL bank balances to be accurate as at June 30 (banks often apply monthly interest as final transaction) 2. Second - Use 'Reconciliation Dashboard' to resolve any Cash Flow transaction issues (missing, extra, or unreconciled transactions)","title":"3. Balanced Sheets (CRITICAL - Strictly Enforced)"},{"location":"guides/yearly-tasks/end-of-year/overview/#4-commitment-validation-user-choice","text":"System checks for outstanding commitments during End of Month processing User Choice Dialog: Choose between \"Fix Now\" (NO) or \"Ignore\" (YES) Fix Now (NO): Address commitments before proceeding with EOM Ignore (YES): Proceed with EOM despite outstanding commitments","title":"4. Commitment Validation (User Choice)"},{"location":"guides/yearly-tasks/end-of-year/overview/#automated-master-archiving","text":"One of the key improvements in the current EOY process is automatic archiving of your previous master spreadsheet:","title":"Automated Master Archiving"},{"location":"guides/yearly-tasks/end-of-year/overview/#what-happens-automatically","text":"When you complete \"3. Finalize EOY Setup\": New copy becomes the master - Marked with IS_MASTER = true Previous master is automatically renamed - Gets \"_ARCHIVED_FY{year}\" suffix Archive metadata is added - Hidden \"_Archive\" sheet with archival information Clear separation - No confusion about which spreadsheet to use","title":"What Happens Automatically"},{"location":"guides/yearly-tasks/end-of-year/overview/#benefits","text":"No manual archiving required - System handles it automatically Clear naming convention - Archived spreadsheets are easily identifiable Preserved history - All previous data remains intact and accessible Reduced errors - No risk of accidentally using the wrong spreadsheet","title":"Benefits"},{"location":"guides/yearly-tasks/end-of-year/overview/#authorization-process","text":"When working with a new copy, you'll need to authorize the scripts. Don't worry - this is normal and safe: Initial Prompt - \"Authorization Required\" dialog appears Google Authorization - Select your account Security Warning - Google will show a warning that looks scary but is normal: You'll see \"Google hasn't verified this app\" You'll see \"The app is requesting access to sensitive info\" This is expected - Google shows this for all custom spreadsheet scripts Continue Despite Warning: Click \"Advanced\" (bottom left of the dialog) Click \"Go to Budget App Scripts (unsafe)\" - this is safe, just Google's standard warning Check \"Select all\" to grant required permissions Click \"Allow\" Verification - System automatically validates setup About the \"Unsafe\" Warning: Google shows this warning for ALL custom spreadsheet scripts, not because there's actually a problem. The budget system is safe to authorize - it only accesses your budget spreadsheet data and nothing else. If authorization fails, refresh the page and try again. The system includes retry logic for common authorization issues.","title":"Authorization Process"},{"location":"guides/yearly-tasks/end-of-year/overview/#getting-started","text":"","title":"Getting Started"},{"location":"guides/yearly-tasks/end-of-year/overview/#from-master-spreadsheet-june-only","text":"Navigate to Period Processing \u2192 Start End of Year Process Follow the guided instructions in the help dialog Export properties when prompted Create a copy of your spreadsheet","title":"From Master Spreadsheet (June only)"},{"location":"guides/yearly-tasks/end-of-year/overview/#from-new-copy","text":"Open the new copy Navigate to Period Processing \u2192 1. Run Initial EOY Setup Complete authorization when prompted - Google will show scary warnings but this is normal and safe Follow the four-step process through to finalization","title":"From New Copy"},{"location":"guides/yearly-tasks/end-of-year/overview/#documentation-and-support","text":"Step-by-step instructions: EOY Budget Setup Technical details: Developer Guide Troubleshooting: Common Issues The complete documentation is accessible at any time during the EOY process through menu links and help dialogs. You don't need to complete the process in one session - you can refer back to the documentation as needed.","title":"Documentation and Support"},{"location":"guides/yearly-tasks/end-of-year/setup/","text":"EOY Budget Setup This guide provides simple, direct instructions for completing the End of Year (EOY) process to set up your new fiscal year budget. Timing: The EOY process can only be started during June (the final month of the fiscal year). The system will block access during other months. Before You Start \u2705 Prerequisites (Must Complete First) Current month must be June - System automatically checks this All balances must be zero: Banks sheet: Cell C30 = $0.00 Annual Budget sheet: Cell B106 = $0.00 Maintain Budget sheet: Cell E120 = $0.00 Critical: If any balance is not zero, the EOY process will be blocked. Fix balance issues using the Reconciliation Dashboard before starting EOY. Step 1: Start EOY Process (Master Spreadsheet) 1.1 Export Properties In your master spreadsheet (June only) Go to Period Processing \u2192 Start End of Year Process Click Export Properties Now when prompted Wait for success confirmation 1.2 Create New Copy Go to File \u2192 Make a copy Name it \"Budget-2025\" (or your new year) Choose destination folder Click Make a copy Open the new copy Step 2: Initial Setup (New Copy) 2.1 Run Initial Setup In the new copy , go to Period Processing \u2192 1. Run Initial EOY Setup Complete authorization when prompted (Google warnings are normal and safe) Click YES to proceed with setup 2.1a Authorization Process (Important!) When you run the initial setup, Google will ask you to authorize the scripts. Don't worry - this is normal and safe! What you'll see: \"Authorization Required\" dialog appears Click \"Continue\" to proceed Google Account Selection Select your Google account (the same one you use for Google Sheets) \u26a0\ufe0f Scary-looking Security Warning (This is normal!) You'll see: \"Google hasn't verified this app\" You'll see: \"The app is requesting access to sensitive info\" Don't panic! This is Google's standard warning for ALL custom spreadsheet scripts Continue Despite Warning: Click \"Advanced\" (bottom left of the dialog) Click \"Go to Budget App Scripts (unsafe)\" - this is safe, just Google's standard warning Check \"Select all\" checkbox to grant required permissions Click \"Continue\" Success Confirmation You'll see a success message The setup process will continue automatically About the \"Unsafe\" Warning: Google shows this warning for ALL custom spreadsheet scripts, not because there's actually a problem. The budget system is safe to authorize - it only accesses your budget spreadsheet data and nothing else. If authorization fails, refresh the page and try again. The system includes retry logic for common authorization issues. 2.2 Configure New Year Budget Start Date: Enter July 1, 2025 Payment Dates: Update your payment schedules for the new year Click Save Configuration 2.3 Update Budget Amounts Income Section: Update all income amounts for new year Expense Section: Update all expense amounts for new year Ensure balance: Cell E120 must show $0.00 Click REFRESH button at bottom of configuration Step 3: Continue Setup (New Copy) 3.1 Copy Balances and Clear Data Go to Period Processing \u2192 2. Continue EOY Setup Click YES to proceed System automatically: Copies bank balances to opening positions Clears transaction sheets Updates monthly headers 3.2 Run End of Month Process Go to Period Processing \u2192 Run End of Month Process Commitment Validation Dialog will appear if there are outstanding commitments: NO = Fix Now: Address commitments before proceeding YES = Ignore: Proceed with EOM despite outstanding commitments Complete the final month processing for June This transitions the system from June to July Step 4: Finalize Setup (New Copy) 4.1 Complete Finalization Go to Period Processing \u2192 3. Finalize EOY Setup Click YES to finalize System automatically: Marks this as the new master spreadsheet 4.2 Archive Legacy Master Go back to your original master spreadsheet Go to Settings \u2192 \u26a0\ufe0f Advanced \u2192 Archive This Master This completes the EOY process What Happens Automatically \u2705 System Handles These Tasks Property transfer from master to new copy Bank balance copying to opening positions Transaction sheet clearing (Cash Flow and Bank Records) Monthly header updates for new fiscal year Menu system updates to show normal operations \ud83d\udccb You Must Do These Tasks Update budget amounts for income and expenses Ensure budget balance (Cell E120 = $0.00) Archive the legacy master manually After EOY Completion \u2705 Your New System New master spreadsheet ready for July 2025 - June 2026 July set as current month All transaction sheets cleared for fresh start Budget amounts updated for new fiscal year \ud83d\udcc1 Your Archived System Previous master archived with clear naming All historical data preserved Available for reference but not for active use Troubleshooting \u274c \"Balance Check Failed\" Problem: EOY process blocked due to non-zero balances Solution: 1. Update bank balances to June 30 accuracy 2. Use Reconciliation Dashboard to fix transaction issues 3. Ensure all three balance cells show $0.00 \u274c \"Process Not Available\" Problem: EOY menu option not available Solution: Wait until June - EOY only works in final fiscal month \u274c Authorization Warnings Problem: Google shows scary \"unsafe\" warnings Solution: 1. Don't panic - This is Google's standard warning for ALL custom scripts 2. Click \"Advanced\" (bottom left of warning dialog) 3. Click \"Go to Budget App Scripts (unsafe)\" - This is safe to do 4. Check \"Select all\" to grant required permissions 5. Click \"Allow\" If authorization fails: - Refresh the browser page - Try the authorization process again - Check that you're using the same Google account as your spreadsheet \u274c \"End of Month Processing Required\" Problem: Finalization blocked Solution: Run \"Period Processing \u2192 Run End of Month Process\" first to transition from June to July \u274c \"Outstanding Commitments Warning\" Problem: Commitment validation dialog appears during EOM processing Solution: - NO = Fix Now: Address the listed commitments before proceeding - YES = Ignore: Proceed with EOM despite outstanding commitments - Use the Reconciliation Dashboard to identify and fix commitment issues Quick Reference Menu Flow Master (June): Period Processing \u2192 Start End of Year Process New Copy: Period Processing \u2192 1. Run Initial EOY Setup New Copy: Period Processing \u2192 2. Continue EOY Setup New Copy: Period Processing \u2192 Run End of Month Process New Copy: Period Processing \u2192 3. Finalize EOY Setup Master: Settings \u2192 \u26a0\ufe0f Advanced \u2192 Archive This Master Critical Cells Banks balance: C30 = $0.00 Annual Budget balance: B106 = $0.00 Maintain Budget balance: E120 = $0.00 Key Dates EOY Start: June (final fiscal month) New Year Start: July 1, 2025 Fiscal Year: July 2025 - June 2026 The EOY process is designed to be completed in one session, but you can pause between steps if needed. The menu system will guide you to the next appropriate step.","title":"Setup"},{"location":"guides/yearly-tasks/end-of-year/setup/#eoy-budget-setup","text":"This guide provides simple, direct instructions for completing the End of Year (EOY) process to set up your new fiscal year budget. Timing: The EOY process can only be started during June (the final month of the fiscal year). The system will block access during other months.","title":"EOY Budget Setup"},{"location":"guides/yearly-tasks/end-of-year/setup/#before-you-start","text":"","title":"Before You Start"},{"location":"guides/yearly-tasks/end-of-year/setup/#prerequisites-must-complete-first","text":"Current month must be June - System automatically checks this All balances must be zero: Banks sheet: Cell C30 = $0.00 Annual Budget sheet: Cell B106 = $0.00 Maintain Budget sheet: Cell E120 = $0.00 Critical: If any balance is not zero, the EOY process will be blocked. Fix balance issues using the Reconciliation Dashboard before starting EOY.","title":"\u2705 Prerequisites (Must Complete First)"},{"location":"guides/yearly-tasks/end-of-year/setup/#step-1-start-eoy-process-master-spreadsheet","text":"","title":"Step 1: Start EOY Process (Master Spreadsheet)"},{"location":"guides/yearly-tasks/end-of-year/setup/#11-export-properties","text":"In your master spreadsheet (June only) Go to Period Processing \u2192 Start End of Year Process Click Export Properties Now when prompted Wait for success confirmation","title":"1.1 Export Properties"},{"location":"guides/yearly-tasks/end-of-year/setup/#12-create-new-copy","text":"Go to File \u2192 Make a copy Name it \"Budget-2025\" (or your new year) Choose destination folder Click Make a copy Open the new copy","title":"1.2 Create New Copy"},{"location":"guides/yearly-tasks/end-of-year/setup/#step-2-initial-setup-new-copy","text":"","title":"Step 2: Initial Setup (New Copy)"},{"location":"guides/yearly-tasks/end-of-year/setup/#21-run-initial-setup","text":"In the new copy , go to Period Processing \u2192 1. Run Initial EOY Setup Complete authorization when prompted (Google warnings are normal and safe) Click YES to proceed with setup","title":"2.1 Run Initial Setup"},{"location":"guides/yearly-tasks/end-of-year/setup/#21a-authorization-process-important","text":"When you run the initial setup, Google will ask you to authorize the scripts. Don't worry - this is normal and safe! What you'll see: \"Authorization Required\" dialog appears Click \"Continue\" to proceed Google Account Selection Select your Google account (the same one you use for Google Sheets) \u26a0\ufe0f Scary-looking Security Warning (This is normal!) You'll see: \"Google hasn't verified this app\" You'll see: \"The app is requesting access to sensitive info\" Don't panic! This is Google's standard warning for ALL custom spreadsheet scripts Continue Despite Warning: Click \"Advanced\" (bottom left of the dialog) Click \"Go to Budget App Scripts (unsafe)\" - this is safe, just Google's standard warning Check \"Select all\" checkbox to grant required permissions Click \"Continue\" Success Confirmation You'll see a success message The setup process will continue automatically About the \"Unsafe\" Warning: Google shows this warning for ALL custom spreadsheet scripts, not because there's actually a problem. The budget system is safe to authorize - it only accesses your budget spreadsheet data and nothing else. If authorization fails, refresh the page and try again. The system includes retry logic for common authorization issues.","title":"2.1a Authorization Process (Important!)"},{"location":"guides/yearly-tasks/end-of-year/setup/#22-configure-new-year","text":"Budget Start Date: Enter July 1, 2025 Payment Dates: Update your payment schedules for the new year Click Save Configuration","title":"2.2 Configure New Year"},{"location":"guides/yearly-tasks/end-of-year/setup/#23-update-budget-amounts","text":"Income Section: Update all income amounts for new year Expense Section: Update all expense amounts for new year Ensure balance: Cell E120 must show $0.00 Click REFRESH button at bottom of configuration","title":"2.3 Update Budget Amounts"},{"location":"guides/yearly-tasks/end-of-year/setup/#step-3-continue-setup-new-copy","text":"","title":"Step 3: Continue Setup (New Copy)"},{"location":"guides/yearly-tasks/end-of-year/setup/#31-copy-balances-and-clear-data","text":"Go to Period Processing \u2192 2. Continue EOY Setup Click YES to proceed System automatically: Copies bank balances to opening positions Clears transaction sheets Updates monthly headers","title":"3.1 Copy Balances and Clear Data"},{"location":"guides/yearly-tasks/end-of-year/setup/#32-run-end-of-month-process","text":"Go to Period Processing \u2192 Run End of Month Process Commitment Validation Dialog will appear if there are outstanding commitments: NO = Fix Now: Address commitments before proceeding YES = Ignore: Proceed with EOM despite outstanding commitments Complete the final month processing for June This transitions the system from June to July","title":"3.2 Run End of Month Process"},{"location":"guides/yearly-tasks/end-of-year/setup/#step-4-finalize-setup-new-copy","text":"","title":"Step 4: Finalize Setup (New Copy)"},{"location":"guides/yearly-tasks/end-of-year/setup/#41-complete-finalization","text":"Go to Period Processing \u2192 3. Finalize EOY Setup Click YES to finalize System automatically: Marks this as the new master spreadsheet","title":"4.1 Complete Finalization"},{"location":"guides/yearly-tasks/end-of-year/setup/#42-archive-legacy-master","text":"Go back to your original master spreadsheet Go to Settings \u2192 \u26a0\ufe0f Advanced \u2192 Archive This Master This completes the EOY process","title":"4.2 Archive Legacy Master"},{"location":"guides/yearly-tasks/end-of-year/setup/#what-happens-automatically","text":"","title":"What Happens Automatically"},{"location":"guides/yearly-tasks/end-of-year/setup/#system-handles-these-tasks","text":"Property transfer from master to new copy Bank balance copying to opening positions Transaction sheet clearing (Cash Flow and Bank Records) Monthly header updates for new fiscal year Menu system updates to show normal operations","title":"\u2705 System Handles These Tasks"},{"location":"guides/yearly-tasks/end-of-year/setup/#you-must-do-these-tasks","text":"Update budget amounts for income and expenses Ensure budget balance (Cell E120 = $0.00) Archive the legacy master manually","title":"\ud83d\udccb You Must Do These Tasks"},{"location":"guides/yearly-tasks/end-of-year/setup/#after-eoy-completion","text":"","title":"After EOY Completion"},{"location":"guides/yearly-tasks/end-of-year/setup/#your-new-system","text":"New master spreadsheet ready for July 2025 - June 2026 July set as current month All transaction sheets cleared for fresh start Budget amounts updated for new fiscal year","title":"\u2705 Your New System"},{"location":"guides/yearly-tasks/end-of-year/setup/#your-archived-system","text":"Previous master archived with clear naming All historical data preserved Available for reference but not for active use","title":"\ud83d\udcc1 Your Archived System"},{"location":"guides/yearly-tasks/end-of-year/setup/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"guides/yearly-tasks/end-of-year/setup/#balance-check-failed","text":"Problem: EOY process blocked due to non-zero balances Solution: 1. Update bank balances to June 30 accuracy 2. Use Reconciliation Dashboard to fix transaction issues 3. Ensure all three balance cells show $0.00","title":"\u274c \"Balance Check Failed\""},{"location":"guides/yearly-tasks/end-of-year/setup/#process-not-available","text":"Problem: EOY menu option not available Solution: Wait until June - EOY only works in final fiscal month","title":"\u274c \"Process Not Available\""},{"location":"guides/yearly-tasks/end-of-year/setup/#authorization-warnings","text":"Problem: Google shows scary \"unsafe\" warnings Solution: 1. Don't panic - This is Google's standard warning for ALL custom scripts 2. Click \"Advanced\" (bottom left of warning dialog) 3. Click \"Go to Budget App Scripts (unsafe)\" - This is safe to do 4. Check \"Select all\" to grant required permissions 5. Click \"Allow\" If authorization fails: - Refresh the browser page - Try the authorization process again - Check that you're using the same Google account as your spreadsheet","title":"\u274c Authorization Warnings"},{"location":"guides/yearly-tasks/end-of-year/setup/#end-of-month-processing-required","text":"Problem: Finalization blocked Solution: Run \"Period Processing \u2192 Run End of Month Process\" first to transition from June to July","title":"\u274c \"End of Month Processing Required\""},{"location":"guides/yearly-tasks/end-of-year/setup/#outstanding-commitments-warning","text":"Problem: Commitment validation dialog appears during EOM processing Solution: - NO = Fix Now: Address the listed commitments before proceeding - YES = Ignore: Proceed with EOM despite outstanding commitments - Use the Reconciliation Dashboard to identify and fix commitment issues","title":"\u274c \"Outstanding Commitments Warning\""},{"location":"guides/yearly-tasks/end-of-year/setup/#quick-reference","text":"","title":"Quick Reference"},{"location":"guides/yearly-tasks/end-of-year/setup/#menu-flow","text":"Master (June): Period Processing \u2192 Start End of Year Process New Copy: Period Processing \u2192 1. Run Initial EOY Setup New Copy: Period Processing \u2192 2. Continue EOY Setup New Copy: Period Processing \u2192 Run End of Month Process New Copy: Period Processing \u2192 3. Finalize EOY Setup Master: Settings \u2192 \u26a0\ufe0f Advanced \u2192 Archive This Master","title":"Menu Flow"},{"location":"guides/yearly-tasks/end-of-year/setup/#critical-cells","text":"Banks balance: C30 = $0.00 Annual Budget balance: B106 = $0.00 Maintain Budget balance: E120 = $0.00","title":"Critical Cells"},{"location":"guides/yearly-tasks/end-of-year/setup/#key-dates","text":"EOY Start: June (final fiscal month) New Year Start: July 1, 2025 Fiscal Year: July 2025 - June 2026 The EOY process is designed to be completed in one session, but you can pause between steps if needed. The menu system will guide you to the next appropriate step.","title":"Key Dates"}]}